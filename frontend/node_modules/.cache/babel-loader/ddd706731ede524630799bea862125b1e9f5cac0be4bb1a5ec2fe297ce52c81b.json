{"ast":null,"code":"/**\n * Implementation of [Combinations](https://en.wikipedia.org/wiki/Combination) with replacement\n * Combinations are unique subsets of a collection - in this case, k x from a collection at a time.\n * 'With replacement' means that a given element can be chosen multiple times.\n * Unlike permutation, order doesn't matter for combinations.\n *\n * @param {Array} x any type of data\n * @param {int} k the number of objects in each group (without replacement)\n * @returns {Array<Array>} array of permutations\n * @example\n * combinationsReplacement([1, 2], 2); // => [[1, 1], [1, 2], [2, 2]]\n */\nfunction combinationsReplacement(x, k) {\n  const combinationList = [];\n  for (let i = 0; i < x.length; i++) {\n    if (k === 1) {\n      // If we're requested to find only one element, we don't need\n      // to recurse: just push `x[i]` onto the list of combinations.\n      combinationList.push([x[i]]);\n    } else {\n      // Otherwise, recursively find combinations, given `k - 1`. Note that\n      // we request `k - 1`, so if you were looking for k=3 combinations, we're\n      // requesting k=2. This -1 gets reversed in the for loop right after this\n      // code, since we concatenate `x[i]` onto the selected combinations,\n      // bringing `k` back up to your requested level.\n      // This recursion may go many levels deep, since it only stops once\n      // k=1.\n      const subsetCombinations = combinationsReplacement(x.slice(i, x.length), k - 1);\n      for (let j = 0; j < subsetCombinations.length; j++) {\n        combinationList.push([x[i]].concat(subsetCombinations[j]));\n      }\n    }\n  }\n  return combinationList;\n}\nexport default combinationsReplacement;","map":{"version":3,"names":["combinationsReplacement","x","k","combinationList","i","length","push","subsetCombinations","slice","j","concat"],"sources":["C:/ProPython/Stock2/node_modules/simple-statistics/src/combinations_replacement.js"],"sourcesContent":["/**\n * Implementation of [Combinations](https://en.wikipedia.org/wiki/Combination) with replacement\n * Combinations are unique subsets of a collection - in this case, k x from a collection at a time.\n * 'With replacement' means that a given element can be chosen multiple times.\n * Unlike permutation, order doesn't matter for combinations.\n *\n * @param {Array} x any type of data\n * @param {int} k the number of objects in each group (without replacement)\n * @returns {Array<Array>} array of permutations\n * @example\n * combinationsReplacement([1, 2], 2); // => [[1, 1], [1, 2], [2, 2]]\n */\nfunction combinationsReplacement(x, k) {\n    const combinationList = [];\n\n    for (let i = 0; i < x.length; i++) {\n        if (k === 1) {\n            // If we're requested to find only one element, we don't need\n            // to recurse: just push `x[i]` onto the list of combinations.\n            combinationList.push([x[i]]);\n        } else {\n            // Otherwise, recursively find combinations, given `k - 1`. Note that\n            // we request `k - 1`, so if you were looking for k=3 combinations, we're\n            // requesting k=2. This -1 gets reversed in the for loop right after this\n            // code, since we concatenate `x[i]` onto the selected combinations,\n            // bringing `k` back up to your requested level.\n            // This recursion may go many levels deep, since it only stops once\n            // k=1.\n            const subsetCombinations = combinationsReplacement(\n                x.slice(i, x.length),\n                k - 1\n            );\n\n            for (let j = 0; j < subsetCombinations.length; j++) {\n                combinationList.push([x[i]].concat(subsetCombinations[j]));\n            }\n        }\n    }\n\n    return combinationList;\n}\n\nexport default combinationsReplacement;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,uBAAuBA,CAACC,CAAC,EAAEC,CAAC,EAAE;EACnC,MAAMC,eAAe,GAAG,EAAE;EAE1B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,CAAC,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;IAC/B,IAAIF,CAAC,KAAK,CAAC,EAAE;MACT;MACA;MACAC,eAAe,CAACG,IAAI,CAAC,CAACL,CAAC,CAACG,CAAC,CAAC,CAAC,CAAC;IAChC,CAAC,MAAM;MACH;MACA;MACA;MACA;MACA;MACA;MACA;MACA,MAAMG,kBAAkB,GAAGP,uBAAuB,CAC9CC,CAAC,CAACO,KAAK,CAACJ,CAAC,EAAEH,CAAC,CAACI,MAAM,CAAC,EACpBH,CAAC,GAAG,CACR,CAAC;MAED,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,kBAAkB,CAACF,MAAM,EAAEI,CAAC,EAAE,EAAE;QAChDN,eAAe,CAACG,IAAI,CAAC,CAACL,CAAC,CAACG,CAAC,CAAC,CAAC,CAACM,MAAM,CAACH,kBAAkB,CAACE,CAAC,CAAC,CAAC,CAAC;MAC9D;IACJ;EACJ;EAEA,OAAON,eAAe;AAC1B;AAEA,eAAeH,uBAAuB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}