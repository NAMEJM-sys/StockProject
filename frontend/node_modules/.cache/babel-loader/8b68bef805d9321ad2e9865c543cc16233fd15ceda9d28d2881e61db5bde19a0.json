{"ast":null,"code":"var _jsxFileName = \"C:\\\\ProPython\\\\Stock2\\\\frontend\\\\src\\\\ComponentsChart\\\\GaugeChartOfOscillators.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport SolidGauge from 'highcharts/modules/solid-gauge';\nimport MACDTotalCalculation from \"../ComponentsCalculations/MACDTotalCalculation\";\nimport CCITotalCalculation from \"../ComponentsCalculations/CCITotalCalculation\";\nimport RSITotalCalculation from \"../ComponentsCalculations/RSITotalCalculation\";\nimport MomentumTotalCalculation from \"../ComponentsCalculations/MomentumTotalCalculation\";\nimport StochasticTotalCalculation from \"../ComponentsCalculations/StochasticTotalCalculation\";\nimport MFITotalCalculation from \"../ComponentsCalculations/MFITotalCalculation\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nSolidGauge(Highcharts);\nfunction GaugeChartOfOscillators({\n  stockCode\n}) {\n  _s();\n  const [MACDscore, setMACDscore] = useState(null);\n  const [CCIScore, setCCIScore] = useState(null);\n  const [RSIScore, setRSIScore] = useState(null);\n  const [MFIScore, setMFIScore] = useState(null);\n  const [MomentumScore, setMomentumScore] = useState(null);\n  const [StochasticScore, setStochasticScore] = useState(null);\n  const [averageScore, setAverageScore] = useState(null);\n\n  // 가중치 설정\n  const weights = {\n    MACD: 3,\n    CCI: 2,\n    RSI: 2.5,\n    MFI: 2,\n    Momentum: 1.5,\n    Stochastic: 2\n  };\n  useEffect(() => {\n    // 모든 점수들이 null이 아닐 때 총점 계산\n    if (MACDscore !== null && CCIScore !== null && RSIScore !== null && MomentumScore !== null && MFIScore !== null && StochasticScore !== null) {\n      const totalScore = MACDscore * weights.MACD + CCIScore * weights.CCI + RSIScore * weights.RSI + MFIScore * weights.MFI + MomentumScore * weights.Momentum + StochasticScore * weights.Stochastic;\n      const totalWeight = weights.MACD + weights.CCI + weights.RSI + weights.MFI + weights.Momentum + weights.Stochastic;\n      setAverageScore((totalScore / totalWeight).toFixed(2));\n    }\n  }, [MACDscore, CCIScore, RSIScore, MFIScore, MomentumScore, StochasticScore]);\n  const chartOptions = {\n    chart: {\n      type: 'gauge',\n      plotBackgroundColor: null,\n      plotBackgroundImage: null,\n      plotBorderWidth: 0,\n      plotShadow: false,\n      height: 300\n    },\n    title: {\n      text: 'Oscillators Gauge'\n    },\n    pane: {\n      startAngle: -150,\n      endAngle: 150,\n      background: [{\n        backgroundColor: Highcharts.defaultOptions.legend.backgroundColor || '#EEE',\n        innerRadius: '100%',\n        outerRadius: '100%',\n        shape: 'arc'\n      }]\n    },\n    yAxis: {\n      min: 0,\n      max: 10,\n      minorTickInterval: 'auto',\n      minorTickWidth: 1,\n      minorTickLength: 10,\n      minorTickPosition: 'inside',\n      minorTickColor: '#666',\n      tickPixelInterval: 30,\n      tickWidth: 2,\n      tickPosition: 'inside',\n      tickLength: 10,\n      tickColor: '#666',\n      labels: {\n        step: 2,\n        rotation: 'auto'\n      },\n      plotBands: [{\n        from: 0,\n        to: 4,\n        color: '#55BF3B' // green\n      }, {\n        from: 4,\n        to: 7,\n        color: '#DDDF0D' // yellow\n      }, {\n        from: 7,\n        to: 10,\n        color: '#DF5353' // red\n      }]\n    },\n    series: [{\n      name: '',\n      data: [parseFloat(averageScore) || 0],\n      tooltip: {\n        valueSuffix: ' 점수'\n      },\n      dataLabels: {\n        format: '<div style=\"text-align:center\"><span style=\"font-size:20px\">{y}</span><br/>' + '<span style=\"font-size:12px;opacity:0.4\">점수</span></div>'\n      },\n      dial: {\n        radius: '80%'\n      }\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(MACDTotalCalculation, {\n      stockCode: stockCode,\n      onResultUpdate: result => setMACDscore(result.damm)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CCITotalCalculation, {\n      stockCode: stockCode,\n      onResultUpdate: result => setCCIScore(result.damm)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(RSITotalCalculation, {\n      stockCode: stockCode,\n      onResultUpdate: result => setRSIScore(result.damm)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MFITotalCalculation, {\n      stockCode: stockCode,\n      onResultUpdate: result => setMFIScore(result.damm)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MomentumTotalCalculation, {\n      stockCode: stockCode,\n      onResultUpdate: result => setMomentumScore(result.damm)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(StochasticTotalCalculation, {\n      stockCode: stockCode,\n      onResultUpdate: result => setStochasticScore(result.damm)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(HighchartsReact, {\n      highcharts: Highcharts,\n      options: chartOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 9\n  }, this);\n}\n_s(GaugeChartOfOscillators, \"YXLsJa/MvXICl36Jk9NN+W+WDcE=\");\n_c = GaugeChartOfOscillators;\nexport default GaugeChartOfOscillators;\nvar _c;\n$RefreshReg$(_c, \"GaugeChartOfOscillators\");","map":{"version":3,"names":["React","useState","useEffect","Highcharts","HighchartsReact","SolidGauge","MACDTotalCalculation","CCITotalCalculation","RSITotalCalculation","MomentumTotalCalculation","StochasticTotalCalculation","MFITotalCalculation","jsxDEV","_jsxDEV","GaugeChartOfOscillators","stockCode","_s","MACDscore","setMACDscore","CCIScore","setCCIScore","RSIScore","setRSIScore","MFIScore","setMFIScore","MomentumScore","setMomentumScore","StochasticScore","setStochasticScore","averageScore","setAverageScore","weights","MACD","CCI","RSI","MFI","Momentum","Stochastic","totalScore","totalWeight","toFixed","chartOptions","chart","type","plotBackgroundColor","plotBackgroundImage","plotBorderWidth","plotShadow","height","title","text","pane","startAngle","endAngle","background","backgroundColor","defaultOptions","legend","innerRadius","outerRadius","shape","yAxis","min","max","minorTickInterval","minorTickWidth","minorTickLength","minorTickPosition","minorTickColor","tickPixelInterval","tickWidth","tickPosition","tickLength","tickColor","labels","step","rotation","plotBands","from","to","color","series","name","data","parseFloat","tooltip","valueSuffix","dataLabels","format","dial","radius","children","onResultUpdate","result","damm","fileName","_jsxFileName","lineNumber","columnNumber","highcharts","options","_c","$RefreshReg$"],"sources":["C:/ProPython/Stock2/frontend/src/ComponentsChart/GaugeChartOfOscillators.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport SolidGauge from 'highcharts/modules/solid-gauge';\r\nimport MACDTotalCalculation from \"../ComponentsCalculations/MACDTotalCalculation\";\r\nimport CCITotalCalculation from \"../ComponentsCalculations/CCITotalCalculation\";\r\nimport RSITotalCalculation from \"../ComponentsCalculations/RSITotalCalculation\";\r\nimport MomentumTotalCalculation from \"../ComponentsCalculations/MomentumTotalCalculation\";\r\nimport StochasticTotalCalculation from \"../ComponentsCalculations/StochasticTotalCalculation\";\r\nimport MFITotalCalculation from \"../ComponentsCalculations/MFITotalCalculation\";\r\n\r\nSolidGauge(Highcharts);\r\n\r\nfunction GaugeChartOfOscillators ({ stockCode }) {\r\n    const [MACDscore, setMACDscore] = useState(null);\r\n    const [CCIScore, setCCIScore] = useState(null);\r\n    const [RSIScore, setRSIScore] = useState(null);\r\n    const [MFIScore, setMFIScore] = useState(null);\r\n    const [MomentumScore, setMomentumScore] = useState(null);\r\n    const [StochasticScore, setStochasticScore] = useState(null);\r\n    const [averageScore, setAverageScore] = useState(null);\r\n\r\n    // 가중치 설정\r\n    const weights = {\r\n        MACD: 3,\r\n        CCI: 2,\r\n        RSI: 2.5,\r\n        MFI: 2,\r\n        Momentum: 1.5,\r\n        Stochastic: 2\r\n    };\r\n\r\n    useEffect(() => {\r\n        // 모든 점수들이 null이 아닐 때 총점 계산\r\n        if(MACDscore !== null && CCIScore !== null && RSIScore !== null && MomentumScore !== null\r\n            && MFIScore !== null && StochasticScore !== null) {\r\n            const totalScore = (\r\n                (MACDscore * weights.MACD) +\r\n                (CCIScore * weights.CCI) +\r\n                (RSIScore * weights.RSI) +\r\n                (MFIScore * weights.MFI) +\r\n                (MomentumScore * weights.Momentum) +\r\n                (StochasticScore * weights.Stochastic)\r\n            );\r\n\r\n            const totalWeight = (\r\n                weights.MACD +\r\n                weights.CCI +\r\n                weights.RSI +\r\n                weights.MFI +\r\n                weights.Momentum +\r\n                weights.Stochastic\r\n            );\r\n\r\n            setAverageScore((totalScore / totalWeight).toFixed(2));\r\n        }\r\n    }, [MACDscore, CCIScore, RSIScore, MFIScore, MomentumScore, StochasticScore]);\r\n\r\n    const chartOptions = {\r\n        chart: {\r\n            type: 'gauge',\r\n            plotBackgroundColor: null,\r\n            plotBackgroundImage: null,\r\n            plotBorderWidth: 0,\r\n            plotShadow: false,\r\n            height: 300,\r\n        },\r\n        title: {\r\n            text: 'Oscillators Gauge'\r\n        },\r\n        pane: {\r\n            startAngle: -150,\r\n            endAngle: 150,\r\n            background: [{\r\n                backgroundColor: Highcharts.defaultOptions.legend.backgroundColor || '#EEE',\r\n                innerRadius: '100%',\r\n                outerRadius: '100%',\r\n                shape: 'arc'\r\n            }]\r\n        },\r\n        yAxis: {\r\n            min: 0,\r\n            max: 10,\r\n            minorTickInterval: 'auto',\r\n            minorTickWidth: 1,\r\n            minorTickLength: 10,\r\n            minorTickPosition: 'inside',\r\n            minorTickColor: '#666',\r\n            tickPixelInterval: 30,\r\n            tickWidth: 2,\r\n            tickPosition: 'inside',\r\n            tickLength: 10,\r\n            tickColor: '#666',\r\n            labels: {\r\n                step: 2,\r\n                rotation: 'auto'\r\n            },\r\n            plotBands: [{\r\n                from: 0,\r\n                to: 4,\r\n                color: '#55BF3B' // green\r\n            }, {\r\n                from: 4,\r\n                to: 7,\r\n                color: '#DDDF0D' // yellow\r\n            }, {\r\n                from: 7,\r\n                to: 10,\r\n                color: '#DF5353' // red\r\n            }]\r\n        },\r\n        series: [{\r\n            name: '',\r\n            data: [parseFloat(averageScore) || 0],\r\n            tooltip: {\r\n                valueSuffix: ' 점수'\r\n            },\r\n            dataLabels: {\r\n                format: '<div style=\"text-align:center\"><span style=\"font-size:20px\">{y}</span><br/>' +\r\n                    '<span style=\"font-size:12px;opacity:0.4\">점수</span></div>'\r\n            },\r\n            dial: {\r\n                radius: '80%'\r\n            }\r\n        }]\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {/* 각 점수 계산 */}\r\n            <MACDTotalCalculation stockCode={stockCode} onResultUpdate={(result) => setMACDscore(result.damm)} />\r\n            <CCITotalCalculation stockCode={stockCode} onResultUpdate={(result) => setCCIScore(result.damm)} />\r\n            <RSITotalCalculation stockCode={stockCode} onResultUpdate={(result) => setRSIScore(result.damm)} />\r\n            <MFITotalCalculation stockCode={stockCode} onResultUpdate={(result) => setMFIScore(result.damm)} />\r\n            <MomentumTotalCalculation stockCode={stockCode} onResultUpdate={(result) => setMomentumScore(result.damm)} />\r\n            <StochasticTotalCalculation stockCode={stockCode} onResultUpdate={(result) => setStochasticScore(result.damm)} />\r\n\r\n            {/* 하이차트 게이지 */}\r\n            <HighchartsReact\r\n                highcharts={Highcharts}\r\n                options={chartOptions}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GaugeChartOfOscillators;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}