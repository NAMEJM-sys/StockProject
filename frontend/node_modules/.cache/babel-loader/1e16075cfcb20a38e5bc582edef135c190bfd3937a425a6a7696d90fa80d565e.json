{"ast":null,"code":"var _jsxFileName = \"C:\\\\ProPython\\\\Stock2\\\\frontend\\\\src\\\\ComponentsAnalysis\\\\SARAnalysis4.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport FetchSARData from '../Fetch/FetchStockOrignal/FetchParabolicSARData';\nimport FetchStockDataForCode from '../Fetch/FetchStockOrignal/FetchStockDataForCode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SARAnalysis4({\n  stockCode\n}) {\n  _s();\n  const [sarData, setSARData] = useState([]);\n  const [stockData, setStockData] = useState([]);\n  const [analysisResult, setAnalysisResult] = useState('');\n  const analyzeCombinedIndicators = (sarData, stockData, period = 14) => {\n    if (sarData.length < period || stockData.length < period) {\n      return '데이터가 충분하지 않습니다.';\n    }\n    let result = '<strong>거짓 신호 필터링 및 종합 분석</strong><br/><br/>';\n\n    // 지수 이동 평균(EMA) 계산\n    const closingPrices = stockData.map(data => data.close);\n    const recentPrices = closingPrices.slice(-period);\n\n    // EMA 계산\n    const calculateEMA = (prices, period) => {\n      const k = 2 / (period + 1);\n      let emaArray = [];\n      let ema = prices[0];\n      emaArray.push(ema);\n      for (let i = 1; i < prices.length; i++) {\n        ema = prices[i] * k + ema * (1 - k);\n        emaArray.push(ema);\n      }\n      return emaArray;\n    };\n    const emaArray = calculateEMA(recentPrices, period);\n    const currentEMA = emaArray[emaArray.length - 1];\n\n    // 현재 가격과 EMA 비교\n    const currentPrice = closingPrices[closingPrices.length - 1];\n\n    // EMA의 추세 판단\n    const prevEMA = emaArray[emaArray.length - 2];\n    const prevPrice = closingPrices[closingPrices.length - 2];\n    let priceTrend = '';\n    if (currentPrice > currentEMA && prevPrice <= prevEMA) {\n      priceTrend = '상승 추세로 전환';\n      result += '최근 가격이 EMA를 상향 돌파하여 상승 추세로 전환되었습니다.<br/>';\n    } else if (currentPrice < currentEMA && prevPrice >= prevEMA) {\n      priceTrend = '하락 추세로 전환';\n      result += '최근 가격이 EMA를 하향 돌파하여 하락 추세로 전환되었습니다.<br/>';\n    } else if (currentPrice > currentEMA) {\n      priceTrend = '상승 추세';\n      result += '현재 가격이 EMA보다 위에 있어 상승 추세입니다.<br/>';\n    } else if (currentPrice < currentEMA) {\n      priceTrend = '하락 추세';\n      result += '현재 가격이 EMA보다 아래에 있어 하락 추세입니다.<br/>';\n    } else {\n      priceTrend = '추세 불명확';\n      result += '현재 가격이 EMA와 동일하여 추세 판단이 어렵습니다.<br/>';\n    }\n\n    // Parabolic SAR과의 결합 분석\n    const currentSAR = sarData[sarData.length - 1].Parabolic_SAR;\n    if (currentPrice > currentSAR && currentPrice > currentEMA) {\n      result += '→ Parabolic SAR과 EMA 모두 상승 추세를 지지하므로 신뢰도가 높습니다.<br/>';\n    } else if (currentPrice < currentSAR && currentPrice < currentEMA) {\n      result += '→ Parabolic SAR과 EMA 모두 하락 추세를 지지하므로 신뢰도가 높습니다.<br/>';\n    } else {\n      result += '→ Parabolic SAR과 EMA의 신호가 일치하지 않아 신중한 접근이 필요합니다.<br/>';\n    }\n    return result;\n  };\n  useEffect(() => {\n    if (sarData.length > 0 && stockData.length > 0) {\n      const result = analyzeCombinedIndicators(sarData, stockData);\n      setAnalysisResult(result);\n    }\n  }, [sarData, stockData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(FetchSARData, {\n      stockCode: stockCode,\n      onSARFetch: setSARData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FetchStockDataForCode, {\n      stockCode: stockCode,\n      onSDFCFetch: setStockData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Parabolic SAR \\uC885\\uD569 \\uBD84\\uC11D\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      dangerouslySetInnerHTML: {\n        __html: analysisResult\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n}\n_s(SARAnalysis4, \"u4NwfpsCs1/zrGIiiGfO2jJnI60=\");\n_c = SARAnalysis4;\nexport default SARAnalysis4;\nvar _c;\n$RefreshReg$(_c, \"SARAnalysis4\");","map":{"version":3,"names":["React","useState","useEffect","FetchSARData","FetchStockDataForCode","jsxDEV","_jsxDEV","SARAnalysis4","stockCode","_s","sarData","setSARData","stockData","setStockData","analysisResult","setAnalysisResult","analyzeCombinedIndicators","period","length","result","closingPrices","map","data","close","recentPrices","slice","calculateEMA","prices","k","emaArray","ema","push","i","currentEMA","currentPrice","prevEMA","prevPrice","priceTrend","currentSAR","Parabolic_SAR","children","onSARFetch","fileName","_jsxFileName","lineNumber","columnNumber","onSDFCFetch","dangerouslySetInnerHTML","__html","_c","$RefreshReg$"],"sources":["C:/ProPython/Stock2/frontend/src/ComponentsAnalysis/SARAnalysis4.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport FetchSARData from '../Fetch/FetchStockOrignal/FetchParabolicSARData';\r\nimport FetchStockDataForCode from '../Fetch/FetchStockOrignal/FetchStockDataForCode';\r\n\r\nfunction SARAnalysis4({ stockCode }) {\r\n    const [sarData, setSARData] = useState([]);\r\n    const [stockData, setStockData] = useState([]);\r\n    const [analysisResult, setAnalysisResult] = useState('');\r\n\r\n    const analyzeCombinedIndicators = (sarData, stockData, period = 14) => {\r\n        if (sarData.length < period || stockData.length < period) {\r\n            return '데이터가 충분하지 않습니다.';\r\n        }\r\n\r\n        let result = '<strong>거짓 신호 필터링 및 종합 분석</strong><br/><br/>';\r\n\r\n        // 지수 이동 평균(EMA) 계산\r\n        const closingPrices = stockData.map((data) => data.close);\r\n        const recentPrices = closingPrices.slice(-period);\r\n\r\n        // EMA 계산\r\n        const calculateEMA = (prices, period) => {\r\n            const k = 2 / (period + 1);\r\n            let emaArray = [];\r\n            let ema = prices[0];\r\n            emaArray.push(ema);\r\n            for (let i = 1; i < prices.length; i++) {\r\n                ema = prices[i] * k + ema * (1 - k);\r\n                emaArray.push(ema);\r\n            }\r\n            return emaArray;\r\n        };\r\n\r\n        const emaArray = calculateEMA(recentPrices, period);\r\n        const currentEMA = emaArray[emaArray.length - 1];\r\n\r\n        // 현재 가격과 EMA 비교\r\n        const currentPrice = closingPrices[closingPrices.length - 1];\r\n\r\n        // EMA의 추세 판단\r\n        const prevEMA = emaArray[emaArray.length - 2];\r\n        const prevPrice = closingPrices[closingPrices.length - 2];\r\n\r\n        let priceTrend = '';\r\n        if (currentPrice > currentEMA && prevPrice <= prevEMA) {\r\n            priceTrend = '상승 추세로 전환';\r\n            result += '최근 가격이 EMA를 상향 돌파하여 상승 추세로 전환되었습니다.<br/>';\r\n        } else if (currentPrice < currentEMA && prevPrice >= prevEMA) {\r\n            priceTrend = '하락 추세로 전환';\r\n            result += '최근 가격이 EMA를 하향 돌파하여 하락 추세로 전환되었습니다.<br/>';\r\n        } else if (currentPrice > currentEMA) {\r\n            priceTrend = '상승 추세';\r\n            result += '현재 가격이 EMA보다 위에 있어 상승 추세입니다.<br/>';\r\n        } else if (currentPrice < currentEMA) {\r\n            priceTrend = '하락 추세';\r\n            result += '현재 가격이 EMA보다 아래에 있어 하락 추세입니다.<br/>';\r\n        } else {\r\n            priceTrend = '추세 불명확';\r\n            result += '현재 가격이 EMA와 동일하여 추세 판단이 어렵습니다.<br/>';\r\n        }\r\n\r\n        // Parabolic SAR과의 결합 분석\r\n        const currentSAR = sarData[sarData.length - 1].Parabolic_SAR;\r\n\r\n        if (currentPrice > currentSAR && currentPrice > currentEMA) {\r\n            result += '→ Parabolic SAR과 EMA 모두 상승 추세를 지지하므로 신뢰도가 높습니다.<br/>';\r\n        } else if (currentPrice < currentSAR && currentPrice < currentEMA) {\r\n            result += '→ Parabolic SAR과 EMA 모두 하락 추세를 지지하므로 신뢰도가 높습니다.<br/>';\r\n        } else {\r\n            result += '→ Parabolic SAR과 EMA의 신호가 일치하지 않아 신중한 접근이 필요합니다.<br/>';\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (sarData.length > 0 && stockData.length > 0) {\r\n            const result = analyzeCombinedIndicators(sarData, stockData);\r\n            setAnalysisResult(result);\r\n        }\r\n    }, [sarData, stockData]);\r\n\r\n    return (\r\n        <div>\r\n            <FetchSARData stockCode={stockCode} onSARFetch={setSARData} />\r\n            <FetchStockDataForCode stockCode={stockCode} onSDFCFetch={setStockData} />\r\n            <h4>Parabolic SAR 종합 분석</h4>\r\n            <p dangerouslySetInnerHTML={{ __html: analysisResult }}></p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SARAnalysis4;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}