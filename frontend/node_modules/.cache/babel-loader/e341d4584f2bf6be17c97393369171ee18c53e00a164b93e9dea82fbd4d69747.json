{"ast":null,"code":"/**\n * [Simple linear regression](http://en.wikipedia.org/wiki/Simple_linear_regression)\n * is a simple way to find a fitted line\n * between a set of coordinates. This algorithm finds the slope and y-intercept of a regression line\n * using the least sum of squares.\n *\n * @param {Array<Array<number>>} data an array of two-element of arrays,\n * like `[[0, 1], [2, 3]]`\n * @returns {Object} object containing slope and intersect of regression line\n * @example\n * linearRegression([[0, 0], [1, 1]]); // => { m: 1, b: 0 }\n */\nfunction linearRegression(data) {\n  let m;\n  let b;\n\n  // Store data length in a local variable to reduce\n  // repeated object property lookups\n  const dataLength = data.length;\n\n  //if there's only one point, arbitrarily choose a slope of 0\n  //and a y-intercept of whatever the y of the initial point is\n  if (dataLength === 1) {\n    m = 0;\n    b = data[0][1];\n  } else {\n    // Initialize our sums and scope the `m` and `b`\n    // variables that define the line.\n    let sumX = 0;\n    let sumY = 0;\n    let sumXX = 0;\n    let sumXY = 0;\n\n    // Use local variables to grab point values\n    // with minimal object property lookups\n    let point;\n    let x;\n    let y;\n\n    // Gather the sum of all x values, the sum of all\n    // y values, and the sum of x^2 and (x*y) for each\n    // value.\n    //\n    // In math notation, these would be SS_x, SS_y, SS_xx, and SS_xy\n    for (let i = 0; i < dataLength; i++) {\n      point = data[i];\n      x = point[0];\n      y = point[1];\n      sumX += x;\n      sumY += y;\n      sumXX += x * x;\n      sumXY += x * y;\n    }\n\n    // `m` is the slope of the regression line\n    m = (dataLength * sumXY - sumX * sumY) / (dataLength * sumXX - sumX * sumX);\n\n    // `b` is the y-intercept of the line.\n    b = sumY / dataLength - m * sumX / dataLength;\n  }\n\n  // Return both values as an object.\n  return {\n    m: m,\n    b: b\n  };\n}\nexport default linearRegression;","map":{"version":3,"names":["linearRegression","data","m","b","dataLength","length","sumX","sumY","sumXX","sumXY","point","x","y","i"],"sources":["C:/ProPython/Stock2/node_modules/simple-statistics/src/linear_regression.js"],"sourcesContent":["/**\n * [Simple linear regression](http://en.wikipedia.org/wiki/Simple_linear_regression)\n * is a simple way to find a fitted line\n * between a set of coordinates. This algorithm finds the slope and y-intercept of a regression line\n * using the least sum of squares.\n *\n * @param {Array<Array<number>>} data an array of two-element of arrays,\n * like `[[0, 1], [2, 3]]`\n * @returns {Object} object containing slope and intersect of regression line\n * @example\n * linearRegression([[0, 0], [1, 1]]); // => { m: 1, b: 0 }\n */\nfunction linearRegression(data) {\n    let m;\n    let b;\n\n    // Store data length in a local variable to reduce\n    // repeated object property lookups\n    const dataLength = data.length;\n\n    //if there's only one point, arbitrarily choose a slope of 0\n    //and a y-intercept of whatever the y of the initial point is\n    if (dataLength === 1) {\n        m = 0;\n        b = data[0][1];\n    } else {\n        // Initialize our sums and scope the `m` and `b`\n        // variables that define the line.\n        let sumX = 0;\n        let sumY = 0;\n        let sumXX = 0;\n        let sumXY = 0;\n\n        // Use local variables to grab point values\n        // with minimal object property lookups\n        let point;\n        let x;\n        let y;\n\n        // Gather the sum of all x values, the sum of all\n        // y values, and the sum of x^2 and (x*y) for each\n        // value.\n        //\n        // In math notation, these would be SS_x, SS_y, SS_xx, and SS_xy\n        for (let i = 0; i < dataLength; i++) {\n            point = data[i];\n            x = point[0];\n            y = point[1];\n\n            sumX += x;\n            sumY += y;\n\n            sumXX += x * x;\n            sumXY += x * y;\n        }\n\n        // `m` is the slope of the regression line\n        m =\n            (dataLength * sumXY - sumX * sumY) /\n            (dataLength * sumXX - sumX * sumX);\n\n        // `b` is the y-intercept of the line.\n        b = sumY / dataLength - (m * sumX) / dataLength;\n    }\n\n    // Return both values as an object.\n    return {\n        m: m,\n        b: b\n    };\n}\n\nexport default linearRegression;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,gBAAgBA,CAACC,IAAI,EAAE;EAC5B,IAAIC,CAAC;EACL,IAAIC,CAAC;;EAEL;EACA;EACA,MAAMC,UAAU,GAAGH,IAAI,CAACI,MAAM;;EAE9B;EACA;EACA,IAAID,UAAU,KAAK,CAAC,EAAE;IAClBF,CAAC,GAAG,CAAC;IACLC,CAAC,GAAGF,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAClB,CAAC,MAAM;IACH;IACA;IACA,IAAIK,IAAI,GAAG,CAAC;IACZ,IAAIC,IAAI,GAAG,CAAC;IACZ,IAAIC,KAAK,GAAG,CAAC;IACb,IAAIC,KAAK,GAAG,CAAC;;IAEb;IACA;IACA,IAAIC,KAAK;IACT,IAAIC,CAAC;IACL,IAAIC,CAAC;;IAEL;IACA;IACA;IACA;IACA;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,UAAU,EAAES,CAAC,EAAE,EAAE;MACjCH,KAAK,GAAGT,IAAI,CAACY,CAAC,CAAC;MACfF,CAAC,GAAGD,KAAK,CAAC,CAAC,CAAC;MACZE,CAAC,GAAGF,KAAK,CAAC,CAAC,CAAC;MAEZJ,IAAI,IAAIK,CAAC;MACTJ,IAAI,IAAIK,CAAC;MAETJ,KAAK,IAAIG,CAAC,GAAGA,CAAC;MACdF,KAAK,IAAIE,CAAC,GAAGC,CAAC;IAClB;;IAEA;IACAV,CAAC,GACG,CAACE,UAAU,GAAGK,KAAK,GAAGH,IAAI,GAAGC,IAAI,KAChCH,UAAU,GAAGI,KAAK,GAAGF,IAAI,GAAGA,IAAI,CAAC;;IAEtC;IACAH,CAAC,GAAGI,IAAI,GAAGH,UAAU,GAAIF,CAAC,GAAGI,IAAI,GAAIF,UAAU;EACnD;;EAEA;EACA,OAAO;IACHF,CAAC,EAAEA,CAAC;IACJC,CAAC,EAAEA;EACP,CAAC;AACL;AAEA,eAAeH,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}