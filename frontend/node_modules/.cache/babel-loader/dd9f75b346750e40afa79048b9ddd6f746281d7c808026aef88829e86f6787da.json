{"ast":null,"code":"/* globals Map: false */\n\n/**\n * The [mode](https://en.wikipedia.org/wiki/Mode_%28statistics%29) is the number\n * that appears in a list the highest number of times.\n * There can be multiple modes in a list: in the event of a tie, this\n * algorithm will return the most recently seen mode.\n *\n * modeFast uses a Map object to keep track of the mode, instead of the approach\n * used with `mode`, a sorted array. As a result, it is faster\n * than `mode` and supports any data type that can be compared with `==`.\n * It also requires a\n * [JavaScript environment with support for Map](https://kangax.github.io/compat-table/es6/#test-Map),\n * and will throw an error if Map is not available.\n *\n * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n * a method of finding a typical or central value of a set of numbers.\n *\n * @param {Array<*>} x a sample of one or more data points\n * @returns {?*} mode\n * @throws {ReferenceError} if the JavaScript environment doesn't support Map\n * @throws {Error} if x is empty\n * @example\n * modeFast(['rabbits', 'rabbits', 'squirrels']); // => 'rabbits'\n */\nfunction modeFast(x) {\n  // This index will reflect the incidence of different values, indexing\n  // them like\n  // { value: count }\n  const index = new Map();\n\n  // A running `mode` and the number of times it has been encountered.\n  let mode;\n  let modeCount = 0;\n  for (let i = 0; i < x.length; i++) {\n    let newCount = index.get(x[i]);\n    if (newCount === undefined) {\n      newCount = 1;\n    } else {\n      newCount++;\n    }\n    if (newCount > modeCount) {\n      mode = x[i];\n      modeCount = newCount;\n    }\n    index.set(x[i], newCount);\n  }\n  if (modeCount === 0) {\n    throw new Error(\"mode requires at last one data point\");\n  }\n  return mode;\n}\nexport default modeFast;","map":{"version":3,"names":["modeFast","x","index","Map","mode","modeCount","i","length","newCount","get","undefined","set","Error"],"sources":["C:/ProPython/Stock2/node_modules/simple-statistics/src/mode_fast.js"],"sourcesContent":["/* globals Map: false */\n\n/**\n * The [mode](https://en.wikipedia.org/wiki/Mode_%28statistics%29) is the number\n * that appears in a list the highest number of times.\n * There can be multiple modes in a list: in the event of a tie, this\n * algorithm will return the most recently seen mode.\n *\n * modeFast uses a Map object to keep track of the mode, instead of the approach\n * used with `mode`, a sorted array. As a result, it is faster\n * than `mode` and supports any data type that can be compared with `==`.\n * It also requires a\n * [JavaScript environment with support for Map](https://kangax.github.io/compat-table/es6/#test-Map),\n * and will throw an error if Map is not available.\n *\n * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n * a method of finding a typical or central value of a set of numbers.\n *\n * @param {Array<*>} x a sample of one or more data points\n * @returns {?*} mode\n * @throws {ReferenceError} if the JavaScript environment doesn't support Map\n * @throws {Error} if x is empty\n * @example\n * modeFast(['rabbits', 'rabbits', 'squirrels']); // => 'rabbits'\n */\nfunction modeFast(x) {\n    // This index will reflect the incidence of different values, indexing\n    // them like\n    // { value: count }\n    const index = new Map();\n\n    // A running `mode` and the number of times it has been encountered.\n    let mode;\n    let modeCount = 0;\n\n    for (let i = 0; i < x.length; i++) {\n        let newCount = index.get(x[i]);\n        if (newCount === undefined) {\n            newCount = 1;\n        } else {\n            newCount++;\n        }\n        if (newCount > modeCount) {\n            mode = x[i];\n            modeCount = newCount;\n        }\n        index.set(x[i], newCount);\n    }\n\n    if (modeCount === 0) {\n        throw new Error(\"mode requires at last one data point\");\n    }\n\n    return mode;\n}\n\nexport default modeFast;\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,QAAQA,CAACC,CAAC,EAAE;EACjB;EACA;EACA;EACA,MAAMC,KAAK,GAAG,IAAIC,GAAG,CAAC,CAAC;;EAEvB;EACA,IAAIC,IAAI;EACR,IAAIC,SAAS,GAAG,CAAC;EAEjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,CAAC,CAACM,MAAM,EAAED,CAAC,EAAE,EAAE;IAC/B,IAAIE,QAAQ,GAAGN,KAAK,CAACO,GAAG,CAACR,CAAC,CAACK,CAAC,CAAC,CAAC;IAC9B,IAAIE,QAAQ,KAAKE,SAAS,EAAE;MACxBF,QAAQ,GAAG,CAAC;IAChB,CAAC,MAAM;MACHA,QAAQ,EAAE;IACd;IACA,IAAIA,QAAQ,GAAGH,SAAS,EAAE;MACtBD,IAAI,GAAGH,CAAC,CAACK,CAAC,CAAC;MACXD,SAAS,GAAGG,QAAQ;IACxB;IACAN,KAAK,CAACS,GAAG,CAACV,CAAC,CAACK,CAAC,CAAC,EAAEE,QAAQ,CAAC;EAC7B;EAEA,IAAIH,SAAS,KAAK,CAAC,EAAE;IACjB,MAAM,IAAIO,KAAK,CAAC,sCAAsC,CAAC;EAC3D;EAEA,OAAOR,IAAI;AACf;AAEA,eAAeJ,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}