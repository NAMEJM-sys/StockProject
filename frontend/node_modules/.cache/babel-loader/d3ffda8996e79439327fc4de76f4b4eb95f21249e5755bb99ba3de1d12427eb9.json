{"ast":null,"code":"var _jsxFileName = \"C:\\\\ProPython\\\\Stock2\\\\frontend\\\\src\\\\ComponentsCalculations\\\\KeltnerCalculations1.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport FetchKeltnerData from '../ComponentsFetch/FetchKeltnerData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction KeltnerCalculations1({\n  stockCode,\n  onScoreCalculated\n}) {\n  _s();\n  const [keltnerData, setKeltnerData] = useState([]);\n  const calculateChannelAngle = (keltnerData, period = 14) => {\n    if (keltnerData.length < period) {\n      return null;\n    }\n    const recentData = keltnerData.slice(-period);\n    const middleLineValues = recentData.map(data => data.Middle_Line);\n    const indices = [...Array(period).keys()];\n    const n = period;\n    const sumX = indices.reduce((a, b) => a + b, 0);\n    const sumY = middleLineValues.reduce((a, b) => a + b, 0);\n    const sumXY = indices.reduce((sum, x, i) => sum + x * middleLineValues[i], 0);\n    const sumX2 = indices.reduce((sum, x) => sum + x * x, 0);\n    const slope = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX);\n    const angle = Math.atan(slope) * (180 / Math.PI); // 기울기를 각도로 변환\n\n    return angle;\n  };\n  const calculateTrendWithSlopeScore = (keltnerData, period = 14) => {\n    const angle = calculateChannelAngle(keltnerData, period);\n    if (angle === null) {\n      return null;\n    }\n    let score = 5; // 기본 보통\n\n    // 1. 채널의 기울기에 따른 기본 점수 설정\n    if (angle > 5) {\n      score -= 2; // 매수\n    } else if (angle < -5) {\n      score += 2; // 매도\n    }\n    const currentData = keltnerData[keltnerData.length - 1];\n    const currentClose = currentData.close;\n    const upperBand = currentData.Upper_Band;\n    const lowerBand = currentData.Lower_Band;\n    const middleLine = currentData.Middle_Line;\n\n    // 2. 가격 위치에 따른 점수 조정\n    if (currentClose > upperBand) {\n      if (angle <= 5) {\n        score += 2; // 매도 신호 강화\n      }\n    } else if (currentClose < lowerBand) {\n      if (angle >= -5) {\n        score -= 1; // 매수 신호 강화\n      }\n    } else if (currentClose < middleLine) {\n      if (angle >= -5) {\n        score -= 2;\n      }\n    }\n\n    // 점수 범위 조정\n    score = Math.max(1, Math.min(10, score));\n    return {\n      score,\n      lowerBand,\n      middleLine,\n      upperBand\n    };\n  };\n  useEffect(() => {\n    if (keltnerData.length > 0) {\n      const result = calculateTrendWithSlopeScore(keltnerData);\n      if (result !== null && onScoreCalculated) {\n        onScoreCalculated(result);\n      }\n    }\n  }, [keltnerData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(FetchKeltnerData, {\n      stockCode: stockCode,\n      onKelFetch: setKeltnerData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n_s(KeltnerCalculations1, \"g7PppTuM9suzmMYZSV83dZfcwvc=\");\n_c = KeltnerCalculations1;\nexport default KeltnerCalculations1;\nvar _c;\n$RefreshReg$(_c, \"KeltnerCalculations1\");","map":{"version":3,"names":["React","useState","useEffect","FetchKeltnerData","jsxDEV","_jsxDEV","KeltnerCalculations1","stockCode","onScoreCalculated","_s","keltnerData","setKeltnerData","calculateChannelAngle","period","length","recentData","slice","middleLineValues","map","data","Middle_Line","indices","Array","keys","n","sumX","reduce","a","b","sumY","sumXY","sum","x","i","sumX2","slope","angle","Math","atan","PI","calculateTrendWithSlopeScore","score","currentData","currentClose","close","upperBand","Upper_Band","lowerBand","Lower_Band","middleLine","max","min","result","children","onKelFetch","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/ProPython/Stock2/frontend/src/ComponentsCalculations/KeltnerCalculations1.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport FetchKeltnerData from '../ComponentsFetch/FetchKeltnerData';\r\n\r\nfunction KeltnerCalculations1({ stockCode, onScoreCalculated }) {\r\n  const [keltnerData, setKeltnerData] = useState([]);\r\n\r\n  const calculateChannelAngle = (keltnerData, period = 14) => {\r\n    if (keltnerData.length < period) {\r\n      return null;\r\n    }\r\n\r\n    const recentData = keltnerData.slice(-period);\r\n    const middleLineValues = recentData.map(data => data.Middle_Line);\r\n\r\n    const indices = [...Array(period).keys()];\r\n    const n = period;\r\n    const sumX = indices.reduce((a, b) => a + b, 0);\r\n    const sumY = middleLineValues.reduce((a, b) => a + b, 0);\r\n    const sumXY = indices.reduce((sum, x, i) => sum + x * middleLineValues[i], 0);\r\n    const sumX2 = indices.reduce((sum, x) => sum + x * x, 0);\r\n\r\n    const slope = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX);\r\n    const angle = Math.atan(slope) * (180 / Math.PI); // 기울기를 각도로 변환\r\n\r\n    return angle;\r\n  };\r\n\r\n  const calculateTrendWithSlopeScore = (keltnerData, period = 14) => {\r\n    const angle = calculateChannelAngle(keltnerData, period);\r\n\r\n    if (angle === null) {\r\n      return null;\r\n    }\r\n\r\n    let score = 5; // 기본 보통\r\n\r\n    // 1. 채널의 기울기에 따른 기본 점수 설정\r\n    if (angle > 5) {\r\n      score -= 2; // 매수\r\n    } else if (angle < -5) {\r\n      score += 2; // 매도\r\n    }\r\n\r\n    const currentData = keltnerData[keltnerData.length - 1];\r\n    const currentClose = currentData.close;\r\n    const upperBand = currentData.Upper_Band;\r\n    const lowerBand = currentData.Lower_Band;\r\n    const middleLine = currentData.Middle_Line;\r\n\r\n    // 2. 가격 위치에 따른 점수 조정\r\n    if (currentClose > upperBand) {\r\n      if (angle <= 5) {\r\n        score += 2; // 매도 신호 강화\r\n      }\r\n    } else if (currentClose < lowerBand) {\r\n      if (angle >= -5) {\r\n        score -= 1; // 매수 신호 강화\r\n      }\r\n    } else if (currentClose < middleLine) {\r\n      if (angle >= -5) {\r\n        score -= 2;\r\n      }\r\n    }\r\n\r\n    // 점수 범위 조정\r\n    score = Math.max(1, Math.min(10, score));\r\n\r\n    return {score, lowerBand, middleLine, upperBand};\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (keltnerData.length > 0) {\r\n      const result = calculateTrendWithSlopeScore(keltnerData);\r\n      if (result !== null && onScoreCalculated) {\r\n        onScoreCalculated(result);\r\n      }\r\n    }\r\n  }, [keltnerData]);\r\n\r\n  return (\r\n    <div>\r\n      <FetchKeltnerData stockCode={stockCode} onKelFetch={setKeltnerData} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default KeltnerCalculations1;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}