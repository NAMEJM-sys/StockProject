{"ast":null,"code":"var _jsxFileName = \"C:\\\\ProPython\\\\Stock2\\\\frontend\\\\src\\\\ComponentsChart\\\\ChartOfClose.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport HighchartsMore from \"highcharts/highcharts-more\";\nimport HighchartsStock from \"highcharts/modules/stock\";\nimport FetchRealTimeDataForCloseChart from \"../ComponentsFetch/FetchStockOrignal/FetchRealTimeDataForCloseChart\";\n\n// 모듈 활성화\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nHighchartsMore(Highcharts);\nHighchartsStock(Highcharts);\nfunction ChartOfClose({\n  stockCode\n}) {\n  _s();\n  const [stockData, setStockData] = useState([]);\n  const [options, setOptions] = useState({});\n  const [chartType, setChartType] = useState('line');\n  useEffect(() => {\n    // 차트 데이터를 설정하는 함수\n    const updateChartOptions = data => {\n      const highValues = data.map(item => item.high);\n      const lowValues = data.map(item => item.low);\n      const maxHigh = Math.max(...highValues);\n      const minLow = Math.min(...lowValues);\n      const formattedClosePriceData = data.map(item => ({\n        x: new Date(item.date).getTime(),\n        open: item.open,\n        high: item.high,\n        low: item.low,\n        close: item.close\n      }));\n      const formattedVolumeData = data.map(item => ({\n        x: new Date(item.date).getTime(),\n        y: item.volume\n      }));\n      setOptions({\n        chart: {\n          type: chartType,\n          zoomType: null,\n          spacing: [10, 0, 10, 10],\n          width: 1200,\n          height: 250\n        },\n        xAxis: {\n          type: 'datetime',\n          labels: {\n            format: '{value:%m-%d}'\n          }\n        },\n        yAxis: [{\n          title: {\n            text: 'Close Price'\n          },\n          height: '70%',\n          lineWidth: 2,\n          opposite: true,\n          min: minLow,\n          max: maxHigh,\n          tickAmount: 4\n        }, {\n          title: {\n            text: 'Volume'\n          },\n          top: '72%',\n          height: '25%',\n          offset: 0,\n          lineWidth: 2,\n          labels: {\n            enabled: false\n          },\n          opposite: true\n        }],\n        series: [{\n          name: 'Close Price',\n          type: chartType === 'line' ? 'line' : 'candlestick',\n          data: chartType === 'line' ? formattedClosePriceData.map(item => [item.x, item.close]) : formattedClosePriceData.map(item => [item.x, item.open, item.high, item.low, item.close])\n        }, {\n          name: 'Volume',\n          type: 'column',\n          data: formattedVolumeData,\n          yAxis: 1,\n          color: '#A9A9A9',\n          pointWidth: 2\n        }],\n        tooltip: {\n          shared: true,\n          crosshairs: true,\n          formatter: function () {\n            let tooltipHtml = `<b>${Highcharts.dateFormat('%m. %d', this.x)}</b><br/>`;\n            this.points.forEach(point => {\n              tooltipHtml += `${point.series.name}: <b>${point.y.toFixed(2)}</b><br/>`;\n            });\n            return tooltipHtml;\n          }\n        },\n        scrollbar: {\n          enabled: false\n        }\n      });\n    };\n\n    // 차트 데이터 주기적 업데이트 함수\n    const fetchChartData = () => {\n      FetchRealTimeDataForCloseChart(stockCode, setStockData);\n    };\n\n    // 5초마다 데이터 업데이트\n    const intervalId = setInterval(fetchChartData, 5000);\n\n    // 실시간 데이터를 받아와서 차트 옵션을 설정\n    if (stockData.length > 0 && stockCode) {\n      updateChartOptions(stockData);\n    }\n\n    // 컴포넌트가 언마운트될 때 interval 해제\n    return () => clearInterval(intervalId);\n  }, [stockData, stockCode, chartType]);\n  if (!stockCode) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chart-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(HighchartsReact, {\n        highcharts: Highcharts,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"custom-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `custom-button-line ${chartType === 'line' ? 'active' : ''}`,\n        onClick: () => setChartType('line'),\n        children: \"Line\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `custom-button-candle ${chartType === 'candlestick' ? 'active' : ''}`,\n        onClick: () => setChartType('candlestick'),\n        children: \"Candle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 9\n  }, this);\n}\n_s(ChartOfClose, \"L28K1TqSH4s+HwNzI4o5SiGad78=\");\n_c = ChartOfClose;\nexport default ChartOfClose;\nvar _c;\n$RefreshReg$(_c, \"ChartOfClose\");","map":{"version":3,"names":["React","useState","useEffect","Highcharts","HighchartsReact","HighchartsMore","HighchartsStock","FetchRealTimeDataForCloseChart","jsxDEV","_jsxDEV","ChartOfClose","stockCode","_s","stockData","setStockData","options","setOptions","chartType","setChartType","updateChartOptions","data","highValues","map","item","high","lowValues","low","maxHigh","Math","max","minLow","min","formattedClosePriceData","x","Date","date","getTime","open","close","formattedVolumeData","y","volume","chart","type","zoomType","spacing","width","height","xAxis","labels","format","yAxis","title","text","lineWidth","opposite","tickAmount","top","offset","enabled","series","name","color","pointWidth","tooltip","shared","crosshairs","formatter","tooltipHtml","dateFormat","points","forEach","point","toFixed","scrollbar","fetchChartData","intervalId","setInterval","length","clearInterval","className","children","highcharts","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/ProPython/Stock2/frontend/src/ComponentsChart/ChartOfClose.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport HighchartsMore from \"highcharts/highcharts-more\";\r\nimport HighchartsStock from \"highcharts/modules/stock\";\r\nimport FetchRealTimeDataForCloseChart from \"../ComponentsFetch/FetchStockOrignal/FetchRealTimeDataForCloseChart\";\r\n\r\n// 모듈 활성화\r\nHighchartsMore(Highcharts);\r\nHighchartsStock(Highcharts);\r\n\r\nfunction ChartOfClose({ stockCode }) {\r\n    const [stockData, setStockData] = useState([]);\r\n    const [options, setOptions] = useState({});\r\n    const [chartType, setChartType] = useState('line');\r\n\r\n    useEffect(() => {\r\n        // 차트 데이터를 설정하는 함수\r\n        const updateChartOptions = (data) => {\r\n            const highValues = data.map(item => item.high);\r\n            const lowValues = data.map(item => item.low);\r\n            const maxHigh = Math.max(...highValues);\r\n            const minLow = Math.min(...lowValues);\r\n\r\n            const formattedClosePriceData = data.map(item => ({\r\n                x: new Date(item.date).getTime(),\r\n                open: item.open,\r\n                high: item.high,\r\n                low: item.low,\r\n                close: item.close,\r\n            }));\r\n\r\n            const formattedVolumeData = data.map(item => ({\r\n                x: new Date(item.date).getTime(),\r\n                y: item.volume,\r\n            }));\r\n\r\n            setOptions({\r\n                chart: {\r\n                    type: chartType,\r\n                    zoomType: null,\r\n                    spacing: [10, 0, 10, 10],\r\n                    width: 1200,\r\n                    height: 250,\r\n                },\r\n                xAxis: {\r\n                    type: 'datetime',\r\n                    labels: {\r\n                        format: '{value:%m-%d}',\r\n                    },\r\n                },\r\n                yAxis: [\r\n                    {\r\n                        title: { text: 'Close Price' },\r\n                        height: '70%',\r\n                        lineWidth: 2,\r\n                        opposite: true,\r\n                        min: minLow,\r\n                        max: maxHigh,\r\n                        tickAmount: 4,\r\n                    },\r\n                    {\r\n                        title: { text: 'Volume' },\r\n                        top: '72%',\r\n                        height: '25%',\r\n                        offset: 0,\r\n                        lineWidth: 2,\r\n                        labels: { enabled: false },\r\n                        opposite: true,\r\n                    },\r\n                ],\r\n                series: [\r\n                    {\r\n                        name: 'Close Price',\r\n                        type: chartType === 'line' ? 'line' : 'candlestick',\r\n                        data: chartType === 'line'\r\n                            ? formattedClosePriceData.map(item => [item.x, item.close])\r\n                            : formattedClosePriceData.map(item => [item.x, item.open, item.high, item.low, item.close]),\r\n                    },\r\n                    {\r\n                        name: 'Volume',\r\n                        type: 'column',\r\n                        data: formattedVolumeData,\r\n                        yAxis: 1,\r\n                        color: '#A9A9A9',\r\n                        pointWidth: 2,\r\n                    },\r\n                ],\r\n                tooltip: {\r\n                    shared: true,\r\n                    crosshairs: true,\r\n                    formatter: function () {\r\n                        let tooltipHtml = `<b>${Highcharts.dateFormat('%m. %d', this.x)}</b><br/>`;\r\n                        this.points.forEach(point => {\r\n                            tooltipHtml += `${point.series.name}: <b>${point.y.toFixed(2)}</b><br/>`;\r\n                        });\r\n                        return tooltipHtml;\r\n                    },\r\n                },\r\n                scrollbar: { enabled: false },\r\n            });\r\n        };\r\n\r\n        // 차트 데이터 주기적 업데이트 함수\r\n        const fetchChartData = () => {\r\n            FetchRealTimeDataForCloseChart(stockCode, setStockData);\r\n        };\r\n\r\n        // 5초마다 데이터 업데이트\r\n        const intervalId = setInterval(fetchChartData, 5000);\r\n\r\n        // 실시간 데이터를 받아와서 차트 옵션을 설정\r\n        if (stockData.length > 0 && stockCode) {\r\n            updateChartOptions(stockData);\r\n        }\r\n\r\n        // 컴포넌트가 언마운트될 때 interval 해제\r\n        return () => clearInterval(intervalId);\r\n\r\n    }, [stockData, stockCode, chartType]);\r\n\r\n    if (!stockCode) return null;\r\n\r\n    return (\r\n        <div className=\"chart-container\">\r\n            <div>\r\n                <HighchartsReact highcharts={Highcharts} options={options}/>\r\n            </div>\r\n\r\n            <div className=\"custom-buttons\">\r\n                <button\r\n                    className={`custom-button-line ${chartType === 'line' ? 'active' : ''}`}\r\n                    onClick={() => setChartType('line')}\r\n                >\r\n                    Line\r\n                </button>\r\n                <button\r\n                    className={`custom-button-candle ${chartType === 'candlestick' ? 'active' : ''}`}\r\n                    onClick={() => setChartType('candlestick')}\r\n                >\r\n                    Candle\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChartOfClose;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,UAAU,MAAM,YAAY;AACnC,OAAOC,eAAe,MAAM,2BAA2B;AACvD,OAAOC,cAAc,MAAM,4BAA4B;AACvD,OAAOC,eAAe,MAAM,0BAA0B;AACtD,OAAOC,8BAA8B,MAAM,qEAAqE;;AAEhH;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACAJ,cAAc,CAACF,UAAU,CAAC;AAC1BG,eAAe,CAACH,UAAU,CAAC;AAE3B,SAASO,YAAYA,CAAC;EAAEC;AAAU,CAAC,EAAE;EAAAC,EAAA;EACjC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC1C,MAAM,CAACgB,SAAS,EAAEC,YAAY,CAAC,GAAGjB,QAAQ,CAAC,MAAM,CAAC;EAElDC,SAAS,CAAC,MAAM;IACZ;IACA,MAAMiB,kBAAkB,GAAIC,IAAI,IAAK;MACjC,MAAMC,UAAU,GAAGD,IAAI,CAACE,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,IAAI,CAAC;MAC9C,MAAMC,SAAS,GAAGL,IAAI,CAACE,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACG,GAAG,CAAC;MAC5C,MAAMC,OAAO,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAGR,UAAU,CAAC;MACvC,MAAMS,MAAM,GAAGF,IAAI,CAACG,GAAG,CAAC,GAAGN,SAAS,CAAC;MAErC,MAAMO,uBAAuB,GAAGZ,IAAI,CAACE,GAAG,CAACC,IAAI,KAAK;QAC9CU,CAAC,EAAE,IAAIC,IAAI,CAACX,IAAI,CAACY,IAAI,CAAC,CAACC,OAAO,CAAC,CAAC;QAChCC,IAAI,EAAEd,IAAI,CAACc,IAAI;QACfb,IAAI,EAAED,IAAI,CAACC,IAAI;QACfE,GAAG,EAAEH,IAAI,CAACG,GAAG;QACbY,KAAK,EAAEf,IAAI,CAACe;MAChB,CAAC,CAAC,CAAC;MAEH,MAAMC,mBAAmB,GAAGnB,IAAI,CAACE,GAAG,CAACC,IAAI,KAAK;QAC1CU,CAAC,EAAE,IAAIC,IAAI,CAACX,IAAI,CAACY,IAAI,CAAC,CAACC,OAAO,CAAC,CAAC;QAChCI,CAAC,EAAEjB,IAAI,CAACkB;MACZ,CAAC,CAAC,CAAC;MAEHzB,UAAU,CAAC;QACP0B,KAAK,EAAE;UACHC,IAAI,EAAE1B,SAAS;UACf2B,QAAQ,EAAE,IAAI;UACdC,OAAO,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC;UACxBC,KAAK,EAAE,IAAI;UACXC,MAAM,EAAE;QACZ,CAAC;QACDC,KAAK,EAAE;UACHL,IAAI,EAAE,UAAU;UAChBM,MAAM,EAAE;YACJC,MAAM,EAAE;UACZ;QACJ,CAAC;QACDC,KAAK,EAAE,CACH;UACIC,KAAK,EAAE;YAAEC,IAAI,EAAE;UAAc,CAAC;UAC9BN,MAAM,EAAE,KAAK;UACbO,SAAS,EAAE,CAAC;UACZC,QAAQ,EAAE,IAAI;UACdxB,GAAG,EAAED,MAAM;UACXD,GAAG,EAAEF,OAAO;UACZ6B,UAAU,EAAE;QAChB,CAAC,EACD;UACIJ,KAAK,EAAE;YAAEC,IAAI,EAAE;UAAS,CAAC;UACzBI,GAAG,EAAE,KAAK;UACVV,MAAM,EAAE,KAAK;UACbW,MAAM,EAAE,CAAC;UACTJ,SAAS,EAAE,CAAC;UACZL,MAAM,EAAE;YAAEU,OAAO,EAAE;UAAM,CAAC;UAC1BJ,QAAQ,EAAE;QACd,CAAC,CACJ;QACDK,MAAM,EAAE,CACJ;UACIC,IAAI,EAAE,aAAa;UACnBlB,IAAI,EAAE1B,SAAS,KAAK,MAAM,GAAG,MAAM,GAAG,aAAa;UACnDG,IAAI,EAAEH,SAAS,KAAK,MAAM,GACpBe,uBAAuB,CAACV,GAAG,CAACC,IAAI,IAAI,CAACA,IAAI,CAACU,CAAC,EAAEV,IAAI,CAACe,KAAK,CAAC,CAAC,GACzDN,uBAAuB,CAACV,GAAG,CAACC,IAAI,IAAI,CAACA,IAAI,CAACU,CAAC,EAAEV,IAAI,CAACc,IAAI,EAAEd,IAAI,CAACC,IAAI,EAAED,IAAI,CAACG,GAAG,EAAEH,IAAI,CAACe,KAAK,CAAC;QAClG,CAAC,EACD;UACIuB,IAAI,EAAE,QAAQ;UACdlB,IAAI,EAAE,QAAQ;UACdvB,IAAI,EAAEmB,mBAAmB;UACzBY,KAAK,EAAE,CAAC;UACRW,KAAK,EAAE,SAAS;UAChBC,UAAU,EAAE;QAChB,CAAC,CACJ;QACDC,OAAO,EAAE;UACLC,MAAM,EAAE,IAAI;UACZC,UAAU,EAAE,IAAI;UAChBC,SAAS,EAAE,SAAAA,CAAA,EAAY;YACnB,IAAIC,WAAW,GAAG,MAAMjE,UAAU,CAACkE,UAAU,CAAC,QAAQ,EAAE,IAAI,CAACpC,CAAC,CAAC,WAAW;YAC1E,IAAI,CAACqC,MAAM,CAACC,OAAO,CAACC,KAAK,IAAI;cACzBJ,WAAW,IAAI,GAAGI,KAAK,CAACZ,MAAM,CAACC,IAAI,QAAQW,KAAK,CAAChC,CAAC,CAACiC,OAAO,CAAC,CAAC,CAAC,WAAW;YAC5E,CAAC,CAAC;YACF,OAAOL,WAAW;UACtB;QACJ,CAAC;QACDM,SAAS,EAAE;UAAEf,OAAO,EAAE;QAAM;MAChC,CAAC,CAAC;IACN,CAAC;;IAED;IACA,MAAMgB,cAAc,GAAGA,CAAA,KAAM;MACzBpE,8BAA8B,CAACI,SAAS,EAAEG,YAAY,CAAC;IAC3D,CAAC;;IAED;IACA,MAAM8D,UAAU,GAAGC,WAAW,CAACF,cAAc,EAAE,IAAI,CAAC;;IAEpD;IACA,IAAI9D,SAAS,CAACiE,MAAM,GAAG,CAAC,IAAInE,SAAS,EAAE;MACnCQ,kBAAkB,CAACN,SAAS,CAAC;IACjC;;IAEA;IACA,OAAO,MAAMkE,aAAa,CAACH,UAAU,CAAC;EAE1C,CAAC,EAAE,CAAC/D,SAAS,EAAEF,SAAS,EAAEM,SAAS,CAAC,CAAC;EAErC,IAAI,CAACN,SAAS,EAAE,OAAO,IAAI;EAE3B,oBACIF,OAAA;IAAKuE,SAAS,EAAC,iBAAiB;IAAAC,QAAA,gBAC5BxE,OAAA;MAAAwE,QAAA,eACIxE,OAAA,CAACL,eAAe;QAAC8E,UAAU,EAAE/E,UAAW;QAACY,OAAO,EAAEA;MAAQ;QAAAoE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3D,CAAC,eAEN7E,OAAA;MAAKuE,SAAS,EAAC,gBAAgB;MAAAC,QAAA,gBAC3BxE,OAAA;QACIuE,SAAS,EAAE,sBAAsB/D,SAAS,KAAK,MAAM,GAAG,QAAQ,GAAG,EAAE,EAAG;QACxEsE,OAAO,EAAEA,CAAA,KAAMrE,YAAY,CAAC,MAAM,CAAE;QAAA+D,QAAA,EACvC;MAED;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACT7E,OAAA;QACIuE,SAAS,EAAE,wBAAwB/D,SAAS,KAAK,aAAa,GAAG,QAAQ,GAAG,EAAE,EAAG;QACjFsE,OAAO,EAAEA,CAAA,KAAMrE,YAAY,CAAC,aAAa,CAAE;QAAA+D,QAAA,EAC9C;MAED;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAAC1E,EAAA,CAtIQF,YAAY;AAAA8E,EAAA,GAAZ9E,YAAY;AAwIrB,eAAeA,YAAY;AAAC,IAAA8E,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}