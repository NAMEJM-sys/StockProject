{"ast":null,"code":"var _jsxFileName = \"C:\\\\ProPython\\\\Stock2\\\\frontend\\\\src\\\\components\\\\ChartOfSAR.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport FetchStockDataForCode from \"./FetchStockDataForCode\";\nimport FetchParabolicSARData from \"./FetchParabolicSARData\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChartOfSAR({\n  stockCode\n}) {\n  _s();\n  const [stockData, setStockData] = useState([]);\n  const [stockSAR, setStockSAR] = useState([]);\n  const [options, setOptions] = useState({});\n  useEffect(() => {\n    if (stockData.length > 0 && stockSAR.length > 0 && stockCode) {\n      const dataForChart = stockData.map(item => ({\n        date: new Date(item.date).toLocaleDateString('ko-KR', {\n          month: '2-digit',\n          day: '2-digit'\n        }),\n        close: item.close\n      })).sort((a, b) => new Date(a.date) - new Date(b.date));\n\n      // Parabolic SAR 데이터를 종가 데이터와 매칭하여 동일한 날짜에 표시\n      const sarForChart = stockSAR.map(item => ({\n        date: new Date(item.date).toLocaleDateString('ko-KR', {\n          month: '2-digit',\n          day: '2-digit'\n        }),\n        sar: item.Parabolic_SAR\n      })).sort((a, b) => new Date(a.date) - new Date(b.date));\n\n      // Set chart options\n      setOptions({\n        chart: {\n          type: 'line',\n          height: 330,\n          zoomType: 'x',\n          // Enable zooming with the x-axis (drag to zoom)\n          resetZoomButton: {\n            position: {\n              align: 'right',\n              // Reset zoom button alignment\n              verticalAlign: 'top',\n              // Reset zoom button vertical alignment\n              x: -10,\n              y: 10\n            }\n          }\n        },\n        title: {\n          text: `${stockCode} 종가 및 Parabolic SAR 차트`\n        },\n        xAxis: {\n          categories: dataForChart.map(item => item.date),\n          labels: {\n            formatter: function () {\n              return this.value;\n            }\n          }\n        },\n        yAxis: {\n          title: {\n            text: '가격'\n          }\n        },\n        series: [{\n          name: 'Close Price',\n          data: dataForChart.map(item => item.close),\n          marker: {\n            enabled: false // Disable data point markers for close price\n          },\n          color: '#0071e3',\n          lineWidth: 1\n        }, {\n          name: 'Parabolic SAR',\n          type: 'scatter',\n          // Scatter plot for SAR\n          data: sarForChart.map(item => item.sar),\n          marker: {\n            symbol: 'plus',\n            radius: 1 // 점 크기 설정\n          },\n          color: '#4B4B4B',\n          // 점 색상 설정 (Parabolic SAR 색상)\n          tooltip: {\n            pointFormat: 'Parabolic SAR: <b>{point.y}</b>'\n          }\n        }],\n        legend: {\n          enabled: true // Show legend to distinguish between Close Price and Parabolic SAR\n        },\n        credits: {\n          enabled: false // Disable the \"Highcharts.com\" text\n        },\n        tooltip: {\n          shared: true,\n          crosshairs: true\n        }\n      });\n    }\n  }, [stockData, stockSAR, stockCode]);\n  if (!stockCode) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(FetchStockDataForCode, {\n      stockCode: stockCode,\n      onSDFCFetch: setStockData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FetchParabolicSARData, {\n      stockCode: stockCode,\n      onSARFetch: setStockSAR\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(HighchartsReact, {\n      highcharts: Highcharts,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 9\n  }, this);\n}\n_s(ChartOfSAR, \"Q+zRPFcFkEUyC1POj+FLusW+zy0=\");\n_c = ChartOfSAR;\nexport default ChartOfSAR;\nvar _c;\n$RefreshReg$(_c, \"ChartOfSAR\");","map":{"version":3,"names":["React","useState","useEffect","Highcharts","HighchartsReact","FetchStockDataForCode","FetchParabolicSARData","jsxDEV","_jsxDEV","ChartOfSAR","stockCode","_s","stockData","setStockData","stockSAR","setStockSAR","options","setOptions","length","dataForChart","map","item","date","Date","toLocaleDateString","month","day","close","sort","a","b","sarForChart","sar","Parabolic_SAR","chart","type","height","zoomType","resetZoomButton","position","align","verticalAlign","x","y","title","text","xAxis","categories","labels","formatter","value","yAxis","series","name","data","marker","enabled","color","lineWidth","symbol","radius","tooltip","pointFormat","legend","credits","shared","crosshairs","children","onSDFCFetch","fileName","_jsxFileName","lineNumber","columnNumber","onSARFetch","highcharts","_c","$RefreshReg$"],"sources":["C:/ProPython/Stock2/frontend/src/components/ChartOfSAR.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport FetchStockDataForCode from \"./FetchStockDataForCode\";\r\nimport FetchParabolicSARData from \"./FetchParabolicSARData\";\r\n\r\nfunction ChartOfSAR({ stockCode }) {\r\n    const [stockData, setStockData] = useState([]);\r\n    const [stockSAR, setStockSAR] = useState([]);\r\n    const [options, setOptions] = useState({});\r\n\r\n    useEffect(() => {\r\n        if (stockData.length > 0 && stockSAR.length > 0 && stockCode) {\r\n            const dataForChart = stockData\r\n                .map(item => ({\r\n                    date: new Date(item.date).toLocaleDateString('ko-KR', { month: '2-digit', day: '2-digit' }),\r\n                    close: item.close,\r\n                }))\r\n                .sort((a, b) => new Date(a.date) - new Date(b.date));\r\n\r\n            // Parabolic SAR 데이터를 종가 데이터와 매칭하여 동일한 날짜에 표시\r\n            const sarForChart = stockSAR\r\n                .map(item => ({\r\n                    date: new Date(item.date).toLocaleDateString('ko-KR', { month: '2-digit', day: '2-digit' }),\r\n                    sar: item.Parabolic_SAR,\r\n                }))\r\n                .sort((a, b) => new Date(a.date) - new Date(b.date));\r\n\r\n            // Set chart options\r\n            setOptions({\r\n                chart: {\r\n                    type: 'line',\r\n                    height: 330,\r\n                    zoomType: 'x', // Enable zooming with the x-axis (drag to zoom)\r\n                    resetZoomButton: {\r\n                        position: {\r\n                            align: 'right', // Reset zoom button alignment\r\n                            verticalAlign: 'top', // Reset zoom button vertical alignment\r\n                            x: -10,\r\n                            y: 10\r\n                        }\r\n                    }\r\n                },\r\n                title: {\r\n                    text: `${stockCode} 종가 및 Parabolic SAR 차트`,\r\n                },\r\n                xAxis: {\r\n                    categories: dataForChart.map(item => item.date),\r\n                    labels: {\r\n                        formatter: function () {\r\n                            return this.value;\r\n                        },\r\n                    },\r\n                },\r\n                yAxis: {\r\n                    title: {\r\n                        text: '가격',\r\n                    },\r\n                },\r\n                series: [\r\n                    {\r\n                        name: 'Close Price',\r\n                        data: dataForChart.map(item => item.close),\r\n                        marker: {\r\n                            enabled: false, // Disable data point markers for close price\r\n                        },\r\n                        color: '#0071e3',\r\n                        lineWidth: 1,\r\n                    },\r\n                    {\r\n                        name: 'Parabolic SAR',\r\n                        type: 'scatter', // Scatter plot for SAR\r\n                        data: sarForChart.map(item => item.sar),\r\n                        marker: {\r\n                            symbol: 'plus',\r\n                            radius: 1, // 점 크기 설정\r\n                        },\r\n                        color: '#4B4B4B', // 점 색상 설정 (Parabolic SAR 색상)\r\n                        tooltip: {\r\n                            pointFormat: 'Parabolic SAR: <b>{point.y}</b>',\r\n                        },\r\n                    },\r\n                ],\r\n                legend: {\r\n                    enabled: true, // Show legend to distinguish between Close Price and Parabolic SAR\r\n                },\r\n                credits: {\r\n                    enabled: false, // Disable the \"Highcharts.com\" text\r\n                },\r\n                tooltip: {\r\n                    shared: true,\r\n                    crosshairs: true,\r\n                },\r\n            });\r\n        }\r\n    }, [stockData, stockSAR, stockCode]);\r\n\r\n    if (!stockCode) return null;\r\n\r\n    return (\r\n        <div>\r\n            <FetchStockDataForCode stockCode={stockCode} onSDFCFetch={setStockData} />\r\n            <FetchParabolicSARData stockCode={stockCode} onSARFetch={setStockSAR} />\r\n            <HighchartsReact highcharts={Highcharts} options={options} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChartOfSAR;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}