{"ast":null,"code":"import sampleCorrelation from \"./sample_correlation.js\";\n\n/**\n * The [rank correlation](https://en.wikipedia.org/wiki/Rank_correlation) is\n * a measure of the strength of monotonic relationship between two arrays\n *\n * @param {Array<number>} x first input\n * @param {Array<number>} y second input\n * @returns {number} sample rank correlation\n */\nfunction sampleRankCorrelation(x, y) {\n  const xIndexes = x.map((value, index) => [value, index]).sort((a, b) => a[0] - b[0]).map(pair => pair[1]);\n  const yIndexes = y.map((value, index) => [value, index]).sort((a, b) => a[0] - b[0]).map(pair => pair[1]);\n\n  // At this step, we have an array of indexes\n  // that map from sorted numbers to their original indexes. We reverse\n  // that so that it is an array of the sorted destination index.\n  const xRanks = Array(xIndexes.length);\n  const yRanks = Array(xIndexes.length);\n  for (let i = 0; i < xIndexes.length; i++) {\n    xRanks[xIndexes[i]] = i;\n    yRanks[yIndexes[i]] = i;\n  }\n  return sampleCorrelation(xRanks, yRanks);\n}\nexport default sampleRankCorrelation;","map":{"version":3,"names":["sampleCorrelation","sampleRankCorrelation","x","y","xIndexes","map","value","index","sort","a","b","pair","yIndexes","xRanks","Array","length","yRanks","i"],"sources":["C:/ProPython/Stock2/node_modules/simple-statistics/src/sample_rank_correlation.js"],"sourcesContent":["import sampleCorrelation from \"./sample_correlation.js\";\n\n/**\n * The [rank correlation](https://en.wikipedia.org/wiki/Rank_correlation) is\n * a measure of the strength of monotonic relationship between two arrays\n *\n * @param {Array<number>} x first input\n * @param {Array<number>} y second input\n * @returns {number} sample rank correlation\n */\nfunction sampleRankCorrelation(x, y) {\n    const xIndexes = x\n        .map((value, index) => [value, index])\n        .sort((a, b) => a[0] - b[0])\n        .map((pair) => pair[1]);\n    const yIndexes = y\n        .map((value, index) => [value, index])\n        .sort((a, b) => a[0] - b[0])\n        .map((pair) => pair[1]);\n\n    // At this step, we have an array of indexes\n    // that map from sorted numbers to their original indexes. We reverse\n    // that so that it is an array of the sorted destination index.\n    const xRanks = Array(xIndexes.length);\n    const yRanks = Array(xIndexes.length);\n    for (let i = 0; i < xIndexes.length; i++) {\n        xRanks[xIndexes[i]] = i;\n        yRanks[yIndexes[i]] = i;\n    }\n\n    return sampleCorrelation(xRanks, yRanks);\n}\n\nexport default sampleRankCorrelation;\n"],"mappings":"AAAA,OAAOA,iBAAiB,MAAM,yBAAyB;;AAEvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,qBAAqBA,CAACC,CAAC,EAAEC,CAAC,EAAE;EACjC,MAAMC,QAAQ,GAAGF,CAAC,CACbG,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK,CAACD,KAAK,EAAEC,KAAK,CAAC,CAAC,CACrCC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAC3BL,GAAG,CAAEM,IAAI,IAAKA,IAAI,CAAC,CAAC,CAAC,CAAC;EAC3B,MAAMC,QAAQ,GAAGT,CAAC,CACbE,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK,CAACD,KAAK,EAAEC,KAAK,CAAC,CAAC,CACrCC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAC3BL,GAAG,CAAEM,IAAI,IAAKA,IAAI,CAAC,CAAC,CAAC,CAAC;;EAE3B;EACA;EACA;EACA,MAAME,MAAM,GAAGC,KAAK,CAACV,QAAQ,CAACW,MAAM,CAAC;EACrC,MAAMC,MAAM,GAAGF,KAAK,CAACV,QAAQ,CAACW,MAAM,CAAC;EACrC,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,QAAQ,CAACW,MAAM,EAAEE,CAAC,EAAE,EAAE;IACtCJ,MAAM,CAACT,QAAQ,CAACa,CAAC,CAAC,CAAC,GAAGA,CAAC;IACvBD,MAAM,CAACJ,QAAQ,CAACK,CAAC,CAAC,CAAC,GAAGA,CAAC;EAC3B;EAEA,OAAOjB,iBAAiB,CAACa,MAAM,EAAEG,MAAM,CAAC;AAC5C;AAEA,eAAef,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}