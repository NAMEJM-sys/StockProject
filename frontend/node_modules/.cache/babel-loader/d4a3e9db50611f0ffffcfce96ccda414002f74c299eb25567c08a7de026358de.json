{"ast":null,"code":"var _jsxFileName = \"C:\\\\ProPython\\\\Stock2\\\\frontend\\\\src\\\\components\\\\ChartOfKeltner.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport FetchStockDataForCode from \"./FetchStockDataForCode\";\nimport FetchKeltnerData from \"./FetchKeltnerData\"; // Keltner 데이터 가져오는 함수\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChartOfKeltner({\n  stockCode\n}) {\n  _s();\n  const [stockData, setStockData] = useState([]);\n  const [keltnerData, setKeltnerData] = useState([]);\n  const [options, setOptions] = useState({});\n  useEffect(() => {\n    console.log(\"Fetching data...\");\n    if (stockData.length > 0 && keltnerData.length > 0 && stockCode) {\n      console.log(\"Stock Data:\", stockData);\n      console.log(\"Keltner Data:\", keltnerData);\n      const dataForChart = stockData.map(item => ({\n        date: new Date(item.date).getTime(),\n        // 타임스탬프로 변환\n        close: item.close\n      })).sort((a, b) => new Date(a.date) - new Date(b.date));\n      const keltnerForChart = keltnerData.map(item => ({\n        date: new Date(item.date).getTime(),\n        // 타임스탬프로 변환\n        upper: item.Upper_Band,\n        lower: item.Lower_Band,\n        middle: item.Middle_Line\n      })).sort((a, b) => new Date(a.date) - new Date(b.date));\n      setOptions({\n        chart: {\n          type: 'line',\n          height: 400\n        },\n        title: {\n          text: 'Keltner Channel with Close Price'\n        },\n        xAxis: {\n          type: 'datetime',\n          // x축을 날짜 기반으로 설정\n          labels: {\n            format: '{value:%Y-%m-%d}' // 날짜 형식\n          }\n        },\n        yAxis: {\n          title: {\n            text: 'Price'\n          }\n        },\n        series: [{\n          name: 'Close Price',\n          data: dataForChart.map(item => [item.date, item.close]),\n          marker: {\n            enabled: false // Close price에 마커 비활성화\n          },\n          color: '#0071e3',\n          lineWidth: 1\n        }, {\n          name: 'Upper Band',\n          data: keltnerForChart.map(item => [item.date, item.upper]),\n          marker: {\n            enabled: false\n          },\n          color: '#FF5733',\n          // 상단 밴드 색상\n          dashStyle: 'ShortDash',\n          lineWidth: 1\n        }, {\n          name: 'Middle Line',\n          data: keltnerForChart.map(item => [item.date, item.middle]),\n          marker: {\n            enabled: false\n          },\n          color: '#8DFF33',\n          // 중앙선 색상\n          lineWidth: 1\n        }, {\n          name: 'Lower Band',\n          data: keltnerForChart.map(item => [item.date, item.lower]),\n          marker: {\n            enabled: false\n          },\n          color: '#33FFBD',\n          // 하단 밴드 색상\n          dashStyle: 'ShortDash',\n          lineWidth: 1\n        }],\n        legend: {\n          enabled: true // Keltner Channel과 Close Price 구분을 위한 범례 활성화\n        },\n        credits: {\n          enabled: false // \"Highcharts.com\" 텍스트 비활성화\n        },\n        tooltip: {\n          shared: true,\n          crosshairs: true\n        },\n        navigator: {\n          enabled: true // 확대/축소 가능한 스크롤바 활성화\n        },\n        scrollbar: {\n          enabled: true // 하단 스크롤바 활성화\n        }\n      });\n    }\n  }, [stockData, keltnerData, stockCode]);\n  if (!stockCode) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(FetchStockDataForCode, {\n      stockCode: stockCode,\n      onSDFCFetch: setStockData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FetchKeltnerData, {\n      stockCode: stockCode,\n      onKeltnerFetch: setKeltnerData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(HighchartsReact, {\n      highcharts: Highcharts,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 9\n  }, this);\n}\n_s(ChartOfKeltner, \"Tj9XUwDQKT6rYQPxXvvE3/nUN3o=\");\n_c = ChartOfKeltner;\nexport default ChartOfKeltner;\nvar _c;\n$RefreshReg$(_c, \"ChartOfKeltner\");","map":{"version":3,"names":["React","useState","useEffect","Highcharts","HighchartsReact","FetchStockDataForCode","FetchKeltnerData","jsxDEV","_jsxDEV","ChartOfKeltner","stockCode","_s","stockData","setStockData","keltnerData","setKeltnerData","options","setOptions","console","log","length","dataForChart","map","item","date","Date","getTime","close","sort","a","b","keltnerForChart","upper","Upper_Band","lower","Lower_Band","middle","Middle_Line","chart","type","height","title","text","xAxis","labels","format","yAxis","series","name","data","marker","enabled","color","lineWidth","dashStyle","legend","credits","tooltip","shared","crosshairs","navigator","scrollbar","children","onSDFCFetch","fileName","_jsxFileName","lineNumber","columnNumber","onKeltnerFetch","highcharts","_c","$RefreshReg$"],"sources":["C:/ProPython/Stock2/frontend/src/components/ChartOfKeltner.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport FetchStockDataForCode from \"./FetchStockDataForCode\";\r\nimport FetchKeltnerData from \"./FetchKeltnerData\";  // Keltner 데이터 가져오는 함수\r\n\r\nfunction ChartOfKeltner({ stockCode }) {\r\n    const [stockData, setStockData] = useState([]);\r\n    const [keltnerData, setKeltnerData] = useState([]);\r\n    const [options, setOptions] = useState({});\r\n\r\n    useEffect(() => {\r\n        console.log(\"Fetching data...\");\r\n        if (stockData.length > 0 && keltnerData.length > 0 && stockCode) {\r\n            console.log(\"Stock Data:\", stockData);\r\n            console.log(\"Keltner Data:\", keltnerData);\r\n            const dataForChart = stockData\r\n                .map(item => ({\r\n                    date: new Date(item.date).getTime(), // 타임스탬프로 변환\r\n                    close: item.close,\r\n                }))\r\n                .sort((a, b) => new Date(a.date) - new Date(b.date));\r\n\r\n            const keltnerForChart = keltnerData\r\n                .map(item => ({\r\n                    date: new Date(item.date).getTime(), // 타임스탬프로 변환\r\n                    upper: item.Upper_Band,\r\n                    lower: item.Lower_Band,\r\n                    middle: item.Middle_Line,\r\n                }))\r\n                .sort((a, b) => new Date(a.date) - new Date(b.date));\r\n\r\n            setOptions({\r\n                chart: {\r\n                    type: 'line',\r\n                    height: 400,\r\n                },\r\n                title: {\r\n                    text: 'Keltner Channel with Close Price',\r\n                },\r\n                xAxis: {\r\n                    type: 'datetime', // x축을 날짜 기반으로 설정\r\n                    labels: {\r\n                        format: '{value:%Y-%m-%d}', // 날짜 형식\r\n                    },\r\n                },\r\n                yAxis: {\r\n                    title: {\r\n                        text: 'Price',\r\n                    },\r\n                },\r\n                series: [\r\n                    {\r\n                        name: 'Close Price',\r\n                        data: dataForChart.map(item => [item.date, item.close]),\r\n                        marker: {\r\n                            enabled: false, // Close price에 마커 비활성화\r\n                        },\r\n                        color: '#0071e3',\r\n                        lineWidth: 1,\r\n                    },\r\n                    {\r\n                        name: 'Upper Band',\r\n                        data: keltnerForChart.map(item => [item.date, item.upper]),\r\n                        marker: {\r\n                            enabled: false,\r\n                        },\r\n                        color: '#FF5733', // 상단 밴드 색상\r\n                        dashStyle: 'ShortDash',\r\n                        lineWidth: 1,\r\n                    },\r\n                    {\r\n                        name: 'Middle Line',\r\n                        data: keltnerForChart.map(item => [item.date, item.middle]),\r\n                        marker: {\r\n                            enabled: false,\r\n                        },\r\n                        color: '#8DFF33', // 중앙선 색상\r\n                        lineWidth: 1,\r\n                    },\r\n                    {\r\n                        name: 'Lower Band',\r\n                        data: keltnerForChart.map(item => [item.date, item.lower]),\r\n                        marker: {\r\n                            enabled: false,\r\n                        },\r\n                        color: '#33FFBD', // 하단 밴드 색상\r\n                        dashStyle: 'ShortDash',\r\n                        lineWidth: 1,\r\n                    },\r\n                ],\r\n                legend: {\r\n                    enabled: true, // Keltner Channel과 Close Price 구분을 위한 범례 활성화\r\n                },\r\n                credits: {\r\n                    enabled: false, // \"Highcharts.com\" 텍스트 비활성화\r\n                },\r\n                tooltip: {\r\n                    shared: true,\r\n                    crosshairs: true,\r\n                },\r\n                navigator: {\r\n                    enabled: true, // 확대/축소 가능한 스크롤바 활성화\r\n                },\r\n                scrollbar: {\r\n                    enabled: true, // 하단 스크롤바 활성화\r\n                },\r\n            });\r\n        }\r\n    }, [stockData, keltnerData, stockCode]);\r\n\r\n    if (!stockCode) return null;\r\n\r\n    return (\r\n        <div>\r\n            <FetchStockDataForCode stockCode={stockCode} onSDFCFetch={setStockData} />\r\n            <FetchKeltnerData stockCode={stockCode} onKeltnerFetch={setKeltnerData} />\r\n            <HighchartsReact highcharts={Highcharts} options={options} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChartOfKeltner;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}