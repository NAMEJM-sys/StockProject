{"ast":null,"code":"var _jsxFileName = \"C:\\\\ProPython\\\\Stock2\\\\frontend\\\\src\\\\ComponentsCalculations\\\\ADXCalculations4.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport FetchADXData from '../ComponentsFetch/FetchADXData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ADXCalculations4({\n  stockCode,\n  onScoreCalculated\n}) {\n  _s();\n  const [adxData, setADXData] = useState([]);\n\n  // 지수 이동 평균(EMA) 계산 함수\n  const calculateEMA = (values, period) => {\n    const k = 2 / (period + 1);\n    let ema = [];\n    values.forEach((value, index) => {\n      if (index === 0) {\n        ema.push(value);\n      } else {\n        ema.push(value * k + ema[index - 1] * (1 - k));\n      }\n    });\n    return ema;\n  };\n  const calculateCombinedADXScore = (adxData, period = 14) => {\n    if (adxData.length < period) {\n      return null;\n    }\n    const recentData = adxData.slice(-period);\n    const adxValues = recentData.map(data => data.ADX);\n    const diPlusValues = recentData.map(data => data.DI14Plus);\n    const diMinusValues = recentData.map(data => data.DI14Minus);\n\n    // ADX의 EMA 계산\n    const adxEMAArray = calculateEMA(adxValues, period);\n    const avgADX = adxEMAArray[adxEMAArray.length - 1];\n\n    // DI+와 DI-의 EMA 계산\n    const diPlusEMAArray = calculateEMA(diPlusValues, period);\n    const avgDIPlus = diPlusEMAArray[diPlusEMAArray.length - 1];\n    const diMinusEMAArray = calculateEMA(diMinusValues, period);\n    const avgDIMinus = diMinusEMAArray[diMinusEMAArray.length - 1];\n    let score = 5; // 기본 보통\n\n    if (avgADX >= 25) {\n      if (avgDIPlus > avgDIMinus) {\n        score = 3; // 강한 상승 추세 (매수)\n      } else if (avgDIPlus < avgDIMinus) {\n        score = 7; // 강한 하락 추세 (매도)\n      }\n    }\n    return score;\n  };\n  useEffect(() => {\n    if (adxData.length > 0) {\n      const score = calculateCombinedADXScore(adxData);\n      if (score !== null && onScoreCalculated) {\n        onScoreCalculated(score);\n      }\n    }\n  }, [adxData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(FetchADXData, {\n      stockCode: stockCode,\n      onADXFetch: setADXData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n}\n_s(ADXCalculations4, \"r4FE7Ywn0QsXNQ9IphxNtY/DUFI=\");\n_c = ADXCalculations4;\nexport default ADXCalculations4;\nvar _c;\n$RefreshReg$(_c, \"ADXCalculations4\");","map":{"version":3,"names":["React","useState","useEffect","FetchADXData","jsxDEV","_jsxDEV","ADXCalculations4","stockCode","onScoreCalculated","_s","adxData","setADXData","calculateEMA","values","period","k","ema","forEach","value","index","push","calculateCombinedADXScore","length","recentData","slice","adxValues","map","data","ADX","diPlusValues","DI14Plus","diMinusValues","DI14Minus","adxEMAArray","avgADX","diPlusEMAArray","avgDIPlus","diMinusEMAArray","avgDIMinus","score","children","onADXFetch","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/ProPython/Stock2/frontend/src/ComponentsCalculations/ADXCalculations4.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport FetchADXData from '../ComponentsFetch/FetchADXData';\r\n\r\nfunction ADXCalculations4({ stockCode, onScoreCalculated }) {\r\n    const [adxData, setADXData] = useState([]);\r\n\r\n    // 지수 이동 평균(EMA) 계산 함수\r\n    const calculateEMA = (values, period) => {\r\n        const k = 2 / (period + 1);\r\n        let ema = [];\r\n        values.forEach((value, index) => {\r\n            if (index === 0) {\r\n                ema.push(value);\r\n            } else {\r\n                ema.push(value * k + ema[index - 1] * (1 - k));\r\n            }\r\n        });\r\n        return ema;\r\n    };\r\n\r\n    const calculateCombinedADXScore = (adxData, period = 14) => {\r\n        if (adxData.length < period) {\r\n            return null;\r\n        }\r\n\r\n        const recentData = adxData.slice(-period);\r\n        const adxValues = recentData.map(data => data.ADX);\r\n        const diPlusValues = recentData.map(data => data.DI14Plus);\r\n        const diMinusValues = recentData.map(data => data.DI14Minus);\r\n\r\n        // ADX의 EMA 계산\r\n        const adxEMAArray = calculateEMA(adxValues, period);\r\n        const avgADX = adxEMAArray[adxEMAArray.length - 1];\r\n\r\n        // DI+와 DI-의 EMA 계산\r\n        const diPlusEMAArray = calculateEMA(diPlusValues, period);\r\n        const avgDIPlus = diPlusEMAArray[diPlusEMAArray.length - 1];\r\n        const diMinusEMAArray = calculateEMA(diMinusValues, period);\r\n        const avgDIMinus = diMinusEMAArray[diMinusEMAArray.length - 1];\r\n\r\n        let score = 5; // 기본 보통\r\n\r\n        if (avgADX >= 25) {\r\n            if (avgDIPlus > avgDIMinus) {\r\n                score = 3; // 강한 상승 추세 (매수)\r\n            } else if (avgDIPlus < avgDIMinus) {\r\n                score = 7; // 강한 하락 추세 (매도)\r\n            }\r\n        }\r\n\r\n        return score;\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (adxData.length > 0) {\r\n            const score = calculateCombinedADXScore(adxData);\r\n            if (score !== null && onScoreCalculated) {\r\n                onScoreCalculated(score);\r\n            }\r\n        }\r\n    }, [adxData]);\r\n\r\n    return (\r\n        <div>\r\n            <FetchADXData stockCode={stockCode} onADXFetch={setADXData} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ADXCalculations4;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}