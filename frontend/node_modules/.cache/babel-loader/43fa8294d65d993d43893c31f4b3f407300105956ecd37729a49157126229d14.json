{"ast":null,"code":"/*\n * Compute Matrices for Jenks\n *\n * Compute the matrices required for Jenks breaks. These matrices\n * can be used for any classing of data with `classes <= nClasses`\n *\n * @private\n */\nfunction jenksMatrices(data, nClasses) {\n  // in the original implementation, these matrices are referred to\n  // as `LC` and `OP`\n  //\n  // * lowerClassLimits (LC): optimal lower class limits\n  // * varianceCombinations (OP): optimal variance combinations for all classes\n  const lowerClassLimits = [];\n  const varianceCombinations = [];\n  // loop counters\n  let i;\n  let j;\n  // the variance, as computed at each step in the calculation\n  let variance = 0;\n\n  // Initialize and fill each matrix with zeroes\n  for (i = 0; i < data.length + 1; i++) {\n    const tmp1 = [];\n    const tmp2 = [];\n    // despite these arrays having the same values, we need\n    // to keep them separate so that changing one does not change\n    // the other\n    for (j = 0; j < nClasses + 1; j++) {\n      tmp1.push(0);\n      tmp2.push(0);\n    }\n    lowerClassLimits.push(tmp1);\n    varianceCombinations.push(tmp2);\n  }\n  for (i = 1; i < nClasses + 1; i++) {\n    lowerClassLimits[1][i] = 1;\n    varianceCombinations[1][i] = 0;\n    // in the original implementation, 9999999 is used but\n    // since Javascript has `Infinity`, we use that.\n    for (j = 2; j < data.length + 1; j++) {\n      varianceCombinations[j][i] = Number.POSITIVE_INFINITY;\n    }\n  }\n  for (let l = 2; l < data.length + 1; l++) {\n    // `SZ` originally. this is the sum of the values seen thus\n    // far when calculating variance.\n    let sum = 0;\n    // `ZSQ` originally. the sum of squares of values seen\n    // thus far\n    let sumSquares = 0;\n    // `WT` originally. This is the number of\n    let w = 0;\n    // `IV` originally\n    let i4 = 0;\n\n    // in several instances, you could say `Math.pow(x, 2)`\n    // instead of `x * x`, but this is slower in some browsers\n    // introduces an unnecessary concept.\n    for (let m = 1; m < l + 1; m++) {\n      // `III` originally\n      const lowerClassLimit = l - m + 1;\n      const val = data[lowerClassLimit - 1];\n\n      // here we're estimating variance for each potential classing\n      // of the data, for each potential number of classes. `w`\n      // is the number of data points considered so far.\n      w++;\n\n      // increase the current sum and sum-of-squares\n      sum += val;\n      sumSquares += val * val;\n\n      // the variance at this point in the sequence is the difference\n      // between the sum of squares and the total x 2, over the number\n      // of samples.\n      variance = sumSquares - sum * sum / w;\n      i4 = lowerClassLimit - 1;\n      if (i4 !== 0) {\n        for (j = 2; j < nClasses + 1; j++) {\n          // if adding this element to an existing class\n          // will increase its variance beyond the limit, break\n          // the class at this point, setting the `lowerClassLimit`\n          // at this point.\n          if (varianceCombinations[l][j] >= variance + varianceCombinations[i4][j - 1]) {\n            lowerClassLimits[l][j] = lowerClassLimit;\n            varianceCombinations[l][j] = variance + varianceCombinations[i4][j - 1];\n          }\n        }\n      }\n    }\n    lowerClassLimits[l][1] = 1;\n    varianceCombinations[l][1] = variance;\n  }\n\n  // return the two matrices. for just providing breaks, only\n  // `lowerClassLimits` is needed, but variances can be useful to\n  // evaluate goodness of fit.\n  return {\n    lowerClassLimits: lowerClassLimits,\n    varianceCombinations: varianceCombinations\n  };\n}\nexport default jenksMatrices;","map":{"version":3,"names":["jenksMatrices","data","nClasses","lowerClassLimits","varianceCombinations","i","j","variance","length","tmp1","tmp2","push","Number","POSITIVE_INFINITY","l","sum","sumSquares","w","i4","m","lowerClassLimit","val"],"sources":["C:/ProPython/Stock2/node_modules/simple-statistics/src/jenks_matrices.js"],"sourcesContent":["/*\n * Compute Matrices for Jenks\n *\n * Compute the matrices required for Jenks breaks. These matrices\n * can be used for any classing of data with `classes <= nClasses`\n *\n * @private\n */\nfunction jenksMatrices(data, nClasses) {\n    // in the original implementation, these matrices are referred to\n    // as `LC` and `OP`\n    //\n    // * lowerClassLimits (LC): optimal lower class limits\n    // * varianceCombinations (OP): optimal variance combinations for all classes\n    const lowerClassLimits = [];\n    const varianceCombinations = [];\n    // loop counters\n    let i;\n    let j;\n    // the variance, as computed at each step in the calculation\n    let variance = 0;\n\n    // Initialize and fill each matrix with zeroes\n    for (i = 0; i < data.length + 1; i++) {\n        const tmp1 = [];\n        const tmp2 = [];\n        // despite these arrays having the same values, we need\n        // to keep them separate so that changing one does not change\n        // the other\n        for (j = 0; j < nClasses + 1; j++) {\n            tmp1.push(0);\n            tmp2.push(0);\n        }\n        lowerClassLimits.push(tmp1);\n        varianceCombinations.push(tmp2);\n    }\n\n    for (i = 1; i < nClasses + 1; i++) {\n        lowerClassLimits[1][i] = 1;\n        varianceCombinations[1][i] = 0;\n        // in the original implementation, 9999999 is used but\n        // since Javascript has `Infinity`, we use that.\n        for (j = 2; j < data.length + 1; j++) {\n            varianceCombinations[j][i] = Number.POSITIVE_INFINITY;\n        }\n    }\n\n    for (let l = 2; l < data.length + 1; l++) {\n        // `SZ` originally. this is the sum of the values seen thus\n        // far when calculating variance.\n        let sum = 0;\n        // `ZSQ` originally. the sum of squares of values seen\n        // thus far\n        let sumSquares = 0;\n        // `WT` originally. This is the number of\n        let w = 0;\n        // `IV` originally\n        let i4 = 0;\n\n        // in several instances, you could say `Math.pow(x, 2)`\n        // instead of `x * x`, but this is slower in some browsers\n        // introduces an unnecessary concept.\n        for (let m = 1; m < l + 1; m++) {\n            // `III` originally\n            const lowerClassLimit = l - m + 1;\n            const val = data[lowerClassLimit - 1];\n\n            // here we're estimating variance for each potential classing\n            // of the data, for each potential number of classes. `w`\n            // is the number of data points considered so far.\n            w++;\n\n            // increase the current sum and sum-of-squares\n            sum += val;\n            sumSquares += val * val;\n\n            // the variance at this point in the sequence is the difference\n            // between the sum of squares and the total x 2, over the number\n            // of samples.\n            variance = sumSquares - (sum * sum) / w;\n\n            i4 = lowerClassLimit - 1;\n\n            if (i4 !== 0) {\n                for (j = 2; j < nClasses + 1; j++) {\n                    // if adding this element to an existing class\n                    // will increase its variance beyond the limit, break\n                    // the class at this point, setting the `lowerClassLimit`\n                    // at this point.\n                    if (\n                        varianceCombinations[l][j] >=\n                        variance + varianceCombinations[i4][j - 1]\n                    ) {\n                        lowerClassLimits[l][j] = lowerClassLimit;\n                        varianceCombinations[l][j] =\n                            variance + varianceCombinations[i4][j - 1];\n                    }\n                }\n            }\n        }\n\n        lowerClassLimits[l][1] = 1;\n        varianceCombinations[l][1] = variance;\n    }\n\n    // return the two matrices. for just providing breaks, only\n    // `lowerClassLimits` is needed, but variances can be useful to\n    // evaluate goodness of fit.\n    return {\n        lowerClassLimits: lowerClassLimits,\n        varianceCombinations: varianceCombinations\n    };\n}\n\nexport default jenksMatrices;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}