{"ast":null,"code":"var _jsxFileName = \"C:\\\\ProPython\\\\Stock2\\\\frontend\\\\src\\\\AnalysisComponents\\\\RSIAnalysis2.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction RSIAnalysis2({\n  stockCode,\n  stockData,\n  rsiData\n}) {\n  _s();\n  const [bullishDivergence, setBullishDivergence] = useState([]);\n  const [bearishDivergence, setBearishDivergence] = useState([]);\n  const calculateBullishDivergence = (stockCode, stockData, rsiData) => {\n    // 1. stockCode에 해당하는 데이터 필터링\n    const filteredStockData = stockData.filter(data => data.stock_code === stockCode);\n    const filteredRsiData = rsiData.filter(data => data.stock_code === stockCode);\n\n    // 2. 날짜순으로 정렬\n    const sortedStockData = [...filteredStockData].sort((a, b) => new Date(a.date) - new Date(b.date));\n    const sortedRsiData = [...filteredRsiData].sort((a, b) => new Date(a.date) - new Date(b.date));\n    let lastLow = null;\n    let previousLow = null;\n    let lastLowRsi = null;\n    let previousLowRsi = null;\n\n    // 3. 저점과 해당 RSI를 찾아 비교\n    for (let i = 1; i < sortedStockData.length - 1; i++) {\n      const currentPrice = sortedStockData[i].close;\n      const previousPrice = sortedStockData[i - 1].close;\n      const nextPrice = sortedStockData[i + 1].close;\n\n      // 현재 종가가 이전 및 다음 종가보다 낮은지 확인 (저점 형성)\n      if (currentPrice < previousPrice && currentPrice < nextPrice) {\n        var _sortedRsiData$find;\n        const currentDate = sortedStockData[i].date;\n        const currentRsi = (_sortedRsiData$find = sortedRsiData.find(rsi => rsi.date === currentDate)) === null || _sortedRsiData$find === void 0 ? void 0 : _sortedRsiData$find.RSI;\n        if (!previousLow) {\n          // 첫 번째 저점 발견\n          previousLow = {\n            date: currentDate,\n            close: currentPrice\n          };\n          previousLowRsi = currentRsi;\n        } else if (!lastLow) {\n          // 두 번째 저점 발견\n          lastLow = {\n            date: currentDate,\n            close: currentPrice\n          };\n          lastLowRsi = currentRsi;\n\n          // 저점 간 3일 이상의 차이가 있는지 확인 (리셋 기준 적용)\n          const dateDifference = (new Date(lastLow.date) - new Date(previousLow.date)) / (1000 * 60 * 60 * 24);\n          if (dateDifference > 3) {\n            previousLow = lastLow;\n            previousLowRsi = lastLowRsi;\n            lastLow = null;\n            lastLowRsi = null;\n          }\n        } else {\n          break; // 두 저점을 찾았으므로 반복 종료\n        }\n      }\n    }\n    if (!previousLow || !lastLow || lastLowRsi === null || previousLowRsi === null) return false;\n\n    // 4. 강세 다이버전스 판단: 두 번째 저점이 더 낮고, RSI는 더 높은 경우\n    const isBullishDivergence = lastLow.close < previousLow.close && lastLowRsi > previousLowRsi;\n\n    // 5. 다이버전스가 발견된 경우 저점 정보를 반환\n    return isBullishDivergence ? {\n      lastLow,\n      previousLow\n    } : false;\n  };\n  const calculateBearishDivergence = (stockCode, stockData, rsiData) => {\n    // 1. stockCode에 해당하는 데이터 필터링\n    const filteredStockData = stockData.filter(data => data.stock_code === stockCode);\n    const filteredRsiData = rsiData.filter(data => data.stock_code === stockCode);\n\n    // 2. 날짜순으로 정렬\n    const sortedStockData = [...filteredStockData].sort((a, b) => new Date(a.date) - new Date(b.date));\n    const sortedRsiData = [...filteredRsiData].sort((a, b) => new Date(a.date) - new Date(b.date));\n    let lastHigh = null;\n    let previousHigh = null;\n    let lastHighRsi = null;\n    let previousHighRsi = null;\n\n    // 3. 고점과 해당 RSI를 찾아 비교\n    for (let i = 1; i < sortedStockData.length - 1; i++) {\n      const currentPrice = sortedStockData[i].close;\n      const previousPrice = sortedStockData[i - 1].close;\n      const nextPrice = sortedStockData[i + 1].close;\n\n      // 현재 종가가 이전 및 다음 종가보다 높은지 확인 (고점 형성)\n      if (currentPrice > previousPrice && currentPrice > nextPrice) {\n        var _sortedRsiData$find2;\n        const currentDate = sortedStockData[i].date;\n        const currentRsi = (_sortedRsiData$find2 = sortedRsiData.find(rsi => rsi.date === currentDate)) === null || _sortedRsiData$find2 === void 0 ? void 0 : _sortedRsiData$find2.RSI;\n        if (!previousHigh) {\n          // 첫 번째 고점 발견\n          previousHigh = {\n            date: currentDate,\n            close: currentPrice\n          };\n          previousHighRsi = currentRsi;\n        } else if (!lastHigh) {\n          // 두 번째 고점 발견\n          lastHigh = {\n            date: currentDate,\n            close: currentPrice\n          };\n          lastHighRsi = currentRsi;\n\n          // 고점 간 3일 이상의 차이가 있는지 확인 (리셋 기준 적용)\n          const dateDifference = (new Date(lastHigh.date) - new Date(previousHigh.date)) / (1000 * 60 * 60 * 24);\n          if (dateDifference > 3) {\n            previousHigh = lastHigh;\n            previousHighRsi = lastHighRsi;\n            lastHigh = null;\n            lastHighRsi = null;\n          }\n        } else {\n          break; // 두 고점을 찾았으므로 반복 종료\n        }\n      }\n    }\n    if (!previousHigh || !lastHigh || lastHighRsi === null || previousHighRsi === null) return false;\n\n    // 4. 약세 다이버전스 판단: 두 번째 고점이 더 높고, RSI는 더 낮은 경우\n    const isBearishDivergence = lastHigh.close > previousHigh.close && lastHighRsi < previousHighRsi;\n\n    // 5. 다이버전스가 발견된 경우 고점 정보를 반환\n    return isBearishDivergence ? {\n      lastHigh,\n      previousHigh\n    } : false;\n  };\n  useEffect(() => {\n    const bullishDivergence = calculateBullishDivergence(stockCode, stockData, rsiData);\n    const bearishDivergence = calculateBearishDivergence(stockCode, stockData, rsiData);\n    setBullishDivergence(bullishDivergence);\n    setBearishDivergence(bearishDivergence);\n  }, [stockCode, stockData, rsiData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      className: \"analysis-text\",\n      children: \" RSI Divergence\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n      children: \"\\uAC15\\uC138 \\uB2E4\\uC774\\uBC84\\uC804\\uC2A4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this), bullishDivergence ? /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'green'\n      },\n      children: [\"\\uAC15\\uC138 \\uB2E4\\uC774\\uBC84\\uC804\\uC2A4\\uAC00 \\uAC10\\uC9C0\\uB418\\uC5C8\\uC2B5\\uB2C8\\uB2E4: \\uB9E4\\uC218 \\uC2E0\\uD638\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 69\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\uAC15\\uC138 \\uB2E4\\uC774\\uBC84\\uC804\\uC2A4\\uAC00 \\uAC10\\uC9C0\\uB418\\uC9C0 \\uC54A\\uC558\\uC2B5\\uB2C8\\uB2E4.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this), \"\\uC57D\\uC138 \\uB2E4\\uC774\\uBC84\\uC804\\uC2A4\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this), bearishDivergence ? /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: \"\\uC57D\\uC138 \\uB2E4\\uC774\\uBC84\\uC804\\uC2A4\\uAC00 \\uAC10\\uC9C0\\uB418\\uC5C8\\uC2B5\\uB2C8\\uB2E4: \\uB9E4\\uB3C4 \\uC2E0\\uD638\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\uC57D\\uC138 \\uB2E4\\uC774\\uBC84\\uC804\\uC2A4\\uAC00 \\uAC10\\uC9C0\\uB418\\uC9C0 \\uC54A\\uC558\\uC2B5\\uB2C8\\uB2E4.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 9\n  }, this);\n}\n_s(RSIAnalysis2, \"N8WwhHaYLUaF0V5CJbDK1Y5QHFY=\");\n_c = RSIAnalysis2;\nexport default RSIAnalysis2;\nvar _c;\n$RefreshReg$(_c, \"RSIAnalysis2\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","RSIAnalysis2","stockCode","stockData","rsiData","_s","bullishDivergence","setBullishDivergence","bearishDivergence","setBearishDivergence","calculateBullishDivergence","filteredStockData","filter","data","stock_code","filteredRsiData","sortedStockData","sort","a","b","Date","date","sortedRsiData","lastLow","previousLow","lastLowRsi","previousLowRsi","i","length","currentPrice","close","previousPrice","nextPrice","_sortedRsiData$find","currentDate","currentRsi","find","rsi","RSI","dateDifference","isBullishDivergence","calculateBearishDivergence","lastHigh","previousHigh","lastHighRsi","previousHighRsi","_sortedRsiData$find2","isBearishDivergence","children","className","fileName","_jsxFileName","lineNumber","columnNumber","style","color","_c","$RefreshReg$"],"sources":["C:/ProPython/Stock2/frontend/src/AnalysisComponents/RSIAnalysis2.js"],"sourcesContent":["import React, {useState, useEffect} from \"react\";\r\n\r\nfunction RSIAnalysis2({ stockCode, stockData, rsiData }) {\r\n    const [bullishDivergence , setBullishDivergence ] = useState([])\r\n    const [bearishDivergence, setBearishDivergence] = useState([])\r\n\r\n\r\n    const calculateBullishDivergence = (stockCode, stockData, rsiData) => {\r\n        // 1. stockCode에 해당하는 데이터 필터링\r\n        const filteredStockData = stockData.filter(data => data.stock_code === stockCode);\r\n        const filteredRsiData = rsiData.filter(data => data.stock_code === stockCode);\r\n\r\n        // 2. 날짜순으로 정렬\r\n        const sortedStockData = [...filteredStockData].sort((a, b) => new Date(a.date) - new Date(b.date));\r\n        const sortedRsiData = [...filteredRsiData].sort((a, b) => new Date(a.date) - new Date(b.date));\r\n\r\n        let lastLow = null;\r\n        let previousLow = null;\r\n        let lastLowRsi = null;\r\n        let previousLowRsi = null;\r\n\r\n        // 3. 저점과 해당 RSI를 찾아 비교\r\n        for (let i = 1; i < sortedStockData.length - 1; i++) {\r\n            const currentPrice = sortedStockData[i].close;\r\n            const previousPrice = sortedStockData[i - 1].close;\r\n            const nextPrice = sortedStockData[i + 1].close;\r\n\r\n            // 현재 종가가 이전 및 다음 종가보다 낮은지 확인 (저점 형성)\r\n            if (currentPrice < previousPrice && currentPrice < nextPrice) {\r\n                const currentDate = sortedStockData[i].date;\r\n                const currentRsi = sortedRsiData.find(rsi => rsi.date === currentDate)?.RSI;\r\n\r\n                if (!previousLow) {\r\n                    // 첫 번째 저점 발견\r\n                    previousLow = { date: currentDate, close: currentPrice };\r\n                    previousLowRsi = currentRsi;\r\n                } else if (!lastLow) {\r\n                    // 두 번째 저점 발견\r\n                    lastLow = { date: currentDate, close: currentPrice };\r\n                    lastLowRsi = currentRsi;\r\n\r\n                    // 저점 간 3일 이상의 차이가 있는지 확인 (리셋 기준 적용)\r\n                    const dateDifference = (new Date(lastLow.date) - new Date(previousLow.date)) / (1000 * 60 * 60 * 24);\r\n                    if (dateDifference > 3) {\r\n                        previousLow = lastLow;\r\n                        previousLowRsi = lastLowRsi;\r\n                        lastLow = null;\r\n                        lastLowRsi = null;\r\n                    }\r\n                } else {\r\n                    break; // 두 저점을 찾았으므로 반복 종료\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!previousLow || !lastLow || lastLowRsi === null || previousLowRsi === null) return false;\r\n\r\n        // 4. 강세 다이버전스 판단: 두 번째 저점이 더 낮고, RSI는 더 높은 경우\r\n        const isBullishDivergence = lastLow.close < previousLow.close && lastLowRsi > previousLowRsi;\r\n\r\n        // 5. 다이버전스가 발견된 경우 저점 정보를 반환\r\n        return isBullishDivergence ? { lastLow, previousLow } : false;\r\n    };\r\n\r\n    const calculateBearishDivergence = (stockCode, stockData, rsiData) => {\r\n        // 1. stockCode에 해당하는 데이터 필터링\r\n        const filteredStockData = stockData.filter(data => data.stock_code === stockCode);\r\n        const filteredRsiData = rsiData.filter(data => data.stock_code === stockCode);\r\n\r\n        // 2. 날짜순으로 정렬\r\n        const sortedStockData = [...filteredStockData].sort((a, b) => new Date(a.date) - new Date(b.date));\r\n        const sortedRsiData = [...filteredRsiData].sort((a, b) => new Date(a.date) - new Date(b.date));\r\n\r\n        let lastHigh = null;\r\n        let previousHigh = null;\r\n        let lastHighRsi = null;\r\n        let previousHighRsi = null;\r\n\r\n        // 3. 고점과 해당 RSI를 찾아 비교\r\n        for (let i = 1; i < sortedStockData.length - 1; i++) {\r\n            const currentPrice = sortedStockData[i].close;\r\n            const previousPrice = sortedStockData[i - 1].close;\r\n            const nextPrice = sortedStockData[i + 1].close;\r\n\r\n            // 현재 종가가 이전 및 다음 종가보다 높은지 확인 (고점 형성)\r\n            if (currentPrice > previousPrice && currentPrice > nextPrice) {\r\n                const currentDate = sortedStockData[i].date;\r\n                const currentRsi = sortedRsiData.find(rsi => rsi.date === currentDate)?.RSI;\r\n\r\n                if (!previousHigh) {\r\n                    // 첫 번째 고점 발견\r\n                    previousHigh = { date: currentDate, close: currentPrice };\r\n                    previousHighRsi = currentRsi;\r\n                } else if (!lastHigh) {\r\n                    // 두 번째 고점 발견\r\n                    lastHigh = { date: currentDate, close: currentPrice };\r\n                    lastHighRsi = currentRsi;\r\n\r\n                    // 고점 간 3일 이상의 차이가 있는지 확인 (리셋 기준 적용)\r\n                    const dateDifference = (new Date(lastHigh.date) - new Date(previousHigh.date)) / (1000 * 60 * 60 * 24);\r\n                    if (dateDifference > 3) {\r\n                        previousHigh = lastHigh;\r\n                        previousHighRsi = lastHighRsi;\r\n                        lastHigh = null;\r\n                        lastHighRsi = null;\r\n                    }\r\n                } else {\r\n                    break; // 두 고점을 찾았으므로 반복 종료\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!previousHigh || !lastHigh || lastHighRsi === null || previousHighRsi === null) return false;\r\n\r\n        // 4. 약세 다이버전스 판단: 두 번째 고점이 더 높고, RSI는 더 낮은 경우\r\n        const isBearishDivergence = lastHigh.close > previousHigh.close && lastHighRsi < previousHighRsi;\r\n\r\n        // 5. 다이버전스가 발견된 경우 고점 정보를 반환\r\n        return isBearishDivergence ? { lastHigh, previousHigh } : false;\r\n    };\r\n\r\n    useEffect(() => {\r\n        const bullishDivergence = calculateBullishDivergence(stockCode, stockData, rsiData);\r\n        const bearishDivergence = calculateBearishDivergence(stockCode, stockData, rsiData);\r\n\r\n        setBullishDivergence(bullishDivergence);\r\n        setBearishDivergence(bearishDivergence);\r\n\r\n    }, [stockCode, stockData, rsiData]);\r\n\r\n    return (\r\n        <div>\r\n            <h4 className=\"analysis-text\"> RSI Divergence</h4>\r\n            <h5>강세 다이버전스</h5>\r\n            {bullishDivergence ? (\r\n                <p style={{color: 'green'}}>강세 다이버전스가 감지되었습니다: 매수 신호<br></br></p>\r\n            ) : (\r\n                <p>강세 다이버전스가 감지되지 않았습니다.</p>\r\n            )}\r\n\r\n            <h5><br></br>약세 다이버전스</h5>\r\n            {bearishDivergence ? (\r\n                <p style={{color: 'red'}}>약세 다이버전스가 감지되었습니다: 매도 신호</p>\r\n            ) : (\r\n                <p>약세 다이버전스가 감지되지 않았습니다.</p>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RSIAnalysis2"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}