{"ast":null,"code":"import jenksBreaks from \"./jenks_breaks.js\";\nimport jenksMatrices from \"./jenks_matrices.js\";\n\n/**\n * The **[jenks natural breaks optimization](http://en.wikipedia.org/wiki/Jenks_natural_breaks_optimization)**\n * is an algorithm commonly used in cartography and visualization to decide\n * upon groupings of data values that minimize variance within themselves\n * and maximize variation between themselves.\n *\n * For instance, cartographers often use jenks in order to choose which\n * values are assigned to which colors in a [choropleth](https://en.wikipedia.org/wiki/Choropleth_map)\n * map.\n *\n * @param {Array<number>} data input data, as an array of number values\n * @param {number} nClasses number of desired classes\n * @returns {Array<number>} array of class break positions\n * // split data into 3 break points\n * jenks([1, 2, 4, 5, 7, 9, 10, 20], 3) // = [1, 7, 20, 20]\n */\nfunction jenks(data, nClasses) {\n  if (nClasses > data.length) {\n    return null;\n  }\n\n  // sort data in numerical order, since this is expected\n  // by the matrices function\n  data = data.slice().sort(function (a, b) {\n    return a - b;\n  });\n\n  // get our basic matrices\n  const matrices = jenksMatrices(data, nClasses);\n  // we only need lower class limits here\n  const lowerClassLimits = matrices.lowerClassLimits;\n\n  // extract nClasses out of the computed matrices\n  return jenksBreaks(data, lowerClassLimits, nClasses);\n}\nexport default jenks;","map":{"version":3,"names":["jenksBreaks","jenksMatrices","jenks","data","nClasses","length","slice","sort","a","b","matrices","lowerClassLimits"],"sources":["C:/ProPython/Stock2/node_modules/simple-statistics/src/jenks.js"],"sourcesContent":["import jenksBreaks from \"./jenks_breaks.js\";\nimport jenksMatrices from \"./jenks_matrices.js\";\n\n/**\n * The **[jenks natural breaks optimization](http://en.wikipedia.org/wiki/Jenks_natural_breaks_optimization)**\n * is an algorithm commonly used in cartography and visualization to decide\n * upon groupings of data values that minimize variance within themselves\n * and maximize variation between themselves.\n *\n * For instance, cartographers often use jenks in order to choose which\n * values are assigned to which colors in a [choropleth](https://en.wikipedia.org/wiki/Choropleth_map)\n * map.\n *\n * @param {Array<number>} data input data, as an array of number values\n * @param {number} nClasses number of desired classes\n * @returns {Array<number>} array of class break positions\n * // split data into 3 break points\n * jenks([1, 2, 4, 5, 7, 9, 10, 20], 3) // = [1, 7, 20, 20]\n */\nfunction jenks(data, nClasses) {\n    if (nClasses > data.length) {\n        return null;\n    }\n\n    // sort data in numerical order, since this is expected\n    // by the matrices function\n    data = data.slice().sort(function (a, b) {\n        return a - b;\n    });\n\n    // get our basic matrices\n    const matrices = jenksMatrices(data, nClasses);\n    // we only need lower class limits here\n    const lowerClassLimits = matrices.lowerClassLimits;\n\n    // extract nClasses out of the computed matrices\n    return jenksBreaks(data, lowerClassLimits, nClasses);\n}\n\nexport default jenks;\n"],"mappings":"AAAA,OAAOA,WAAW,MAAM,mBAAmB;AAC3C,OAAOC,aAAa,MAAM,qBAAqB;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,KAAKA,CAACC,IAAI,EAAEC,QAAQ,EAAE;EAC3B,IAAIA,QAAQ,GAAGD,IAAI,CAACE,MAAM,EAAE;IACxB,OAAO,IAAI;EACf;;EAEA;EACA;EACAF,IAAI,GAAGA,IAAI,CAACG,KAAK,CAAC,CAAC,CAACC,IAAI,CAAC,UAAUC,CAAC,EAAEC,CAAC,EAAE;IACrC,OAAOD,CAAC,GAAGC,CAAC;EAChB,CAAC,CAAC;;EAEF;EACA,MAAMC,QAAQ,GAAGT,aAAa,CAACE,IAAI,EAAEC,QAAQ,CAAC;EAC9C;EACA,MAAMO,gBAAgB,GAAGD,QAAQ,CAACC,gBAAgB;;EAElD;EACA,OAAOX,WAAW,CAACG,IAAI,EAAEQ,gBAAgB,EAAEP,QAAQ,CAAC;AACxD;AAEA,eAAeF,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}