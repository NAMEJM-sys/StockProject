{"ast":null,"code":"/**\n * Rearrange items in `arr` so that all items in `[left, k]` range are the smallest.\n * The `k`-th element will have the `(k - left + 1)`-th smallest value in `[left, right]`.\n *\n * Implements Floyd-Rivest selection algorithm https://en.wikipedia.org/wiki/Floyd-Rivest_algorithm\n *\n * @param {Array<number>} arr input array\n * @param {number} k pivot index\n * @param {number} [left] left index\n * @param {number} [right] right index\n * @returns {void} mutates input array\n * @example\n * var arr = [65, 28, 59, 33, 21, 56, 22, 95, 50, 12, 90, 53, 28, 77, 39];\n * quickselect(arr, 8);\n * // = [39, 28, 28, 33, 21, 12, 22, 50, 53, 56, 59, 65, 90, 77, 95]\n */\nfunction quickselect(arr, k, left, right) {\n  left = left || 0;\n  right = right || arr.length - 1;\n  while (right > left) {\n    // 600 and 0.5 are arbitrary constants chosen in the original paper to minimize execution time\n    if (right - left > 600) {\n      const n = right - left + 1;\n      const m = k - left + 1;\n      const z = Math.log(n);\n      const s = 0.5 * Math.exp(2 * z / 3);\n      let sd = 0.5 * Math.sqrt(z * s * (n - s) / n);\n      if (m - n / 2 < 0) sd *= -1;\n      const newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n      const newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n      quickselect(arr, k, newLeft, newRight);\n    }\n    const t = arr[k];\n    let i = left;\n    let j = right;\n    swap(arr, left, k);\n    if (arr[right] > t) swap(arr, left, right);\n    while (i < j) {\n      swap(arr, i, j);\n      i++;\n      j--;\n      while (arr[i] < t) i++;\n      while (arr[j] > t) j--;\n    }\n    if (arr[left] === t) swap(arr, left, j);else {\n      j++;\n      swap(arr, j, right);\n    }\n    if (j <= k) left = j + 1;\n    if (k <= j) right = j - 1;\n  }\n}\nfunction swap(arr, i, j) {\n  const tmp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = tmp;\n}\nexport default quickselect;","map":{"version":3,"names":["quickselect","arr","k","left","right","length","n","m","z","Math","log","s","exp","sd","sqrt","newLeft","max","floor","newRight","min","t","i","j","swap","tmp"],"sources":["C:/ProPython/Stock2/node_modules/simple-statistics/src/quickselect.js"],"sourcesContent":["/**\n * Rearrange items in `arr` so that all items in `[left, k]` range are the smallest.\n * The `k`-th element will have the `(k - left + 1)`-th smallest value in `[left, right]`.\n *\n * Implements Floyd-Rivest selection algorithm https://en.wikipedia.org/wiki/Floyd-Rivest_algorithm\n *\n * @param {Array<number>} arr input array\n * @param {number} k pivot index\n * @param {number} [left] left index\n * @param {number} [right] right index\n * @returns {void} mutates input array\n * @example\n * var arr = [65, 28, 59, 33, 21, 56, 22, 95, 50, 12, 90, 53, 28, 77, 39];\n * quickselect(arr, 8);\n * // = [39, 28, 28, 33, 21, 12, 22, 50, 53, 56, 59, 65, 90, 77, 95]\n */\nfunction quickselect(arr, k, left, right) {\n    left = left || 0;\n    right = right || arr.length - 1;\n\n    while (right > left) {\n        // 600 and 0.5 are arbitrary constants chosen in the original paper to minimize execution time\n        if (right - left > 600) {\n            const n = right - left + 1;\n            const m = k - left + 1;\n            const z = Math.log(n);\n            const s = 0.5 * Math.exp((2 * z) / 3);\n            let sd = 0.5 * Math.sqrt((z * s * (n - s)) / n);\n            if (m - n / 2 < 0) sd *= -1;\n            const newLeft = Math.max(left, Math.floor(k - (m * s) / n + sd));\n            const newRight = Math.min(\n                right,\n                Math.floor(k + ((n - m) * s) / n + sd)\n            );\n            quickselect(arr, k, newLeft, newRight);\n        }\n\n        const t = arr[k];\n        let i = left;\n        let j = right;\n\n        swap(arr, left, k);\n        if (arr[right] > t) swap(arr, left, right);\n\n        while (i < j) {\n            swap(arr, i, j);\n            i++;\n            j--;\n            while (arr[i] < t) i++;\n            while (arr[j] > t) j--;\n        }\n\n        if (arr[left] === t) swap(arr, left, j);\n        else {\n            j++;\n            swap(arr, j, right);\n        }\n\n        if (j <= k) left = j + 1;\n        if (k <= j) right = j - 1;\n    }\n}\n\nfunction swap(arr, i, j) {\n    const tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n}\n\nexport default quickselect;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}