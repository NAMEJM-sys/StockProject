{"ast":null,"code":"/**\n * The [log average](https://en.wikipedia.org/wiki/https://en.wikipedia.org/wiki/Geometric_mean#Relationship_with_logarithms)\n * is an equivalent way of computing the geometric mean of an array suitable for large or small products.\n *\n * It's found by calculating the average logarithm of the elements and exponentiating.\n *\n * @param {Array<number>} x sample of one or more data points\n * @returns {number} geometric mean\n * @throws {Error} if x is empty\n * @throws {Error} if x contains a negative number\n */\nfunction logAverage(x) {\n  if (x.length === 0) {\n    throw new Error(\"logAverage requires at least one data point\");\n  }\n  let value = 0;\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] < 0) {\n      throw new Error(\"logAverage requires only non-negative numbers as input\");\n    }\n    value += Math.log(x[i]);\n  }\n  return Math.exp(value / x.length);\n}\nexport default logAverage;","map":{"version":3,"names":["logAverage","x","length","Error","value","i","Math","log","exp"],"sources":["C:/ProPython/Stock2/node_modules/simple-statistics/src/log_average.js"],"sourcesContent":["/**\n * The [log average](https://en.wikipedia.org/wiki/https://en.wikipedia.org/wiki/Geometric_mean#Relationship_with_logarithms)\n * is an equivalent way of computing the geometric mean of an array suitable for large or small products.\n *\n * It's found by calculating the average logarithm of the elements and exponentiating.\n *\n * @param {Array<number>} x sample of one or more data points\n * @returns {number} geometric mean\n * @throws {Error} if x is empty\n * @throws {Error} if x contains a negative number\n */\nfunction logAverage(x) {\n    if (x.length === 0) {\n        throw new Error(\"logAverage requires at least one data point\");\n    }\n\n    let value = 0;\n    for (let i = 0; i < x.length; i++) {\n        if (x[i] < 0) {\n            throw new Error(\n                \"logAverage requires only non-negative numbers as input\"\n            );\n        }\n        value += Math.log(x[i]);\n    }\n\n    return Math.exp(value / x.length);\n}\n\nexport default logAverage;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,UAAUA,CAACC,CAAC,EAAE;EACnB,IAAIA,CAAC,CAACC,MAAM,KAAK,CAAC,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAClE;EAEA,IAAIC,KAAK,GAAG,CAAC;EACb,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,CAAC,CAACC,MAAM,EAAEG,CAAC,EAAE,EAAE;IAC/B,IAAIJ,CAAC,CAACI,CAAC,CAAC,GAAG,CAAC,EAAE;MACV,MAAM,IAAIF,KAAK,CACX,wDACJ,CAAC;IACL;IACAC,KAAK,IAAIE,IAAI,CAACC,GAAG,CAACN,CAAC,CAACI,CAAC,CAAC,CAAC;EAC3B;EAEA,OAAOC,IAAI,CAACE,GAAG,CAACJ,KAAK,GAAGH,CAAC,CAACC,MAAM,CAAC;AACrC;AAEA,eAAeF,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}