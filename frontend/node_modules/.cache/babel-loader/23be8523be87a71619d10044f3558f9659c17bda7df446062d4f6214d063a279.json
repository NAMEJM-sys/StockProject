{"ast":null,"code":"var _jsxFileName = \"C:\\\\ProPython\\\\Stock2\\\\frontend\\\\src\\\\components\\\\ChartOfClose.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChartOfClose({\n  stockCode\n}) {\n  _s();\n  const [stockData, setStockData] = useState([]);\n  const [filteredData, setFilteredData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true); // 데이터 로딩 상태 관리\n  const [error, setError] = useState(null); // 에러 상태 관리\n\n  const fetchStockData = async () => {\n    try {\n      const response = await fetch('http://127.0.0.1:8000/api/stock_data/');\n      if (!response.ok) {\n        throw new Error('데이터를 가져오는 데 실패했습니다.');\n      }\n      const data = await response.json();\n      setStockData(data);\n      setIsLoading(false);\n    } catch (err) {\n      console.error('Error fetching stock data:', err);\n      setError(err.message);\n      setIsLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchStockData();\n  }, []);\n\n  // stockData 또는 stockCode 변경 시 데이터 필터링\n  useEffect(() => {\n    if (stockData.length > 0 && stockCode) {\n      const dataForChart = stockData.filter(item => item.stock_code === stockCode).map(item => ({\n        date: item.date,\n        close: item.close\n      })).sort((a, b) => new Date(a.date) - new Date(b.date)); // 날짜 순으로 정렬\n\n      console.log('Filtered Data for Chart:', dataForChart);\n      setFilteredData(dataForChart);\n    }\n  }, [stockData, stockCode]);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\uB370\\uC774\\uD130\\uB97C \\uBD88\\uB7EC\\uC624\\uB294 \\uC911...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 16\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"\\uC5D0\\uB7EC \\uBC1C\\uC0DD: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 16\n    }, this);\n  }\n  if (filteredData.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\uC120\\uD0DD\\uD55C \\uC885\\uBAA9\\uC758 \\uB370\\uC774\\uD130\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%',\n      height: 300\n    },\n    children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        data: filteredData,\n        margin: {\n          top: 100,\n          right: 30,\n          left: 20,\n          bottom: 0\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"date\",\n          tickCount: 5\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"close\",\n          stroke: \"#8884d8\",\n          dot: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n}\n_s(ChartOfClose, \"GYbt5cy/iOoBoOueFtP9fIK14KY=\");\n_c = ChartOfClose;\nexport default ChartOfClose;\nvar _c;\n$RefreshReg$(_c, \"ChartOfClose\");","map":{"version":3,"names":["React","useState","useEffect","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","jsxDEV","_jsxDEV","ChartOfClose","stockCode","_s","stockData","setStockData","filteredData","setFilteredData","isLoading","setIsLoading","error","setError","fetchStockData","response","fetch","ok","Error","data","json","err","console","message","length","dataForChart","filter","item","stock_code","map","date","close","sort","a","b","Date","log","children","fileName","_jsxFileName","lineNumber","columnNumber","style","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","tickCount","type","stroke","dot","_c","$RefreshReg$"],"sources":["C:/ProPython/Stock2/frontend/src/components/ChartOfClose.js"],"sourcesContent":["import React,{ useState, useEffect } from \"react\";\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\n\r\n\r\nfunction ChartOfClose({ stockCode }) {\r\n    const [stockData, setStockData] = useState([]);\r\n    const [filteredData, setFilteredData] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(true); // 데이터 로딩 상태 관리\r\n    const [error, setError] = useState(null); // 에러 상태 관리\r\n\r\n    const fetchStockData = async () => {\r\n        try {\r\n            const response = await fetch('http://127.0.0.1:8000/api/stock_data/');\r\n            if (!response.ok) {\r\n                throw new Error('데이터를 가져오는 데 실패했습니다.');\r\n            }\r\n            const data = await response.json();\r\n            setStockData(data);\r\n            setIsLoading(false);\r\n        } catch (err) {\r\n            console.error('Error fetching stock data:', err);\r\n            setError(err.message);\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchStockData();\r\n    }, []);\r\n\r\n    // stockData 또는 stockCode 변경 시 데이터 필터링\r\n    useEffect(() => {\r\n        if (stockData.length > 0 && stockCode) {\r\n            const dataForChart = stockData\r\n                .filter(item => item.stock_code === stockCode)\r\n                .map(item => ({\r\n                    date: item.date,\r\n                    close: item.close,\r\n                }))\r\n                .sort((a, b) => new Date(a.date) - new Date(b.date)); // 날짜 순으로 정렬\r\n\r\n            console.log('Filtered Data for Chart:', dataForChart);\r\n            setFilteredData(dataForChart);\r\n        }\r\n    }, [stockData, stockCode]);\r\n\r\n    if (isLoading) {\r\n        return <div>데이터를 불러오는 중...</div>;\r\n    }\r\n\r\n    if (error) {\r\n        return <div>에러 발생: {error}</div>;\r\n    }\r\n\r\n    if (filteredData.length === 0) {\r\n        return <div>선택한 종목의 데이터가 없습니다.</div>;\r\n    }\r\n\r\n    return (\r\n        <div style={{ width: '100%', height: 300 }}>\r\n            <ResponsiveContainer>\r\n                <LineChart\r\n                    data={filteredData}\r\n                    margin={{ top: 100, right: 30, left: 20, bottom: 0 }}\r\n                >\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <XAxis dataKey=\"date\" tickCount={5} />\r\n                    <YAxis />\r\n                    <Tooltip />\r\n                    <Legend />\r\n                    <Line\r\n                        type=\"monotone\"\r\n                        dataKey=\"close\"\r\n                        stroke=\"#8884d8\"\r\n                        dot={false}\r\n                    />\r\n                </LineChart>\r\n            </ResponsiveContainer>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChartOfClose;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}