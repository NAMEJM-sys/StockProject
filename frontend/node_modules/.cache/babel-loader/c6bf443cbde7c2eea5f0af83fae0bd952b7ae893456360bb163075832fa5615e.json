{"ast":null,"code":"import mean from \"./mean.js\";\nimport shuffleInPlace from \"./shuffle_in_place.js\";\n\n/**\n * Conducts a [permutation test](https://en.wikipedia.org/wiki/Resampling_(statistics)#Permutation_tests)\n * to determine if two data sets are *significantly* different from each other, using\n * the difference of means between the groups as the test statistic.\n * The function allows for the following hypotheses:\n * - two_tail = Null hypothesis: the two distributions are equal.\n * - greater = Null hypothesis: observations from sampleX tend to be smaller than those from sampleY.\n * - less = Null hypothesis: observations from sampleX tend to be greater than those from sampleY.\n * [Learn more about one-tail vs two-tail tests.](https://en.wikipedia.org/wiki/One-_and_two-tailed_tests)\n *\n * @param {Array<number>} sampleX first dataset (e.g. treatment data)\n * @param {Array<number>} sampleY second dataset (e.g. control data)\n * @param {string} alternative alternative hypothesis, either 'two_sided' (default), 'greater', or 'less'\n * @param {number} k number of values in permutation distribution.\n * @param {Function} [randomSource=Math.random] an optional entropy source\n * @returns {number} p-value The probability of observing the difference between groups (as or more extreme than what we did), assuming the null hypothesis.\n *\n * @example\n * var control = [2, 5, 3, 6, 7, 2, 5];\n * var treatment = [20, 5, 13, 12, 7, 2, 2];\n * permutationTest(control, treatment); // ~0.1324\n */\nfunction permutationTest(sampleX, sampleY, alternative, k, randomSource) {\n  // Set default arguments\n  if (k === undefined) {\n    k = 10000;\n  }\n  if (alternative === undefined) {\n    alternative = \"two_side\";\n  }\n  if (alternative !== \"two_side\" && alternative !== \"greater\" && alternative !== \"less\") {\n    throw new Error(\"`alternative` must be either 'two_side', 'greater', or 'less'.\");\n  }\n\n  // get means for each sample\n  const meanX = mean(sampleX);\n  const meanY = mean(sampleY);\n\n  // calculate initial test statistic. This will be our point of comparison with\n  // the generated test statistics.\n  const testStatistic = meanX - meanY;\n\n  // create test-statistic distribution\n  const testStatDsn = new Array(k);\n\n  // combine datsets so we can easily shuffle later\n  const allData = sampleX.concat(sampleY);\n  const midIndex = Math.floor(allData.length / 2);\n  for (let i = 0; i < k; i++) {\n    // 1. shuffle data assignments\n    shuffleInPlace(allData, randomSource);\n    const permLeft = allData.slice(0, midIndex);\n    const permRight = allData.slice(midIndex, allData.length);\n\n    // 2.re-calculate test statistic\n    const permTestStatistic = mean(permLeft) - mean(permRight);\n\n    // 3. store test statistic to build test statistic distribution\n    testStatDsn[i] = permTestStatistic;\n  }\n\n  // Calculate p-value depending on alternative\n  // For this test, we calculate the percentage of 'extreme' test statistics (subject to our hypothesis)\n  // more info on permutation test p-value calculations: https://onlinecourses.science.psu.edu/stat464/node/35\n  let numExtremeTStats = 0;\n  if (alternative === \"two_side\") {\n    for (let i = 0; i <= k; i++) {\n      if (Math.abs(testStatDsn[i]) >= Math.abs(testStatistic)) {\n        numExtremeTStats += 1;\n      }\n    }\n  } else if (alternative === \"greater\") {\n    for (let i = 0; i <= k; i++) {\n      if (testStatDsn[i] >= testStatistic) {\n        numExtremeTStats += 1;\n      }\n    }\n  } else {\n    // alternative === 'less'\n    for (let i = 0; i <= k; i++) {\n      /* c8 ignore start */\n      if (testStatDsn[i] <= testStatistic) {\n        numExtremeTStats += 1;\n      }\n      /* c8 ignore end */\n    }\n  }\n  return numExtremeTStats / k;\n}\nexport default permutationTest;","map":{"version":3,"names":["mean","shuffleInPlace","permutationTest","sampleX","sampleY","alternative","k","randomSource","undefined","Error","meanX","meanY","testStatistic","testStatDsn","Array","allData","concat","midIndex","Math","floor","length","i","permLeft","slice","permRight","permTestStatistic","numExtremeTStats","abs"],"sources":["C:/ProPython/Stock2/node_modules/simple-statistics/src/permutation_test.js"],"sourcesContent":["import mean from \"./mean.js\";\nimport shuffleInPlace from \"./shuffle_in_place.js\";\n\n/**\n * Conducts a [permutation test](https://en.wikipedia.org/wiki/Resampling_(statistics)#Permutation_tests)\n * to determine if two data sets are *significantly* different from each other, using\n * the difference of means between the groups as the test statistic.\n * The function allows for the following hypotheses:\n * - two_tail = Null hypothesis: the two distributions are equal.\n * - greater = Null hypothesis: observations from sampleX tend to be smaller than those from sampleY.\n * - less = Null hypothesis: observations from sampleX tend to be greater than those from sampleY.\n * [Learn more about one-tail vs two-tail tests.](https://en.wikipedia.org/wiki/One-_and_two-tailed_tests)\n *\n * @param {Array<number>} sampleX first dataset (e.g. treatment data)\n * @param {Array<number>} sampleY second dataset (e.g. control data)\n * @param {string} alternative alternative hypothesis, either 'two_sided' (default), 'greater', or 'less'\n * @param {number} k number of values in permutation distribution.\n * @param {Function} [randomSource=Math.random] an optional entropy source\n * @returns {number} p-value The probability of observing the difference between groups (as or more extreme than what we did), assuming the null hypothesis.\n *\n * @example\n * var control = [2, 5, 3, 6, 7, 2, 5];\n * var treatment = [20, 5, 13, 12, 7, 2, 2];\n * permutationTest(control, treatment); // ~0.1324\n */\nfunction permutationTest(sampleX, sampleY, alternative, k, randomSource) {\n    // Set default arguments\n    if (k === undefined) {\n        k = 10000;\n    }\n    if (alternative === undefined) {\n        alternative = \"two_side\";\n    }\n    if (\n        alternative !== \"two_side\" &&\n        alternative !== \"greater\" &&\n        alternative !== \"less\"\n    ) {\n        throw new Error(\n            \"`alternative` must be either 'two_side', 'greater', or 'less'.\"\n        );\n    }\n\n    // get means for each sample\n    const meanX = mean(sampleX);\n    const meanY = mean(sampleY);\n\n    // calculate initial test statistic. This will be our point of comparison with\n    // the generated test statistics.\n    const testStatistic = meanX - meanY;\n\n    // create test-statistic distribution\n    const testStatDsn = new Array(k);\n\n    // combine datsets so we can easily shuffle later\n    const allData = sampleX.concat(sampleY);\n    const midIndex = Math.floor(allData.length / 2);\n\n    for (let i = 0; i < k; i++) {\n        // 1. shuffle data assignments\n        shuffleInPlace(allData, randomSource);\n        const permLeft = allData.slice(0, midIndex);\n        const permRight = allData.slice(midIndex, allData.length);\n\n        // 2.re-calculate test statistic\n        const permTestStatistic = mean(permLeft) - mean(permRight);\n\n        // 3. store test statistic to build test statistic distribution\n        testStatDsn[i] = permTestStatistic;\n    }\n\n    // Calculate p-value depending on alternative\n    // For this test, we calculate the percentage of 'extreme' test statistics (subject to our hypothesis)\n    // more info on permutation test p-value calculations: https://onlinecourses.science.psu.edu/stat464/node/35\n    let numExtremeTStats = 0;\n    if (alternative === \"two_side\") {\n        for (let i = 0; i <= k; i++) {\n            if (Math.abs(testStatDsn[i]) >= Math.abs(testStatistic)) {\n                numExtremeTStats += 1;\n            }\n        }\n    } else if (alternative === \"greater\") {\n        for (let i = 0; i <= k; i++) {\n            if (testStatDsn[i] >= testStatistic) {\n                numExtremeTStats += 1;\n            }\n        }\n    } else {\n        // alternative === 'less'\n        for (let i = 0; i <= k; i++) {\n            /* c8 ignore start */\n            if (testStatDsn[i] <= testStatistic) {\n                numExtremeTStats += 1;\n            }\n            /* c8 ignore end */\n        }\n    }\n\n    return numExtremeTStats / k;\n}\n\nexport default permutationTest;\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,WAAW;AAC5B,OAAOC,cAAc,MAAM,uBAAuB;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,eAAeA,CAACC,OAAO,EAAEC,OAAO,EAAEC,WAAW,EAAEC,CAAC,EAAEC,YAAY,EAAE;EACrE;EACA,IAAID,CAAC,KAAKE,SAAS,EAAE;IACjBF,CAAC,GAAG,KAAK;EACb;EACA,IAAID,WAAW,KAAKG,SAAS,EAAE;IAC3BH,WAAW,GAAG,UAAU;EAC5B;EACA,IACIA,WAAW,KAAK,UAAU,IAC1BA,WAAW,KAAK,SAAS,IACzBA,WAAW,KAAK,MAAM,EACxB;IACE,MAAM,IAAII,KAAK,CACX,gEACJ,CAAC;EACL;;EAEA;EACA,MAAMC,KAAK,GAAGV,IAAI,CAACG,OAAO,CAAC;EAC3B,MAAMQ,KAAK,GAAGX,IAAI,CAACI,OAAO,CAAC;;EAE3B;EACA;EACA,MAAMQ,aAAa,GAAGF,KAAK,GAAGC,KAAK;;EAEnC;EACA,MAAME,WAAW,GAAG,IAAIC,KAAK,CAACR,CAAC,CAAC;;EAEhC;EACA,MAAMS,OAAO,GAAGZ,OAAO,CAACa,MAAM,CAACZ,OAAO,CAAC;EACvC,MAAMa,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACJ,OAAO,CAACK,MAAM,GAAG,CAAC,CAAC;EAE/C,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGf,CAAC,EAAEe,CAAC,EAAE,EAAE;IACxB;IACApB,cAAc,CAACc,OAAO,EAAER,YAAY,CAAC;IACrC,MAAMe,QAAQ,GAAGP,OAAO,CAACQ,KAAK,CAAC,CAAC,EAAEN,QAAQ,CAAC;IAC3C,MAAMO,SAAS,GAAGT,OAAO,CAACQ,KAAK,CAACN,QAAQ,EAAEF,OAAO,CAACK,MAAM,CAAC;;IAEzD;IACA,MAAMK,iBAAiB,GAAGzB,IAAI,CAACsB,QAAQ,CAAC,GAAGtB,IAAI,CAACwB,SAAS,CAAC;;IAE1D;IACAX,WAAW,CAACQ,CAAC,CAAC,GAAGI,iBAAiB;EACtC;;EAEA;EACA;EACA;EACA,IAAIC,gBAAgB,GAAG,CAAC;EACxB,IAAIrB,WAAW,KAAK,UAAU,EAAE;IAC5B,KAAK,IAAIgB,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIf,CAAC,EAAEe,CAAC,EAAE,EAAE;MACzB,IAAIH,IAAI,CAACS,GAAG,CAACd,WAAW,CAACQ,CAAC,CAAC,CAAC,IAAIH,IAAI,CAACS,GAAG,CAACf,aAAa,CAAC,EAAE;QACrDc,gBAAgB,IAAI,CAAC;MACzB;IACJ;EACJ,CAAC,MAAM,IAAIrB,WAAW,KAAK,SAAS,EAAE;IAClC,KAAK,IAAIgB,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIf,CAAC,EAAEe,CAAC,EAAE,EAAE;MACzB,IAAIR,WAAW,CAACQ,CAAC,CAAC,IAAIT,aAAa,EAAE;QACjCc,gBAAgB,IAAI,CAAC;MACzB;IACJ;EACJ,CAAC,MAAM;IACH;IACA,KAAK,IAAIL,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIf,CAAC,EAAEe,CAAC,EAAE,EAAE;MACzB;MACA,IAAIR,WAAW,CAACQ,CAAC,CAAC,IAAIT,aAAa,EAAE;QACjCc,gBAAgB,IAAI,CAAC;MACzB;MACA;IACJ;EACJ;EAEA,OAAOA,gBAAgB,GAAGpB,CAAC;AAC/B;AAEA,eAAeJ,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}