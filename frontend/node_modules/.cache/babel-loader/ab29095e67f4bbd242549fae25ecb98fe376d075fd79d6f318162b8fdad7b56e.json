{"ast":null,"code":"// authService.js\n\nconst authService = {\n  login: async (email, password) => {\n    try {\n      const response = await fetch('/api/login/', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json' // 서버가 기대하는 형식\n        },\n        body: JSON.stringify({\n          email,\n          password\n        }) // JSON 형식으로 본문 전달\n      });\n      if (!response.ok) {\n        throw new Error('Login failed');\n      }\n      const data = await response.json();\n      const {\n        token\n      } = data;\n\n      // token을 localStorage에 저장\n      localStorage.setItem('authToken', token);\n      return data;\n    } catch (error) {\n      console.error('Error during login:', error);\n      throw error;\n    }\n  },\n  logout: () => {\n    // localStorage에서 토큰 삭제\n    localStorage.removeItem('authToken');\n  },\n  getCurrentUser: () => {\n    // localStorage에서 토큰 가져오기\n    const token = localStorage.getItem('authToken');\n    if (!token) {\n      return null;\n    }\n\n    // 토큰을 decode하거나 서버에 유효성 검사 요청 등을 할 수 있습니다.\n    return {\n      token\n    };\n  },\n  isAuthenticated: () => {\n    // 사용자가 인증되었는지 확인\n    return !!localStorage.getItem('authToken');\n  }\n};\nexport default authService;","map":{"version":3,"names":["authService","login","email","password","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","token","localStorage","setItem","error","console","logout","removeItem","getCurrentUser","getItem","isAuthenticated"],"sources":["C:/ProPython/Stock2/frontend/src/services/authService.js"],"sourcesContent":["// authService.js\r\n\r\nconst authService = {\r\n    login: async (email, password) => {\r\n        try {\r\n            const response = await fetch('/api/login/', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json', // 서버가 기대하는 형식\r\n                },\r\n                body: JSON.stringify({ email, password }), // JSON 형식으로 본문 전달\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error('Login failed');\r\n            }\r\n\r\n            const data = await response.json();\r\n            const { token } = data;\r\n\r\n            // token을 localStorage에 저장\r\n            localStorage.setItem('authToken', token);\r\n\r\n            return data;\r\n        } catch (error) {\r\n            console.error('Error during login:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    logout: () => {\r\n        // localStorage에서 토큰 삭제\r\n        localStorage.removeItem('authToken');\r\n    },\r\n\r\n    getCurrentUser: () => {\r\n        // localStorage에서 토큰 가져오기\r\n        const token = localStorage.getItem('authToken');\r\n        if (!token) {\r\n            return null;\r\n        }\r\n\r\n        // 토큰을 decode하거나 서버에 유효성 검사 요청 등을 할 수 있습니다.\r\n        return { token };\r\n    },\r\n\r\n    isAuthenticated: () => {\r\n        // 사용자가 인증되었는지 확인\r\n        return !!localStorage.getItem('authToken');\r\n    },\r\n};\r\n\r\nexport default authService;"],"mappings":"AAAA;;AAEA,MAAMA,WAAW,GAAG;EAChBC,KAAK,EAAE,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IAC9B,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,aAAa,EAAE;QACxCC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE,kBAAkB,CAAE;QACxC,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAER,KAAK;UAAEC;QAAS,CAAC,CAAC,CAAE;MAC/C,CAAC,CAAC;MAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,cAAc,CAAC;MACnC;MAEA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;MAClC,MAAM;QAAEC;MAAM,CAAC,GAAGF,IAAI;;MAEtB;MACAG,YAAY,CAACC,OAAO,CAAC,WAAW,EAAEF,KAAK,CAAC;MAExC,OAAOF,IAAI;IACf,CAAC,CAAC,OAAOK,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,MAAMA,KAAK;IACf;EACJ,CAAC;EAEDE,MAAM,EAAEA,CAAA,KAAM;IACV;IACAJ,YAAY,CAACK,UAAU,CAAC,WAAW,CAAC;EACxC,CAAC;EAEDC,cAAc,EAAEA,CAAA,KAAM;IAClB;IACA,MAAMP,KAAK,GAAGC,YAAY,CAACO,OAAO,CAAC,WAAW,CAAC;IAC/C,IAAI,CAACR,KAAK,EAAE;MACR,OAAO,IAAI;IACf;;IAEA;IACA,OAAO;MAAEA;IAAM,CAAC;EACpB,CAAC;EAEDS,eAAe,EAAEA,CAAA,KAAM;IACnB;IACA,OAAO,CAAC,CAACR,YAAY,CAACO,OAAO,CAAC,WAAW,CAAC;EAC9C;AACJ,CAAC;AAED,eAAevB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}