{"ast":null,"code":"var _jsxFileName = \"C:\\\\ProPython\\\\Stock2\\\\frontend\\\\src\\\\ComponentsChart\\\\GaugeChartOfMovingAverages.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport SolidGauge from 'highcharts/modules/solid-gauge';\nimport ADXTotalMake from \"../ComponentsCalculations/ADXTotalMake\";\nimport SARTotalCalculation from \"../ComponentsCalculations/SARTotalCalculation\";\nimport KeltnerTotalCalculation from \"../ComponentsCalculations/KeltnerTotalCalculation\";\nimport IchimokuTotalCalculation from \"../ComponentsCalculations/IchimokuTotalCalculation\";\nimport IchimokuAnalysis1 from \"../ComponentsAnalysis/IchimokuAnalysis1\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nSolidGauge(Highcharts);\nfunction GaugeChartOfOscillators({\n  stockCode\n}) {\n  _s();\n  const [adxScore, setAdxScore] = useState(null);\n  const [sarScore, setSarScore] = useState(null);\n  const [keltnerScore, setKeltnerScore] = useState(null);\n  const [ichimokuScore, setIchimokuScore] = useState(null);\n  const [averageScore, setAverageScore] = useState(null);\n  const weights = {\n    adxWeights: 3,\n    sarWeights: 2,\n    keltnerWeights: 2,\n    ichmokuWeights: 3\n  };\n  useEffect(() => {\n    if (adxScore !== null && sarScore !== null && keltnerScore !== null && ichimokuScore !== null) {\n      const totalScore = adxScore * weights.adxWeights + sarScore * weights.sarWeights + keltnerScore * weights.keltnerWeights + ichimokuScore * weights.ichmokuWeights;\n      console.log(totalScore);\n      const totalWeight = weights.adxWeights + weights.sarWeights + weights.keltnerWeights + weights.ichmokuWeights;\n      console.log(totalWeight);\n      setAverageScore((totalScore / totalWeight).toFixed(2));\n      console.log(setAverageScore((totalScore / totalWeight).toFixed(2)));\n    }\n  }, [adxScore, sarScore, keltnerScore, ichimokuScore]);\n  const chartOptions = {\n    chart: {\n      type: 'solidgauge',\n      height: '110%'\n    },\n    title: {\n      text: 'Average Score'\n    },\n    pane: {\n      startAngle: -90,\n      endAngle: 90,\n      background: {\n        innerRadius: '60%',\n        outerRadius: '100%',\n        shape: 'arc'\n      }\n    },\n    yAxis: {\n      min: 0,\n      max: 10,\n      // 점수 최대값 (0-10)\n      stops: [[0.1, '#DF5353'],\n      // 빨강\n      [0.5, '#DDDF0D'],\n      // 노랑\n      [0.9, '#55BF3B'] // 초록\n      ],\n      lineWidth: 0,\n      tickWidth: 0,\n      minorTickInterval: null,\n      tickAmount: 2,\n      labels: {\n        y: 16\n      }\n    },\n    series: [{\n      name: 'Score',\n      data: [averageScore !== null ? parseFloat(averageScore) : 0],\n      dataLabels: {\n        format: '<div style=\"text-align:center\"><span style=\"font-size:25px\">{y}</span><br/>' + '<span style=\"font-size:12px;opacity:0.4\">점수</span></div>'\n      }\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ADXTotalMake, {\n      stockCode: stockCode,\n      onScoreCalculated: result => setAdxScore(result.damm)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SARTotalCalculation, {\n      stockCode: stockCode,\n      onScoreCalculated: result => setSarScore(result.damm)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(KeltnerTotalCalculation, {\n      stockCode: stockCode,\n      onScoreCalculated: result => setKeltnerScore(result.damm)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(IchimokuTotalCalculation, {\n      stockCode: stockCode,\n      onScoreCalculated: result => setIchimokuScore(result.damm)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(HighchartsReact, {\n      highcharts: Highcharts,\n      options: chartOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 9\n  }, this);\n}\n_s(GaugeChartOfOscillators, \"vDTNrKQyvTwhJjcamKU2I/bYXh8=\");\n_c = GaugeChartOfOscillators;\nexport default GaugeChartOfOscillators;\nvar _c;\n$RefreshReg$(_c, \"GaugeChartOfOscillators\");","map":{"version":3,"names":["React","useState","useEffect","Highcharts","HighchartsReact","SolidGauge","ADXTotalMake","SARTotalCalculation","KeltnerTotalCalculation","IchimokuTotalCalculation","IchimokuAnalysis1","jsxDEV","_jsxDEV","GaugeChartOfOscillators","stockCode","_s","adxScore","setAdxScore","sarScore","setSarScore","keltnerScore","setKeltnerScore","ichimokuScore","setIchimokuScore","averageScore","setAverageScore","weights","adxWeights","sarWeights","keltnerWeights","ichmokuWeights","totalScore","console","log","totalWeight","toFixed","chartOptions","chart","type","height","title","text","pane","startAngle","endAngle","background","innerRadius","outerRadius","shape","yAxis","min","max","stops","lineWidth","tickWidth","minorTickInterval","tickAmount","labels","y","series","name","data","parseFloat","dataLabels","format","children","onScoreCalculated","result","damm","fileName","_jsxFileName","lineNumber","columnNumber","highcharts","options","_c","$RefreshReg$"],"sources":["C:/ProPython/Stock2/frontend/src/ComponentsChart/GaugeChartOfMovingAverages.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport SolidGauge from 'highcharts/modules/solid-gauge';\r\nimport ADXTotalMake from \"../ComponentsCalculations/ADXTotalMake\";\r\nimport SARTotalCalculation from \"../ComponentsCalculations/SARTotalCalculation\";\r\nimport KeltnerTotalCalculation from \"../ComponentsCalculations/KeltnerTotalCalculation\";\r\nimport IchimokuTotalCalculation from \"../ComponentsCalculations/IchimokuTotalCalculation\";\r\nimport IchimokuAnalysis1 from \"../ComponentsAnalysis/IchimokuAnalysis1\";\r\n\r\nSolidGauge(Highcharts);\r\n\r\nfunction GaugeChartOfOscillators ({ stockCode }) {\r\n    const [adxScore, setAdxScore] = useState(null);\r\n    const [sarScore, setSarScore] = useState(null);\r\n    const [keltnerScore, setKeltnerScore] = useState(null);\r\n    const [ichimokuScore, setIchimokuScore] = useState(null);\r\n    const [averageScore, setAverageScore] = useState(null);\r\n\r\n    const weights = {\r\n        adxWeights: 3,\r\n        sarWeights: 2,\r\n        keltnerWeights: 2,\r\n        ichmokuWeights: 3,\r\n    };\r\n\r\n    useEffect(() => {\r\n        if(adxScore !== null && sarScore !== null && keltnerScore !== null\r\n            && ichimokuScore !== null) {\r\n            const totalScore = (\r\n                (adxScore * weights.adxWeights) +\r\n                (sarScore * weights.sarWeights) +\r\n                (keltnerScore * weights.keltnerWeights) +\r\n                (ichimokuScore * weights.ichmokuWeights)\r\n            );\r\n            console.log(totalScore);\r\n\r\n            const totalWeight = (\r\n                weights.adxWeights +\r\n                weights.sarWeights +\r\n                weights.keltnerWeights +\r\n                weights.ichmokuWeights\r\n            );\r\n            \r\n            console.log(totalWeight);\r\n\r\n            setAverageScore((totalScore / totalWeight).toFixed(2));\r\n\r\n            console.log(setAverageScore((totalScore / totalWeight).toFixed(2)));\r\n\r\n        }\r\n    }, [adxScore, sarScore, keltnerScore, ichimokuScore]);\r\n\r\n    const chartOptions = {\r\n        chart: {\r\n            type: 'solidgauge',\r\n            height: '110%',\r\n        },\r\n        title: {\r\n            text: 'Average Score',\r\n        },\r\n        pane: {\r\n            startAngle: -90,\r\n            endAngle: 90,\r\n            background: {\r\n                innerRadius: '60%',\r\n                outerRadius: '100%',\r\n                shape: 'arc',\r\n            },\r\n        },\r\n        yAxis: {\r\n            min: 0,\r\n            max: 10, // 점수 최대값 (0-10)\r\n            stops: [\r\n                [0.1, '#DF5353'], // 빨강\r\n                [0.5, '#DDDF0D'], // 노랑\r\n                [0.9, '#55BF3B'], // 초록\r\n            ],\r\n            lineWidth: 0,\r\n            tickWidth: 0,\r\n            minorTickInterval: null,\r\n            tickAmount: 2,\r\n            labels: {\r\n                y: 16,\r\n            },\r\n        },\r\n        series: [\r\n            {\r\n                name: 'Score',\r\n                data: [averageScore !== null ? parseFloat(averageScore) : 0],\r\n                dataLabels: {\r\n                    format: '<div style=\"text-align:center\"><span style=\"font-size:25px\">{y}</span><br/>' +\r\n                            '<span style=\"font-size:12px;opacity:0.4\">점수</span></div>',\r\n                },\r\n            },\r\n        ],\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <ADXTotalMake stockCode={stockCode} onScoreCalculated={(result) => setAdxScore(result.damm)}/>\r\n            <SARTotalCalculation stockCode={stockCode} onScoreCalculated={(result) => setSarScore(result.damm)}/>\r\n            <KeltnerTotalCalculation stockCode={stockCode} onScoreCalculated={(result) => setKeltnerScore(result.damm)}/>\r\n            <IchimokuTotalCalculation stockCode={stockCode} onScoreCalculated={(result) => setIchimokuScore(result.damm)}/>\r\n\r\n            <HighchartsReact\r\n                highcharts={Highcharts}\r\n                options={chartOptions}\r\n            />\r\n        </div>\r\n    );\r\n}\r\nexport default GaugeChartOfOscillators;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}