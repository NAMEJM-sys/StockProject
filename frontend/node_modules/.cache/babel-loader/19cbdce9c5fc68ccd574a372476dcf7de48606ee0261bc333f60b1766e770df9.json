{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nfunction FetchRealTime({\n  onDataFetch\n}) {\n  _s();\n  const [stockData, setStockData] = useState([]);\n  useEffect(() => {\n    // 데이터를 불러오는 함수 정의\n    const fetchData = () => {\n      fetch('http://127.0.0.1:8000/api/post_home_realtime_by_volume/').then(response => response.json()).then(data => {\n        // 받아온 데이터가 문자열로 되어 있으면 JSON으로 변환\n        const parsedData = Object.keys(data).reduce((acc, key) => {\n          acc[key] = typeof data[key] === 'string' ? JSON.parse(data[key]) : data[key];\n          return acc;\n        }, {});\n        setStockData(parsedData); // 상태로 저장\n        if (onDataFetch) {\n          onDataFetch(parsedData); // 외부로 데이터 전달\n        }\n      }).catch(error => console.error('Error fetching stock data:', error));\n    };\n    fetchData();\n    const intervalId = setInterval(fetchData, 5000);\n    return () => clearInterval(intervalId);\n  }, [onDataFetch]); // onDataFetch가 변경되면 재실행\n  return null;\n}\n_s(FetchRealTime, \"UHMRx5rd6U+J7YyAJ82PYuAdhyc=\");\n_c = FetchRealTime;\nexport default FetchRealTime;\nvar _c;\n$RefreshReg$(_c, \"FetchRealTime\");","map":{"version":3,"names":["useState","useEffect","FetchRealTime","onDataFetch","_s","stockData","setStockData","fetchData","fetch","then","response","json","data","parsedData","Object","keys","reduce","acc","key","JSON","parse","catch","error","console","intervalId","setInterval","clearInterval","_c","$RefreshReg$"],"sources":["C:/ProPython/Stock2/frontend/src/ComponentsFetch/FetchStockOrignal/FetchRealTime.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nfunction FetchRealTime({ onDataFetch }) {\r\n    const [stockData, setStockData] = useState([]);\r\n\r\n    useEffect(() => {\r\n    // 데이터를 불러오는 함수 정의\r\n        const fetchData = () => {\r\n            fetch('http://127.0.0.1:8000/api/post_home_realtime_by_volume/')\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    // 받아온 데이터가 문자열로 되어 있으면 JSON으로 변환\r\n                    const parsedData = Object.keys(data).reduce((acc, key) => {\r\n                        acc[key] = typeof data[key] === 'string' ? JSON.parse(data[key]) : data[key];\r\n                        return acc;\r\n                    }, {});\r\n\r\n                    setStockData(parsedData); // 상태로 저장\r\n                    if (onDataFetch) {\r\n                        onDataFetch(parsedData); // 외부로 데이터 전달\r\n                    }\r\n                })\r\n                .catch(error => console.error('Error fetching stock data:', error));\r\n        };\r\n\r\n        fetchData();\r\n\r\n        const intervalId = setInterval(fetchData, 5000);\r\n\r\n        return () => clearInterval(intervalId);\r\n    }, [onDataFetch]); // onDataFetch가 변경되면 재실행\r\n    return null;\r\n}\r\n\r\nexport default FetchRealTime;"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,SAASC,aAAaA,CAAC;EAAEC;AAAY,CAAC,EAAE;EAAAC,EAAA;EACpC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAE9CC,SAAS,CAAC,MAAM;IAChB;IACI,MAAMM,SAAS,GAAGA,CAAA,KAAM;MACpBC,KAAK,CAAC,yDAAyD,CAAC,CAC3DC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;QACV;QACA,MAAMC,UAAU,GAAGC,MAAM,CAACC,IAAI,CAACH,IAAI,CAAC,CAACI,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAK;UACtDD,GAAG,CAACC,GAAG,CAAC,GAAG,OAAON,IAAI,CAACM,GAAG,CAAC,KAAK,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACR,IAAI,CAACM,GAAG,CAAC,CAAC,GAAGN,IAAI,CAACM,GAAG,CAAC;UAC5E,OAAOD,GAAG;QACd,CAAC,EAAE,CAAC,CAAC,CAAC;QAENX,YAAY,CAACO,UAAU,CAAC,CAAC,CAAC;QAC1B,IAAIV,WAAW,EAAE;UACbA,WAAW,CAACU,UAAU,CAAC,CAAC,CAAC;QAC7B;MACJ,CAAC,CAAC,CACDQ,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC,CAAC;IAC3E,CAAC;IAEDf,SAAS,CAAC,CAAC;IAEX,MAAMiB,UAAU,GAAGC,WAAW,CAAClB,SAAS,EAAE,IAAI,CAAC;IAE/C,OAAO,MAAMmB,aAAa,CAACF,UAAU,CAAC;EAC1C,CAAC,EAAE,CAACrB,WAAW,CAAC,CAAC,CAAC,CAAC;EACnB,OAAO,IAAI;AACf;AAACC,EAAA,CA9BQF,aAAa;AAAAyB,EAAA,GAAbzB,aAAa;AAgCtB,eAAeA,aAAa;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}