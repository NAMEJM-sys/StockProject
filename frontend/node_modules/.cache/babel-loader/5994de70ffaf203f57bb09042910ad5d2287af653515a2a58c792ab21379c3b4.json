{"ast":null,"code":"import chiSquaredDistributionTable from \"./chi_squared_distribution_table.js\";\nimport mean from \"./mean.js\";\n\n/**\n * The [χ2 (Chi-Squared) Goodness-of-Fit Test](http://en.wikipedia.org/wiki/Goodness_of_fit#Pearson.27s_chi-squared_test)\n * uses a measure of goodness of fit which is the sum of differences between observed and expected outcome frequencies\n * (that is, counts of observations), each squared and divided by the number of observations expected given the\n * hypothesized distribution. The resulting χ2 statistic, `chiSquared`, can be compared to the chi-squared distribution\n * to determine the goodness of fit. In order to determine the degrees of freedom of the chi-squared distribution, one\n * takes the total number of observed frequencies and subtracts the number of estimated parameters. The test statistic\n * follows, approximately, a chi-square distribution with (k − c) degrees of freedom where `k` is the number of non-empty\n * cells and `c` is the number of estimated parameters for the distribution.\n *\n * @param {Array<number>} data\n * @param {Function} distributionType a function that returns a point in a distribution:\n * for instance, binomial, bernoulli, or poisson\n * @param {number} significance\n * @returns {number} chi squared goodness of fit\n * @example\n * // Data from Poisson goodness-of-fit example 10-19 in William W. Hines & Douglas C. Montgomery,\n * // \"Probability and Statistics in Engineering and Management Science\", Wiley (1980).\n * var data1019 = [\n *     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n *     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n *     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n *     2, 2, 2, 2, 2, 2, 2, 2, 2,\n *     3, 3, 3, 3\n * ];\n * ss.chiSquaredGoodnessOfFit(data1019, ss.poissonDistribution, 0.05); //= false\n */\nfunction chiSquaredGoodnessOfFit(data, distributionType, significance) {\n  // Estimate from the sample data, a weighted mean.\n  const inputMean = mean(data);\n  // Calculated value of the χ2 statistic.\n  let chiSquared = 0;\n  // Number of hypothesized distribution parameters estimated, expected to be supplied in the distribution test.\n  // Lose one degree of freedom for estimating `lambda` from the sample data.\n  const c = 1;\n  // The hypothesized distribution.\n  // Generate the hypothesized distribution.\n  const hypothesizedDistribution = distributionType(inputMean);\n  const observedFrequencies = [];\n  const expectedFrequencies = [];\n\n  // Create an array holding a histogram from the sample data, of\n  // the form `{ value: numberOfOcurrences }`\n  for (let i = 0; i < data.length; i++) {\n    if (observedFrequencies[data[i]] === undefined) {\n      observedFrequencies[data[i]] = 0;\n    }\n    observedFrequencies[data[i]]++;\n  }\n\n  // The histogram we created might be sparse - there might be gaps\n  // between values. So we iterate through the histogram, making\n  // sure that instead of undefined, gaps have 0 values.\n  for (let i = 0; i < observedFrequencies.length; i++) {\n    if (observedFrequencies[i] === undefined) {\n      observedFrequencies[i] = 0;\n    }\n  }\n\n  // Create an array holding a histogram of expected data given the\n  // sample size and hypothesized distribution.\n  for (const k in hypothesizedDistribution) {\n    if (k in observedFrequencies) {\n      expectedFrequencies[+k] = hypothesizedDistribution[k] * data.length;\n    }\n  }\n\n  // Working backward through the expected frequencies, collapse classes\n  // if less than three observations are expected for a class.\n  // This transformation is applied to the observed frequencies as well.\n  for (let k = expectedFrequencies.length - 1; k >= 0; k--) {\n    if (expectedFrequencies[k] < 3) {\n      expectedFrequencies[k - 1] += expectedFrequencies[k];\n      expectedFrequencies.pop();\n      observedFrequencies[k - 1] += observedFrequencies[k];\n      observedFrequencies.pop();\n    }\n  }\n\n  // Iterate through the squared differences between observed & expected\n  // frequencies, accumulating the `chiSquared` statistic.\n  for (let k = 0; k < observedFrequencies.length; k++) {\n    chiSquared += Math.pow(observedFrequencies[k] - expectedFrequencies[k], 2) / expectedFrequencies[k];\n  }\n\n  // Calculate degrees of freedom for this test and look it up in the\n  // `chiSquaredDistributionTable` in order to\n  // accept or reject the goodness-of-fit of the hypothesized distribution.\n  // Degrees of freedom, calculated as (number of class intervals -\n  // number of hypothesized distribution parameters estimated - 1)\n  const degreesOfFreedom = observedFrequencies.length - c - 1;\n  return chiSquaredDistributionTable[degreesOfFreedom][significance] < chiSquared;\n}\nexport default chiSquaredGoodnessOfFit;","map":{"version":3,"names":["chiSquaredDistributionTable","mean","chiSquaredGoodnessOfFit","data","distributionType","significance","inputMean","chiSquared","c","hypothesizedDistribution","observedFrequencies","expectedFrequencies","i","length","undefined","k","pop","Math","pow","degreesOfFreedom"],"sources":["C:/ProPython/Stock2/node_modules/simple-statistics/src/chi_squared_goodness_of_fit.js"],"sourcesContent":["import chiSquaredDistributionTable from \"./chi_squared_distribution_table.js\";\nimport mean from \"./mean.js\";\n\n/**\n * The [χ2 (Chi-Squared) Goodness-of-Fit Test](http://en.wikipedia.org/wiki/Goodness_of_fit#Pearson.27s_chi-squared_test)\n * uses a measure of goodness of fit which is the sum of differences between observed and expected outcome frequencies\n * (that is, counts of observations), each squared and divided by the number of observations expected given the\n * hypothesized distribution. The resulting χ2 statistic, `chiSquared`, can be compared to the chi-squared distribution\n * to determine the goodness of fit. In order to determine the degrees of freedom of the chi-squared distribution, one\n * takes the total number of observed frequencies and subtracts the number of estimated parameters. The test statistic\n * follows, approximately, a chi-square distribution with (k − c) degrees of freedom where `k` is the number of non-empty\n * cells and `c` is the number of estimated parameters for the distribution.\n *\n * @param {Array<number>} data\n * @param {Function} distributionType a function that returns a point in a distribution:\n * for instance, binomial, bernoulli, or poisson\n * @param {number} significance\n * @returns {number} chi squared goodness of fit\n * @example\n * // Data from Poisson goodness-of-fit example 10-19 in William W. Hines & Douglas C. Montgomery,\n * // \"Probability and Statistics in Engineering and Management Science\", Wiley (1980).\n * var data1019 = [\n *     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n *     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n *     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n *     2, 2, 2, 2, 2, 2, 2, 2, 2,\n *     3, 3, 3, 3\n * ];\n * ss.chiSquaredGoodnessOfFit(data1019, ss.poissonDistribution, 0.05); //= false\n */\nfunction chiSquaredGoodnessOfFit(data, distributionType, significance) {\n    // Estimate from the sample data, a weighted mean.\n    const inputMean = mean(data);\n    // Calculated value of the χ2 statistic.\n    let chiSquared = 0;\n    // Number of hypothesized distribution parameters estimated, expected to be supplied in the distribution test.\n    // Lose one degree of freedom for estimating `lambda` from the sample data.\n    const c = 1;\n    // The hypothesized distribution.\n    // Generate the hypothesized distribution.\n    const hypothesizedDistribution = distributionType(inputMean);\n    const observedFrequencies = [];\n    const expectedFrequencies = [];\n\n    // Create an array holding a histogram from the sample data, of\n    // the form `{ value: numberOfOcurrences }`\n    for (let i = 0; i < data.length; i++) {\n        if (observedFrequencies[data[i]] === undefined) {\n            observedFrequencies[data[i]] = 0;\n        }\n        observedFrequencies[data[i]]++;\n    }\n\n    // The histogram we created might be sparse - there might be gaps\n    // between values. So we iterate through the histogram, making\n    // sure that instead of undefined, gaps have 0 values.\n    for (let i = 0; i < observedFrequencies.length; i++) {\n        if (observedFrequencies[i] === undefined) {\n            observedFrequencies[i] = 0;\n        }\n    }\n\n    // Create an array holding a histogram of expected data given the\n    // sample size and hypothesized distribution.\n    for (const k in hypothesizedDistribution) {\n        if (k in observedFrequencies) {\n            expectedFrequencies[+k] = hypothesizedDistribution[k] * data.length;\n        }\n    }\n\n    // Working backward through the expected frequencies, collapse classes\n    // if less than three observations are expected for a class.\n    // This transformation is applied to the observed frequencies as well.\n    for (let k = expectedFrequencies.length - 1; k >= 0; k--) {\n        if (expectedFrequencies[k] < 3) {\n            expectedFrequencies[k - 1] += expectedFrequencies[k];\n            expectedFrequencies.pop();\n\n            observedFrequencies[k - 1] += observedFrequencies[k];\n            observedFrequencies.pop();\n        }\n    }\n\n    // Iterate through the squared differences between observed & expected\n    // frequencies, accumulating the `chiSquared` statistic.\n    for (let k = 0; k < observedFrequencies.length; k++) {\n        chiSquared +=\n            Math.pow(observedFrequencies[k] - expectedFrequencies[k], 2) /\n            expectedFrequencies[k];\n    }\n\n    // Calculate degrees of freedom for this test and look it up in the\n    // `chiSquaredDistributionTable` in order to\n    // accept or reject the goodness-of-fit of the hypothesized distribution.\n    // Degrees of freedom, calculated as (number of class intervals -\n    // number of hypothesized distribution parameters estimated - 1)\n    const degreesOfFreedom = observedFrequencies.length - c - 1;\n    return (\n        chiSquaredDistributionTable[degreesOfFreedom][significance] < chiSquared\n    );\n}\n\nexport default chiSquaredGoodnessOfFit;\n"],"mappings":"AAAA,OAAOA,2BAA2B,MAAM,qCAAqC;AAC7E,OAAOC,IAAI,MAAM,WAAW;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,uBAAuBA,CAACC,IAAI,EAAEC,gBAAgB,EAAEC,YAAY,EAAE;EACnE;EACA,MAAMC,SAAS,GAAGL,IAAI,CAACE,IAAI,CAAC;EAC5B;EACA,IAAII,UAAU,GAAG,CAAC;EAClB;EACA;EACA,MAAMC,CAAC,GAAG,CAAC;EACX;EACA;EACA,MAAMC,wBAAwB,GAAGL,gBAAgB,CAACE,SAAS,CAAC;EAC5D,MAAMI,mBAAmB,GAAG,EAAE;EAC9B,MAAMC,mBAAmB,GAAG,EAAE;;EAE9B;EACA;EACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,IAAI,CAACU,MAAM,EAAED,CAAC,EAAE,EAAE;IAClC,IAAIF,mBAAmB,CAACP,IAAI,CAACS,CAAC,CAAC,CAAC,KAAKE,SAAS,EAAE;MAC5CJ,mBAAmB,CAACP,IAAI,CAACS,CAAC,CAAC,CAAC,GAAG,CAAC;IACpC;IACAF,mBAAmB,CAACP,IAAI,CAACS,CAAC,CAAC,CAAC,EAAE;EAClC;;EAEA;EACA;EACA;EACA,KAAK,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,mBAAmB,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;IACjD,IAAIF,mBAAmB,CAACE,CAAC,CAAC,KAAKE,SAAS,EAAE;MACtCJ,mBAAmB,CAACE,CAAC,CAAC,GAAG,CAAC;IAC9B;EACJ;;EAEA;EACA;EACA,KAAK,MAAMG,CAAC,IAAIN,wBAAwB,EAAE;IACtC,IAAIM,CAAC,IAAIL,mBAAmB,EAAE;MAC1BC,mBAAmB,CAAC,CAACI,CAAC,CAAC,GAAGN,wBAAwB,CAACM,CAAC,CAAC,GAAGZ,IAAI,CAACU,MAAM;IACvE;EACJ;;EAEA;EACA;EACA;EACA,KAAK,IAAIE,CAAC,GAAGJ,mBAAmB,CAACE,MAAM,GAAG,CAAC,EAAEE,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;IACtD,IAAIJ,mBAAmB,CAACI,CAAC,CAAC,GAAG,CAAC,EAAE;MAC5BJ,mBAAmB,CAACI,CAAC,GAAG,CAAC,CAAC,IAAIJ,mBAAmB,CAACI,CAAC,CAAC;MACpDJ,mBAAmB,CAACK,GAAG,CAAC,CAAC;MAEzBN,mBAAmB,CAACK,CAAC,GAAG,CAAC,CAAC,IAAIL,mBAAmB,CAACK,CAAC,CAAC;MACpDL,mBAAmB,CAACM,GAAG,CAAC,CAAC;IAC7B;EACJ;;EAEA;EACA;EACA,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,mBAAmB,CAACG,MAAM,EAAEE,CAAC,EAAE,EAAE;IACjDR,UAAU,IACNU,IAAI,CAACC,GAAG,CAACR,mBAAmB,CAACK,CAAC,CAAC,GAAGJ,mBAAmB,CAACI,CAAC,CAAC,EAAE,CAAC,CAAC,GAC5DJ,mBAAmB,CAACI,CAAC,CAAC;EAC9B;;EAEA;EACA;EACA;EACA;EACA;EACA,MAAMI,gBAAgB,GAAGT,mBAAmB,CAACG,MAAM,GAAGL,CAAC,GAAG,CAAC;EAC3D,OACIR,2BAA2B,CAACmB,gBAAgB,CAAC,CAACd,YAAY,CAAC,GAAGE,UAAU;AAEhF;AAEA,eAAeL,uBAAuB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}