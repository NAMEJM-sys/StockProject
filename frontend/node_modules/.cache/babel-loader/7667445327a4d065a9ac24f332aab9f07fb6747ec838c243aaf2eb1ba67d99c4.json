{"ast":null,"code":"var _jsxFileName = \"C:\\\\ProPython\\\\Stock2\\\\frontend\\\\src\\\\ComponentsCalculations\\\\MACDCalculations1.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport FetchMACDData from '../ComponentsFetch/FetchMACDData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MACDCalculations1({\n  stockCode,\n  onScoreCalculated\n}) {\n  _s();\n  const [macdData, setMACDData] = useState([]);\n  const calculateScore = (macdData, period = 14) => {\n    if (macdData.length < period + 1) {\n      return null;\n    }\n    const lastIndex = macdData.length - 1;\n    const currentMACD = macdData[lastIndex].MACD_Line;\n    const currentSignal = macdData[lastIndex].Signal_Line;\n    const prevMACD = macdData[lastIndex - 1].MACD_Line;\n    const prevSignal = macdData[lastIndex - 1].Signal_Line;\n    let score = 5; // 기본 보통\n\n    // 1. MACD와 Signal Line의 교차 분석\n    if (prevMACD < prevSignal && currentMACD > currentSignal) {\n      score = 3; // 매수\n    } else if (prevMACD > prevSignal && currentMACD < currentSignal) {\n      score = 7; // 매도\n    }\n\n    // 2. 크로스오버 예상 시점 계산\n    const macdIndices = [];\n    const macdValues = [];\n    const signalValues = [];\n    for (let i = lastIndex - period + 1; i <= lastIndex; i++) {\n      macdIndices.push(i);\n      macdValues.push(macdData[i].MACD_Line);\n      signalValues.push(macdData[i].Signal_Line);\n    }\n\n    // 선형 회귀 계산\n    const n = period;\n    const sumX = macdIndices.reduce((a, b) => a + b, 0);\n    const sumYMacd = macdValues.reduce((a, b) => a + b, 0);\n    const sumYSignal = signalValues.reduce((a, b) => a + b, 0);\n    const sumXYMacd = macdIndices.reduce((sum, x, i) => sum + x * macdValues[i], 0);\n    const sumXYSignal = macdIndices.reduce((sum, x, i) => sum + x * signalValues[i], 0);\n    const sumX2 = macdIndices.reduce((sum, x) => sum + x * x, 0);\n    const slopeMacd = (n * sumXYMacd - sumX * sumYMacd) / (n * sumX2 - sumX * sumX);\n    const interceptMacd = (sumYMacd - slopeMacd * sumX) / n;\n    const slopeSignal = (n * sumXYSignal - sumX * sumYSignal) / (n * sumX2 - sumX * sumX);\n    const interceptSignal = (sumYSignal - slopeSignal * sumX) / n;\n    const a = slopeMacd - slopeSignal;\n    const b = interceptMacd - interceptSignal;\n    let daysToCrossover = null;\n    if (a !== 0) {\n      const t_crossover = -b / a;\n      daysToCrossover = t_crossover - lastIndex;\n      if (daysToCrossover >= 0 && daysToCrossover <= 3) {\n        if (slopeMacd > slopeSignal) {\n          score -= 1; // 매수 쪽으로\n        } else {\n          score += 1; // 매도 쪽으로\n        }\n      }\n    }\n\n    // 3. MACD 히스토그램 추세 분석\n    const currentHistogram = macdData[lastIndex].Histogram;\n    const prevHistogram = macdData[lastIndex - 1].Histogram;\n    if (currentHistogram > prevHistogram) {\n      score -= 1; // 매수 쪽으로\n    } else if (currentHistogram < prevHistogram) {\n      score += 1; // 매도 쪽으로\n    }\n\n    // 점수 범위 조정\n    score = Math.max(1, Math.min(10, score));\n    return score;\n  };\n  useEffect(() => {\n    if (macdData.length > 0) {\n      const score = calculateScore(macdData);\n      if (score !== null && onScoreCalculated) {\n        onScoreCalculated(score);\n      }\n    }\n  }, [macdData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(FetchMACDData, {\n      stockCode: stockCode,\n      onMACDFetch: setMACDData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 9\n  }, this);\n}\n_s(MACDCalculations1, \"EYz31eZL7osLf17TcCvP4CHG3+k=\");\n_c = MACDCalculations1;\nexport default MACDCalculations1;\nvar _c;\n$RefreshReg$(_c, \"MACDCalculations1\");","map":{"version":3,"names":["React","useState","useEffect","FetchMACDData","jsxDEV","_jsxDEV","MACDCalculations1","stockCode","onScoreCalculated","_s","macdData","setMACDData","calculateScore","period","length","lastIndex","currentMACD","MACD_Line","currentSignal","Signal_Line","prevMACD","prevSignal","score","macdIndices","macdValues","signalValues","i","push","n","sumX","reduce","a","b","sumYMacd","sumYSignal","sumXYMacd","sum","x","sumXYSignal","sumX2","slopeMacd","interceptMacd","slopeSignal","interceptSignal","daysToCrossover","t_crossover","currentHistogram","Histogram","prevHistogram","Math","max","min","children","onMACDFetch","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/ProPython/Stock2/frontend/src/ComponentsCalculations/MACDCalculations1.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport FetchMACDData from '../ComponentsFetch/FetchMACDData';\r\n\r\nfunction MACDCalculations1({ stockCode, onScoreCalculated }) {\r\n    const [macdData, setMACDData] = useState([]);\r\n\r\n    const calculateScore = (macdData, period = 14) => {\r\n        if (macdData.length < period + 1) {\r\n            return null;\r\n        }\r\n\r\n        const lastIndex = macdData.length - 1;\r\n        const currentMACD = macdData[lastIndex].MACD_Line;\r\n        const currentSignal = macdData[lastIndex].Signal_Line;\r\n        const prevMACD = macdData[lastIndex - 1].MACD_Line;\r\n        const prevSignal = macdData[lastIndex - 1].Signal_Line;\r\n\r\n        let score = 5; // 기본 보통\r\n\r\n        // 1. MACD와 Signal Line의 교차 분석\r\n        if (prevMACD < prevSignal && currentMACD > currentSignal) {\r\n            score = 3; // 매수\r\n        } else if (prevMACD > prevSignal && currentMACD < currentSignal) {\r\n            score = 7; // 매도\r\n        }\r\n\r\n        // 2. 크로스오버 예상 시점 계산\r\n        const macdIndices = [];\r\n        const macdValues = [];\r\n        const signalValues = [];\r\n\r\n        for (let i = lastIndex - period + 1; i <= lastIndex; i++) {\r\n            macdIndices.push(i);\r\n            macdValues.push(macdData[i].MACD_Line);\r\n            signalValues.push(macdData[i].Signal_Line);\r\n        }\r\n\r\n        // 선형 회귀 계산\r\n        const n = period;\r\n        const sumX = macdIndices.reduce((a, b) => a + b, 0);\r\n        const sumYMacd = macdValues.reduce((a, b) => a + b, 0);\r\n        const sumYSignal = signalValues.reduce((a, b) => a + b, 0);\r\n        const sumXYMacd = macdIndices.reduce((sum, x, i) => sum + x * macdValues[i], 0);\r\n        const sumXYSignal = macdIndices.reduce((sum, x, i) => sum + x * signalValues[i], 0);\r\n        const sumX2 = macdIndices.reduce((sum, x) => sum + x * x, 0);\r\n\r\n        const slopeMacd = (n * sumXYMacd - sumX * sumYMacd) / (n * sumX2 - sumX * sumX);\r\n        const interceptMacd = (sumYMacd - slopeMacd * sumX) / n;\r\n\r\n        const slopeSignal = (n * sumXYSignal - sumX * sumYSignal) / (n * sumX2 - sumX * sumX);\r\n        const interceptSignal = (sumYSignal - slopeSignal * sumX) / n;\r\n\r\n        const a = slopeMacd - slopeSignal;\r\n        const b = interceptMacd - interceptSignal;\r\n\r\n        let daysToCrossover = null;\r\n\r\n        if (a !== 0) {\r\n            const t_crossover = -b / a;\r\n            daysToCrossover = t_crossover - lastIndex;\r\n            if (daysToCrossover >= 0 && daysToCrossover <= 3) {\r\n                if (slopeMacd > slopeSignal) {\r\n                    score -= 1; // 매수 쪽으로\r\n                } else {\r\n                    score += 1; // 매도 쪽으로\r\n                }\r\n            }\r\n        }\r\n\r\n        // 3. MACD 히스토그램 추세 분석\r\n        const currentHistogram = macdData[lastIndex].Histogram;\r\n        const prevHistogram = macdData[lastIndex - 1].Histogram;\r\n\r\n        if (currentHistogram > prevHistogram) {\r\n            score -= 1; // 매수 쪽으로\r\n        } else if (currentHistogram < prevHistogram) {\r\n            score += 1; // 매도 쪽으로\r\n        }\r\n\r\n        // 점수 범위 조정\r\n        score = Math.max(1, Math.min(10, score));\r\n\r\n        return score;\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (macdData.length > 0) {\r\n            const score = calculateScore(macdData);\r\n            if (score !== null && onScoreCalculated) {\r\n                onScoreCalculated(score);\r\n            }\r\n        }\r\n    }, [macdData]);\r\n\r\n    return (\r\n        <div>\r\n            <FetchMACDData stockCode={stockCode} onMACDFetch={setMACDData} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MACDCalculations1;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}