{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nfunction FetchRealTimeDataForCloseChart({\n  stockCode,\n  onSDFCFetch\n}) {\n  _s();\n  const [stockData, setStockData] = useState([]);\n  const [initialized, setInitialized] = useState(false);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(`http://127.0.0.1:8000/api/post_stock_real_data_for_code/${stockCode}/`);\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n        if (JSON.stringify(data) !== JSON.stringify(stockData)) {\n          setStockData(data);\n          if (onSDFCFetch) {\n            onSDFCFetch(data);\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching chart data:', error);\n      }\n    };\n\n    // 실시간 데이터를 주기적으로 가져오기 전에 차트를 맞춰서 한 번 호출\n    if (!initialized) {\n      fetchData();\n      setInitialized(true);\n    }\n    const intervalId = setInterval(fetchData, 10000); // 10초 주기\n\n    // 컴포넌트 언마운트 시 인터벌 클리어\n    return () => clearInterval(intervalId);\n  }, [stockCode, onSDFCFetch]);\n  return null;\n}\n_s(FetchRealTimeDataForCloseChart, \"USBDLEtfoTWdNq/FH5XzES5mZlE=\");\n_c = FetchRealTimeDataForCloseChart;\nexport default FetchRealTimeDataForCloseChart;\nvar _c;\n$RefreshReg$(_c, \"FetchRealTimeDataForCloseChart\");","map":{"version":3,"names":["useState","useEffect","FetchRealTimeDataForCloseChart","stockCode","onSDFCFetch","_s","stockData","setStockData","initialized","setInitialized","fetchData","response","fetch","ok","Error","data","json","JSON","stringify","error","console","intervalId","setInterval","clearInterval","_c","$RefreshReg$"],"sources":["C:/ProPython/Stock2/frontend/src/ComponentsFetch/FetchStockOrignal/FetchRealTimeDataForCloseChart.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nfunction FetchRealTimeDataForCloseChart({ stockCode, onSDFCFetch }) {\r\n    const [stockData, setStockData] = useState([]);\r\n    const [initialized, setInitialized] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const response = await fetch(`http://127.0.0.1:8000/api/post_stock_real_data_for_code/${stockCode}/`);\r\n                if (!response.ok) {\r\n                    throw new Error('Network response was not ok');\r\n                }\r\n                const data = await response.json();\r\n                if (JSON.stringify(data) !== JSON.stringify(stockData)) {\r\n                    setStockData(data);\r\n                    if (onSDFCFetch) {\r\n                        onSDFCFetch(data);\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching chart data:', error);\r\n            }\r\n        };\r\n\r\n        // 실시간 데이터를 주기적으로 가져오기 전에 차트를 맞춰서 한 번 호출\r\n        if (!initialized) {\r\n            fetchData();\r\n            setInitialized(true);\r\n        }\r\n\r\n        const intervalId = setInterval(fetchData, 10000); // 10초 주기\r\n\r\n        // 컴포넌트 언마운트 시 인터벌 클리어\r\n        return () => clearInterval(intervalId);\r\n    }, [stockCode, onSDFCFetch]);\r\n\r\n    return null;\r\n}\r\n\r\nexport default FetchRealTimeDataForCloseChart;"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,SAASC,8BAA8BA,CAAC;EAAEC,SAAS;EAAEC;AAAY,CAAC,EAAE;EAAAC,EAAA;EAChE,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACQ,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAErDC,SAAS,CAAC,MAAM;IACZ,MAAMS,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,2DAA2DT,SAAS,GAAG,CAAC;QACrG,IAAI,CAACQ,QAAQ,CAACE,EAAE,EAAE;UACd,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;QAClD;QACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QAClC,IAAIC,IAAI,CAACC,SAAS,CAACH,IAAI,CAAC,KAAKE,IAAI,CAACC,SAAS,CAACZ,SAAS,CAAC,EAAE;UACpDC,YAAY,CAACQ,IAAI,CAAC;UAClB,IAAIX,WAAW,EAAE;YACbA,WAAW,CAACW,IAAI,CAAC;UACrB;QACJ;MACJ,CAAC,CAAC,OAAOI,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACtD;IACJ,CAAC;;IAED;IACA,IAAI,CAACX,WAAW,EAAE;MACdE,SAAS,CAAC,CAAC;MACXD,cAAc,CAAC,IAAI,CAAC;IACxB;IAEA,MAAMY,UAAU,GAAGC,WAAW,CAACZ,SAAS,EAAE,KAAK,CAAC,CAAC,CAAC;;IAElD;IACA,OAAO,MAAMa,aAAa,CAACF,UAAU,CAAC;EAC1C,CAAC,EAAE,CAAClB,SAAS,EAAEC,WAAW,CAAC,CAAC;EAE5B,OAAO,IAAI;AACf;AAACC,EAAA,CApCQH,8BAA8B;AAAAsB,EAAA,GAA9BtB,8BAA8B;AAsCvC,eAAeA,8BAA8B;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}