{"ast":null,"code":"import mean from \"./mean.js\";\n\n/**\n * The sum of deviations to the Nth power.\n * When n=2 it's the sum of squared deviations.\n * When n=3 it's the sum of cubed deviations.\n *\n * @param {Array<number>} x\n * @param {number} n power\n * @returns {number} sum of nth power deviations\n *\n * @example\n * var input = [1, 2, 3];\n * // since the variance of a set is the mean squared\n * // deviations, we can calculate that with sumNthPowerDeviations:\n * sumNthPowerDeviations(input, 2) / input.length;\n */\nfunction sumNthPowerDeviations(x, n) {\n  const meanValue = mean(x);\n  let sum = 0;\n  let tempValue;\n  let i;\n\n  // This is an optimization: when n is 2 (we're computing a number squared),\n  // multiplying the number by itself is significantly faster than using\n  // the Math.pow method.\n  if (n === 2) {\n    for (i = 0; i < x.length; i++) {\n      tempValue = x[i] - meanValue;\n      sum += tempValue * tempValue;\n    }\n  } else {\n    for (i = 0; i < x.length; i++) {\n      sum += Math.pow(x[i] - meanValue, n);\n    }\n  }\n  return sum;\n}\nexport default sumNthPowerDeviations;","map":{"version":3,"names":["mean","sumNthPowerDeviations","x","n","meanValue","sum","tempValue","i","length","Math","pow"],"sources":["C:/ProPython/Stock2/node_modules/simple-statistics/src/sum_nth_power_deviations.js"],"sourcesContent":["import mean from \"./mean.js\";\n\n/**\n * The sum of deviations to the Nth power.\n * When n=2 it's the sum of squared deviations.\n * When n=3 it's the sum of cubed deviations.\n *\n * @param {Array<number>} x\n * @param {number} n power\n * @returns {number} sum of nth power deviations\n *\n * @example\n * var input = [1, 2, 3];\n * // since the variance of a set is the mean squared\n * // deviations, we can calculate that with sumNthPowerDeviations:\n * sumNthPowerDeviations(input, 2) / input.length;\n */\nfunction sumNthPowerDeviations(x, n) {\n    const meanValue = mean(x);\n    let sum = 0;\n    let tempValue;\n    let i;\n\n    // This is an optimization: when n is 2 (we're computing a number squared),\n    // multiplying the number by itself is significantly faster than using\n    // the Math.pow method.\n    if (n === 2) {\n        for (i = 0; i < x.length; i++) {\n            tempValue = x[i] - meanValue;\n            sum += tempValue * tempValue;\n        }\n    } else {\n        for (i = 0; i < x.length; i++) {\n            sum += Math.pow(x[i] - meanValue, n);\n        }\n    }\n\n    return sum;\n}\n\nexport default sumNthPowerDeviations;\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,WAAW;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,qBAAqBA,CAACC,CAAC,EAAEC,CAAC,EAAE;EACjC,MAAMC,SAAS,GAAGJ,IAAI,CAACE,CAAC,CAAC;EACzB,IAAIG,GAAG,GAAG,CAAC;EACX,IAAIC,SAAS;EACb,IAAIC,CAAC;;EAEL;EACA;EACA;EACA,IAAIJ,CAAC,KAAK,CAAC,EAAE;IACT,KAAKI,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,CAAC,CAACM,MAAM,EAAED,CAAC,EAAE,EAAE;MAC3BD,SAAS,GAAGJ,CAAC,CAACK,CAAC,CAAC,GAAGH,SAAS;MAC5BC,GAAG,IAAIC,SAAS,GAAGA,SAAS;IAChC;EACJ,CAAC,MAAM;IACH,KAAKC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,CAAC,CAACM,MAAM,EAAED,CAAC,EAAE,EAAE;MAC3BF,GAAG,IAAII,IAAI,CAACC,GAAG,CAACR,CAAC,CAACK,CAAC,CAAC,GAAGH,SAAS,EAAED,CAAC,CAAC;IACxC;EACJ;EAEA,OAAOE,GAAG;AACd;AAEA,eAAeJ,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}