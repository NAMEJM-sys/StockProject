{"ast":null,"code":"/**\n * Implementation of [Heap's Algorithm](https://en.wikipedia.org/wiki/Heap%27s_algorithm)\n * for generating permutations.\n *\n * @param {Array} elements any type of data\n * @returns {Array<Array>} array of permutations\n */\nfunction permutationsHeap(elements) {\n  const indexes = new Array(elements.length);\n  const permutations = [elements.slice()];\n  for (let i = 0; i < elements.length; i++) {\n    indexes[i] = 0;\n  }\n  for (let i = 0; i < elements.length;) {\n    if (indexes[i] < i) {\n      // At odd indexes, swap from indexes[i] instead\n      // of from the beginning of the array\n      let swapFrom = 0;\n      if (i % 2 !== 0) {\n        swapFrom = indexes[i];\n      }\n\n      // swap between swapFrom and i, using\n      // a temporary variable as storage.\n      const temp = elements[swapFrom];\n      elements[swapFrom] = elements[i];\n      elements[i] = temp;\n      permutations.push(elements.slice());\n      indexes[i]++;\n      i = 0;\n    } else {\n      indexes[i] = 0;\n      i++;\n    }\n  }\n  return permutations;\n}\nexport default permutationsHeap;","map":{"version":3,"names":["permutationsHeap","elements","indexes","Array","length","permutations","slice","i","swapFrom","temp","push"],"sources":["C:/ProPython/Stock2/node_modules/simple-statistics/src/permutations_heap.js"],"sourcesContent":["/**\n * Implementation of [Heap's Algorithm](https://en.wikipedia.org/wiki/Heap%27s_algorithm)\n * for generating permutations.\n *\n * @param {Array} elements any type of data\n * @returns {Array<Array>} array of permutations\n */\nfunction permutationsHeap(elements) {\n    const indexes = new Array(elements.length);\n    const permutations = [elements.slice()];\n\n    for (let i = 0; i < elements.length; i++) {\n        indexes[i] = 0;\n    }\n\n    for (let i = 0; i < elements.length; ) {\n        if (indexes[i] < i) {\n            // At odd indexes, swap from indexes[i] instead\n            // of from the beginning of the array\n            let swapFrom = 0;\n            if (i % 2 !== 0) {\n                swapFrom = indexes[i];\n            }\n\n            // swap between swapFrom and i, using\n            // a temporary variable as storage.\n            const temp = elements[swapFrom];\n            elements[swapFrom] = elements[i];\n            elements[i] = temp;\n\n            permutations.push(elements.slice());\n            indexes[i]++;\n            i = 0;\n        } else {\n            indexes[i] = 0;\n            i++;\n        }\n    }\n\n    return permutations;\n}\n\nexport default permutationsHeap;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,gBAAgBA,CAACC,QAAQ,EAAE;EAChC,MAAMC,OAAO,GAAG,IAAIC,KAAK,CAACF,QAAQ,CAACG,MAAM,CAAC;EAC1C,MAAMC,YAAY,GAAG,CAACJ,QAAQ,CAACK,KAAK,CAAC,CAAC,CAAC;EAEvC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,QAAQ,CAACG,MAAM,EAAEG,CAAC,EAAE,EAAE;IACtCL,OAAO,CAACK,CAAC,CAAC,GAAG,CAAC;EAClB;EAEA,KAAK,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,QAAQ,CAACG,MAAM,GAAI;IACnC,IAAIF,OAAO,CAACK,CAAC,CAAC,GAAGA,CAAC,EAAE;MAChB;MACA;MACA,IAAIC,QAAQ,GAAG,CAAC;MAChB,IAAID,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;QACbC,QAAQ,GAAGN,OAAO,CAACK,CAAC,CAAC;MACzB;;MAEA;MACA;MACA,MAAME,IAAI,GAAGR,QAAQ,CAACO,QAAQ,CAAC;MAC/BP,QAAQ,CAACO,QAAQ,CAAC,GAAGP,QAAQ,CAACM,CAAC,CAAC;MAChCN,QAAQ,CAACM,CAAC,CAAC,GAAGE,IAAI;MAElBJ,YAAY,CAACK,IAAI,CAACT,QAAQ,CAACK,KAAK,CAAC,CAAC,CAAC;MACnCJ,OAAO,CAACK,CAAC,CAAC,EAAE;MACZA,CAAC,GAAG,CAAC;IACT,CAAC,MAAM;MACHL,OAAO,CAACK,CAAC,CAAC,GAAG,CAAC;MACdA,CAAC,EAAE;IACP;EACJ;EAEA,OAAOF,YAAY;AACvB;AAEA,eAAeL,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}