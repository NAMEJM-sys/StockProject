{"ast":null,"code":"var _jsxFileName = \"C:\\\\ProPython\\\\Stock2\\\\frontend\\\\src\\\\ComponentsCalculations\\\\StochasticCalculations1.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport FetchStochasticData from \"../ComponentsFetch/FetchStochasticData\";\nimport FetchStockDataForCode from \"../ComponentsFetch/FetchStockDataForCode\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst findSwingLows = (data, range, valueKey) => {\n  let swingLows = [];\n  for (let i = range; i < data.length - range; i++) {\n    let isSwingLow = true;\n    for (let j = 1; j <= range; j++) {\n      if (data[i - j][valueKey] <= data[i][valueKey] || data[i + j][valueKey] <= data[i][valueKey]) {\n        isSwingLow = false;\n        break;\n      }\n    }\n    if (isSwingLow) {\n      swingLows.push({\n        value: data[i][valueKey],\n        index: i,\n        date: data[i].date\n      });\n    }\n  }\n  return swingLows;\n};\nconst findSwingHighs = (data, range, valueKey) => {\n  let swingHighs = [];\n  for (let i = range; i < data.length - range; i++) {\n    let isSwingHigh = true;\n    for (let j = 1; j <= range; j++) {\n      if (data[i - j][valueKey] >= data[i][valueKey] || data[i + j][valueKey] >= data[i][valueKey]) {\n        isSwingHigh = false;\n        break;\n      }\n    }\n    if (isSwingHigh) {\n      swingHighs.push({\n        value: data[i][valueKey],\n        index: i,\n        date: data[i].date\n      });\n    }\n  }\n  return swingHighs;\n};\nfunction StochasticCalculations({\n  stockCode,\n  onScoreCalculated\n}) {\n  _s();\n  const [stochasticData, setStochasticData] = useState([]);\n  const [stockData, setStockData] = useState([]);\n  const calculateDivergenceAndTrendScore = () => {\n    const swingRange = 2;\n    const dataLength = Math.min(stochasticData.length, stockData.length);\n    if (dataLength < swingRange * 2) {\n      if (onScoreCalculated) {\n        onScoreCalculated(null);\n      }\n      return;\n    }\n    const priceLows = findSwingLows(stockData, swingRange, 'close');\n    const priceHighs = findSwingHighs(stockData, swingRange, 'close');\n    const stochLows = findSwingLows(stochasticData, swingRange, 'perK');\n    const stochHighs = findSwingHighs(stochasticData, swingRange, 'perK');\n    let divergenceType = null; // 'bullish', 'bearish', null\n    let trendSignal = null; // 'uptrend', 'downtrend', null\n\n    // 상승 다이버전스 감지 (가격 하락 + 스토캐스틱 상승)\n    if (priceLows.length >= 2 && stochLows.length >= 2) {\n      const prevPriceLow = priceLows[priceLows.length - 2];\n      const recentPriceLow = priceLows[priceLows.length - 1];\n      const prevStochLow = stochLows.find(stochLow => stochLow.date === prevPriceLow.date);\n      const recentStochLow = stochLows.find(stochLow => stochLow.date === recentPriceLow.date);\n      if (prevStochLow && recentStochLow) {\n        if (recentPriceLow.value < prevPriceLow.value && recentStochLow.value > prevStochLow.value) {\n          divergenceType = 'bullish';\n        }\n      }\n    }\n\n    // 하락 다이버전스 감지 (가격 상승 + 스토캐스틱 하락)\n    if (priceHighs.length >= 2 && stochHighs.length >= 2) {\n      const prevPriceHigh = priceHighs[priceHighs.length - 2];\n      const recentPriceHigh = priceHighs[priceHighs.length - 1];\n      const prevStochHigh = stochHighs.find(stochHigh => stochHigh.date === prevPriceHigh.date);\n      const recentStochHigh = stochHighs.find(stochHigh => stochHigh.date === recentPriceHigh.date);\n      if (prevStochHigh && recentStochHigh) {\n        if (recentPriceHigh.value > prevPriceHigh.value && recentStochHigh.value < prevStochHigh.value) {\n          divergenceType = 'bearish';\n        }\n      }\n    }\n\n    // 상승/하락 설정 감지\n    if (priceLows.length >= 2 && stochHighs.length >= 2) {\n      const recentPriceLow = priceLows[priceLows.length - 1];\n      const recentStochHigh = stochHighs[stochHighs.length - 1];\n      if (recentPriceLow.value < priceLows[priceLows.length - 2].value && recentStochHigh.value > stochHighs[stochHighs.length - 2].value) {\n        trendSignal = 'uptrend'; // 상승 설정\n      }\n    }\n    if (priceHighs.length >= 2 && stochLows.length >= 2) {\n      const recentPriceHigh = priceHighs[priceHighs.length - 1];\n      const recentStochLow = stochLows[stochLows.length - 1];\n      if (recentPriceHigh.value > priceHighs[priceHighs.length - 2].value && recentStochLow.value < stochLows[stochLows.length - 2].value) {\n        trendSignal = 'downtrend'; // 하락 설정\n      }\n    }\n\n    // 점수 부여\n    let calculatedScore = 5; // 기본 보통\n    if (divergenceType === 'bullish' || trendSignal === 'uptrend') {\n      calculatedScore = 3; // 매수\n    } else if (divergenceType === 'bearish' || trendSignal === 'downtrend') {\n      calculatedScore = 7; // 매도\n    }\n    if (onScoreCalculated) {\n      onScoreCalculated(calculatedScore);\n    }\n  };\n  useEffect(() => {\n    if (stochasticData.length > 0 && stockData.length > 0) {\n      calculateDivergenceAndTrendScore();\n    }\n  }, [stochasticData, stockData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(FetchStochasticData, {\n      stockCode: stockCode,\n      onStochasticFetch: setStochasticData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FetchStockDataForCode, {\n      stockCode: stockCode,\n      onSDFCFetch: setStockData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 9\n  }, this);\n}\n_s(StochasticCalculations, \"snMxMT5pwDBNv8MZR0P4lopGsH0=\");\n_c = StochasticCalculations;\nexport default StochasticCalculations;\nvar _c;\n$RefreshReg$(_c, \"StochasticCalculations\");","map":{"version":3,"names":["React","useState","useEffect","FetchStochasticData","FetchStockDataForCode","jsxDEV","_jsxDEV","findSwingLows","data","range","valueKey","swingLows","i","length","isSwingLow","j","push","value","index","date","findSwingHighs","swingHighs","isSwingHigh","StochasticCalculations","stockCode","onScoreCalculated","_s","stochasticData","setStochasticData","stockData","setStockData","calculateDivergenceAndTrendScore","swingRange","dataLength","Math","min","priceLows","priceHighs","stochLows","stochHighs","divergenceType","trendSignal","prevPriceLow","recentPriceLow","prevStochLow","find","stochLow","recentStochLow","prevPriceHigh","recentPriceHigh","prevStochHigh","stochHigh","recentStochHigh","calculatedScore","children","onStochasticFetch","fileName","_jsxFileName","lineNumber","columnNumber","onSDFCFetch","_c","$RefreshReg$"],"sources":["C:/ProPython/Stock2/frontend/src/ComponentsCalculations/StochasticCalculations1.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport FetchStochasticData from \"../ComponentsFetch/FetchStochasticData\";\r\nimport FetchStockDataForCode from \"../ComponentsFetch/FetchStockDataForCode\";\r\n\r\nconst findSwingLows = (data, range, valueKey) => {\r\n    let swingLows = [];\r\n    for (let i = range; i < data.length - range; i++) {\r\n        let isSwingLow = true;\r\n        for (let j = 1; j <= range; j++) {\r\n            if (data[i - j][valueKey] <= data[i][valueKey] || data[i + j][valueKey] <= data[i][valueKey]) {\r\n                isSwingLow = false;\r\n                break;\r\n            }\r\n        }\r\n        if (isSwingLow) {\r\n            swingLows.push({ value: data[i][valueKey], index: i, date: data[i].date });\r\n        }\r\n    }\r\n    return swingLows;\r\n};\r\n\r\nconst findSwingHighs = (data, range, valueKey) => {\r\n    let swingHighs = [];\r\n    for (let i = range; i < data.length - range; i++) {\r\n        let isSwingHigh = true;\r\n        for (let j = 1; j <= range; j++) {\r\n            if (data[i - j][valueKey] >= data[i][valueKey] || data[i + j][valueKey] >= data[i][valueKey]) {\r\n                isSwingHigh = false;\r\n                break;\r\n            }\r\n        }\r\n        if (isSwingHigh) {\r\n            swingHighs.push({ value: data[i][valueKey], index: i, date: data[i].date });\r\n        }\r\n    }\r\n    return swingHighs;\r\n};\r\n\r\nfunction StochasticCalculations({ stockCode, onScoreCalculated }) {\r\n    const [stochasticData, setStochasticData] = useState([]);\r\n    const [stockData, setStockData] = useState([]);\r\n\r\n    const calculateDivergenceAndTrendScore = () => {\r\n        const swingRange = 2;\r\n        const dataLength = Math.min(stochasticData.length, stockData.length);\r\n\r\n        if (dataLength < swingRange * 2) {\r\n            if (onScoreCalculated) {\r\n                onScoreCalculated(null);\r\n            }\r\n            return;\r\n        }\r\n\r\n        const priceLows = findSwingLows(stockData, swingRange, 'close');\r\n        const priceHighs = findSwingHighs(stockData, swingRange, 'close');\r\n\r\n        const stochLows = findSwingLows(stochasticData, swingRange, 'perK');\r\n        const stochHighs = findSwingHighs(stochasticData, swingRange, 'perK');\r\n\r\n        let divergenceType = null; // 'bullish', 'bearish', null\r\n        let trendSignal = null; // 'uptrend', 'downtrend', null\r\n\r\n        // 상승 다이버전스 감지 (가격 하락 + 스토캐스틱 상승)\r\n        if (priceLows.length >= 2 && stochLows.length >= 2) {\r\n            const prevPriceLow = priceLows[priceLows.length - 2];\r\n            const recentPriceLow = priceLows[priceLows.length - 1];\r\n\r\n            const prevStochLow = stochLows.find(stochLow => stochLow.date === prevPriceLow.date);\r\n            const recentStochLow = stochLows.find(stochLow => stochLow.date === recentPriceLow.date);\r\n\r\n            if (prevStochLow && recentStochLow) {\r\n                if (recentPriceLow.value < prevPriceLow.value && recentStochLow.value > prevStochLow.value) {\r\n                    divergenceType = 'bullish';\r\n                }\r\n            }\r\n        }\r\n\r\n        // 하락 다이버전스 감지 (가격 상승 + 스토캐스틱 하락)\r\n        if (priceHighs.length >= 2 && stochHighs.length >= 2) {\r\n            const prevPriceHigh = priceHighs[priceHighs.length - 2];\r\n            const recentPriceHigh = priceHighs[priceHighs.length - 1];\r\n\r\n            const prevStochHigh = stochHighs.find(stochHigh => stochHigh.date === prevPriceHigh.date);\r\n            const recentStochHigh = stochHighs.find(stochHigh => stochHigh.date === recentPriceHigh.date);\r\n\r\n            if (prevStochHigh && recentStochHigh) {\r\n                if (recentPriceHigh.value > prevPriceHigh.value && recentStochHigh.value < prevStochHigh.value) {\r\n                    divergenceType = 'bearish';\r\n                }\r\n            }\r\n        }\r\n\r\n        // 상승/하락 설정 감지\r\n        if (priceLows.length >= 2 && stochHighs.length >= 2) {\r\n            const recentPriceLow = priceLows[priceLows.length - 1];\r\n            const recentStochHigh = stochHighs[stochHighs.length - 1];\r\n\r\n            if (recentPriceLow.value < priceLows[priceLows.length - 2].value && recentStochHigh.value > stochHighs[stochHighs.length - 2].value) {\r\n                trendSignal = 'uptrend';  // 상승 설정\r\n            }\r\n        }\r\n\r\n        if (priceHighs.length >= 2 && stochLows.length >= 2) {\r\n            const recentPriceHigh = priceHighs[priceHighs.length - 1];\r\n            const recentStochLow = stochLows[stochLows.length - 1];\r\n\r\n            if (recentPriceHigh.value > priceHighs[priceHighs.length - 2].value && recentStochLow.value < stochLows[stochLows.length - 2].value) {\r\n                trendSignal = 'downtrend';  // 하락 설정\r\n            }\r\n        }\r\n\r\n        // 점수 부여\r\n        let calculatedScore = 5; // 기본 보통\r\n        if (divergenceType === 'bullish' || trendSignal === 'uptrend') {\r\n            calculatedScore = 3; // 매수\r\n        } else if (divergenceType === 'bearish' || trendSignal === 'downtrend') {\r\n            calculatedScore = 7; // 매도\r\n        }\r\n\r\n        if (onScoreCalculated) {\r\n            onScoreCalculated(calculatedScore);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (stochasticData.length > 0 && stockData.length > 0) {\r\n            calculateDivergenceAndTrendScore();\r\n        }\r\n    }, [stochasticData, stockData]);\r\n\r\n    return (\r\n        <div>\r\n            <FetchStochasticData stockCode={stockCode} onStochasticFetch={setStochasticData} />\r\n            <FetchStockDataForCode stockCode={stockCode} onSDFCFetch={setStockData} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StochasticCalculations;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}