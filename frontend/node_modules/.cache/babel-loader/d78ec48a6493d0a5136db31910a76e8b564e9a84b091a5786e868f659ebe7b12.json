{"ast":null,"code":"/**\n * A [Factorial](https://en.wikipedia.org/wiki/Factorial), usually written n!, is the product of all positive\n * integers less than or equal to n. Often factorial is implemented\n * recursively, but this iterative approach is significantly faster\n * and simpler.\n *\n * @param {number} n input, must be an integer number 1 or greater\n * @returns {number} factorial: n!\n * @throws {Error} if n is less than 0 or not an integer\n * @example\n * factorial(5); // => 120\n */\nfunction factorial(n) {\n  // factorial is mathematically undefined for negative numbers\n  if (n < 0) {\n    throw new Error(\"factorial requires a non-negative value\");\n  }\n  if (Math.floor(n) !== n) {\n    throw new Error(\"factorial requires an integer input\");\n  }\n\n  // typically you'll expand the factorial function going down, like\n  // 5! = 5 * 4 * 3 * 2 * 1. This is going in the opposite direction,\n  // counting from 2 up to the number in question, and since anything\n  // multiplied by 1 is itself, the loop only needs to start at 2.\n  let accumulator = 1;\n  for (let i = 2; i <= n; i++) {\n    // for each number up to and including the number `n`, multiply\n    // the accumulator my that number.\n    accumulator *= i;\n  }\n  return accumulator;\n}\nexport default factorial;","map":{"version":3,"names":["factorial","n","Error","Math","floor","accumulator","i"],"sources":["C:/ProPython/Stock2/node_modules/simple-statistics/src/factorial.js"],"sourcesContent":["/**\n * A [Factorial](https://en.wikipedia.org/wiki/Factorial), usually written n!, is the product of all positive\n * integers less than or equal to n. Often factorial is implemented\n * recursively, but this iterative approach is significantly faster\n * and simpler.\n *\n * @param {number} n input, must be an integer number 1 or greater\n * @returns {number} factorial: n!\n * @throws {Error} if n is less than 0 or not an integer\n * @example\n * factorial(5); // => 120\n */\nfunction factorial(n) {\n    // factorial is mathematically undefined for negative numbers\n    if (n < 0) {\n        throw new Error(\"factorial requires a non-negative value\");\n    }\n\n    if (Math.floor(n) !== n) {\n        throw new Error(\"factorial requires an integer input\");\n    }\n\n    // typically you'll expand the factorial function going down, like\n    // 5! = 5 * 4 * 3 * 2 * 1. This is going in the opposite direction,\n    // counting from 2 up to the number in question, and since anything\n    // multiplied by 1 is itself, the loop only needs to start at 2.\n    let accumulator = 1;\n    for (let i = 2; i <= n; i++) {\n        // for each number up to and including the number `n`, multiply\n        // the accumulator my that number.\n        accumulator *= i;\n    }\n    return accumulator;\n}\n\nexport default factorial;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,SAASA,CAACC,CAAC,EAAE;EAClB;EACA,IAAIA,CAAC,GAAG,CAAC,EAAE;IACP,MAAM,IAAIC,KAAK,CAAC,yCAAyC,CAAC;EAC9D;EAEA,IAAIC,IAAI,CAACC,KAAK,CAACH,CAAC,CAAC,KAAKA,CAAC,EAAE;IACrB,MAAM,IAAIC,KAAK,CAAC,qCAAqC,CAAC;EAC1D;;EAEA;EACA;EACA;EACA;EACA,IAAIG,WAAW,GAAG,CAAC;EACnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIL,CAAC,EAAEK,CAAC,EAAE,EAAE;IACzB;IACA;IACAD,WAAW,IAAIC,CAAC;EACpB;EACA,OAAOD,WAAW;AACtB;AAEA,eAAeL,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}