{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nfunction FetchRealTimeDataForRSI({\n  onRTRSIFetch\n}) {\n  _s();\n  const [stockData, setStockData] = useState([]);\n  const [initialized, setInitialized] = useState(false);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('http://127.0.0.1:8000/api/get_rsi_realtime_data/');\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n        if (JSON.stringify(data) !== JSON.stringify(stockData)) {\n          setStockData(data);\n          if (onRTRSIFetch) {\n            onRTRSIFetch(data);\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching RSI analysis:', error);\n      }\n    };\n    if (!initialized) {\n      fetchData();\n      setInitialized(true);\n    }\n    const intervalId = setInterval(fetchData, 10000);\n    return () => clearInterval(intervalId);\n  }, []);\n  return null;\n}\n_s(FetchRealTimeDataForRSI, \"USBDLEtfoTWdNq/FH5XzES5mZlE=\");\n_c = FetchRealTimeDataForRSI;\nexport default FetchRealTimeDataForRSI;\nvar _c;\n$RefreshReg$(_c, \"FetchRealTimeDataForRSI\");","map":{"version":3,"names":["useEffect","useState","FetchRealTimeDataForRSI","onRTRSIFetch","_s","stockData","setStockData","initialized","setInitialized","fetchData","response","fetch","ok","Error","data","json","JSON","stringify","error","console","intervalId","setInterval","clearInterval","_c","$RefreshReg$"],"sources":["C:/ProPython/Stock2/frontend/src/ComponentsFetch/FetchStockOrignal/FetchRealTimeDataForRSI.js"],"sourcesContent":["import {useEffect, useState} from \"react\";\r\n\r\nfunction FetchRealTimeDataForRSI({ onRTRSIFetch }) {\r\n    const [stockData, setStockData] = useState([]);\r\n    const [initialized, setInitialized] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try{\r\n                const response = await fetch('http://127.0.0.1:8000/api/get_rsi_realtime_data/')\r\n                if (!response.ok) {\r\n                    throw new Error('Network response was not ok');\r\n                }\r\n                const data = await response.json();\r\n                if(JSON.stringify(data) !== JSON.stringify(stockData)) {\r\n                    setStockData(data);\r\n                    if(onRTRSIFetch) {\r\n                        onRTRSIFetch(data);\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching RSI analysis:', error);\r\n            }\r\n        };\r\n\r\n        if(!initialized) {\r\n            fetchData();\r\n            setInitialized(true);\r\n        }\r\n\r\n        const intervalId = setInterval(fetchData, 10000);\r\n\r\n        return () => clearInterval(intervalId);\r\n    },[])\r\n    return null;\r\n}\r\n\r\nexport default FetchRealTimeDataForRSI;"],"mappings":";AAAA,SAAQA,SAAS,EAAEC,QAAQ,QAAO,OAAO;AAEzC,SAASC,uBAAuBA,CAAC;EAAEC;AAAa,CAAC,EAAE;EAAAC,EAAA;EAC/C,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACM,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EAErDD,SAAS,CAAC,MAAM;IACZ,MAAMS,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,IAAG;QACC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kDAAkD,CAAC;QAChF,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;UACd,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;QAClD;QACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QAClC,IAAGC,IAAI,CAACC,SAAS,CAACH,IAAI,CAAC,KAAKE,IAAI,CAACC,SAAS,CAACZ,SAAS,CAAC,EAAE;UACnDC,YAAY,CAACQ,IAAI,CAAC;UAClB,IAAGX,YAAY,EAAE;YACbA,YAAY,CAACW,IAAI,CAAC;UACtB;QACJ;MACJ,CAAC,CAAC,OAAOI,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACxD;IACJ,CAAC;IAED,IAAG,CAACX,WAAW,EAAE;MACbE,SAAS,CAAC,CAAC;MACXD,cAAc,CAAC,IAAI,CAAC;IACxB;IAEA,MAAMY,UAAU,GAAGC,WAAW,CAACZ,SAAS,EAAE,KAAK,CAAC;IAEhD,OAAO,MAAMa,aAAa,CAACF,UAAU,CAAC;EAC1C,CAAC,EAAC,EAAE,CAAC;EACL,OAAO,IAAI;AACf;AAAChB,EAAA,CAjCQF,uBAAuB;AAAAqB,EAAA,GAAvBrB,uBAAuB;AAmChC,eAAeA,uBAAuB;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}