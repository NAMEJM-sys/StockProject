{"ast":null,"code":"var _jsxFileName = \"C:\\\\ProPython\\\\Stock2\\\\frontend\\\\src\\\\ComponentsCalculations\\\\StochasticTotalCalculation.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport FetchStochasticData from \"../Fetch/FetchStockOrignal/FetchStochasticData\";\nimport StochasticCalculations1 from \"./StochasticCalculations1\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction StochasticTotalCalculation({\n  stockCode,\n  onResultUpdate\n}) {\n  _s();\n  const [stochasticData, setStochasticData] = useState(null);\n  const [calculatedScore, setCalculatedScore] = useState(null);\n  const weights = {\n    basic: 2,\n    // 백엔드 기본 점수 가중치\n    calculated: 3 // 클라이언트 계산 점수 가중치\n  };\n  useEffect(() => {\n    if (stochasticData) {\n      let lastDate = stochasticData.length - 1;\n      const latestData = stochasticData[lastDate];\n      const totalScore = (latestData.score * weights.basic + calculatedScore * weights.calculated) / (weights.basic + weights.calculated);\n      const recommendation = getRecommendation(totalScore); // 받아온 점수에 따른 추천\n\n      if (onResultUpdate) {\n        onResultUpdate({\n          name: 'Stochastic %K(14, 3, 3)',\n          value: latestData.perK.toFixed(2),\n          damm: totalScore,\n          recommendation: recommendation\n        });\n      }\n    }\n  }, [stochasticData, calculatedScore]); // stochasticData가 변경될 때마다 실행\n\n  const getRecommendation = score => {\n    if (score <= 2.0) {\n      return '강한 매수';\n    } else if (score <= 4.0) {\n      return '매수';\n    } else if (score <= 6.0) {\n      return '보통';\n    } else if (score <= 8.0) {\n      return '매도';\n    } else {\n      return '강한 매도';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(FetchStochasticData, {\n      stockCode: stockCode,\n      onStochasticFetch: result => setStochasticData(result)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(StochasticCalculations1, {\n      stockCode: stockCode,\n      onScoreCalculated: setCalculatedScore\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(StochasticTotalCalculation, \"Zceltu8jSNZOP57ZeTnB1/0kk9g=\");\n_c = StochasticTotalCalculation;\nexport default StochasticTotalCalculation;\nvar _c;\n$RefreshReg$(_c, \"StochasticTotalCalculation\");","map":{"version":3,"names":["React","useState","useEffect","FetchStochasticData","StochasticCalculations1","jsxDEV","_jsxDEV","Fragment","_Fragment","StochasticTotalCalculation","stockCode","onResultUpdate","_s","stochasticData","setStochasticData","calculatedScore","setCalculatedScore","weights","basic","calculated","lastDate","length","latestData","totalScore","score","recommendation","getRecommendation","name","value","perK","toFixed","damm","children","onStochasticFetch","result","fileName","_jsxFileName","lineNumber","columnNumber","onScoreCalculated","_c","$RefreshReg$"],"sources":["C:/ProPython/Stock2/frontend/src/ComponentsCalculations/StochasticTotalCalculation.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport FetchStochasticData from \"../Fetch/FetchStockOrignal/FetchStochasticData\";\r\nimport StochasticCalculations1 from \"./StochasticCalculations1\";\r\n\r\nfunction StochasticTotalCalculation({ stockCode, onResultUpdate }) {\r\n    const [stochasticData, setStochasticData] = useState(null);\r\n    const [calculatedScore, setCalculatedScore] = useState(null);\r\n\r\n    const weights = {\r\n        basic: 2, // 백엔드 기본 점수 가중치\r\n        calculated: 3, // 클라이언트 계산 점수 가중치\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        if (stochasticData) {\r\n            let lastDate = stochasticData.length - 1;\r\n            const latestData = stochasticData[lastDate];\r\n\r\n            const totalScore = (\r\n                (latestData.score * weights.basic) +\r\n                (calculatedScore * weights.calculated)\r\n            ) / (weights.basic + weights.calculated);\r\n\r\n            const recommendation = getRecommendation(totalScore); // 받아온 점수에 따른 추천\r\n\r\n            if (onResultUpdate){\r\n                onResultUpdate({\r\n                    name: 'Stochastic %K(14, 3, 3)',\r\n                    value: latestData.perK.toFixed(2),\r\n                    damm: totalScore,\r\n                    recommendation: recommendation\r\n                });\r\n            }\r\n        }\r\n    }, [stochasticData, calculatedScore]); // stochasticData가 변경될 때마다 실행\r\n\r\n    const getRecommendation = (score) => {\r\n        if (score <= 2.0) {\r\n            return '강한 매수';\r\n        } else if (score <= 4.0) {\r\n            return '매수';\r\n        } else if (score <= 6.0) {\r\n            return '보통';\r\n        } else if (score <= 8.0) {\r\n            return '매도';\r\n        } else {\r\n            return '강한 매도';\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <FetchStochasticData stockCode={stockCode} onStochasticFetch={(result) => setStochasticData(result)} />\r\n            <StochasticCalculations1 stockCode={stockCode} onScoreCalculated={setCalculatedScore} />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default StochasticTotalCalculation;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,mBAAmB,MAAM,gDAAgD;AAChF,OAAOC,uBAAuB,MAAM,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEhE,SAASC,0BAA0BA,CAAC;EAAEC,SAAS;EAAEC;AAAe,CAAC,EAAE;EAAAC,EAAA;EAC/D,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACc,eAAe,EAAEC,kBAAkB,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAE5D,MAAMgB,OAAO,GAAG;IACZC,KAAK,EAAE,CAAC;IAAE;IACVC,UAAU,EAAE,CAAC,CAAE;EACnB,CAAC;EAGDjB,SAAS,CAAC,MAAM;IACZ,IAAIW,cAAc,EAAE;MAChB,IAAIO,QAAQ,GAAGP,cAAc,CAACQ,MAAM,GAAG,CAAC;MACxC,MAAMC,UAAU,GAAGT,cAAc,CAACO,QAAQ,CAAC;MAE3C,MAAMG,UAAU,GAAG,CACdD,UAAU,CAACE,KAAK,GAAGP,OAAO,CAACC,KAAK,GAChCH,eAAe,GAAGE,OAAO,CAACE,UAAW,KACrCF,OAAO,CAACC,KAAK,GAAGD,OAAO,CAACE,UAAU,CAAC;MAExC,MAAMM,cAAc,GAAGC,iBAAiB,CAACH,UAAU,CAAC,CAAC,CAAC;;MAEtD,IAAIZ,cAAc,EAAC;QACfA,cAAc,CAAC;UACXgB,IAAI,EAAE,yBAAyB;UAC/BC,KAAK,EAAEN,UAAU,CAACO,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC;UACjCC,IAAI,EAAER,UAAU;UAChBE,cAAc,EAAEA;QACpB,CAAC,CAAC;MACN;IACJ;EACJ,CAAC,EAAE,CAACZ,cAAc,EAAEE,eAAe,CAAC,CAAC,CAAC,CAAC;;EAEvC,MAAMW,iBAAiB,GAAIF,KAAK,IAAK;IACjC,IAAIA,KAAK,IAAI,GAAG,EAAE;MACd,OAAO,OAAO;IAClB,CAAC,MAAM,IAAIA,KAAK,IAAI,GAAG,EAAE;MACrB,OAAO,IAAI;IACf,CAAC,MAAM,IAAIA,KAAK,IAAI,GAAG,EAAE;MACrB,OAAO,IAAI;IACf,CAAC,MAAM,IAAIA,KAAK,IAAI,GAAG,EAAE;MACrB,OAAO,IAAI;IACf,CAAC,MAAM;MACH,OAAO,OAAO;IAClB;EACJ,CAAC;EAED,oBACIlB,OAAA,CAAAE,SAAA;IAAAwB,QAAA,gBACI1B,OAAA,CAACH,mBAAmB;MAACO,SAAS,EAAEA,SAAU;MAACuB,iBAAiB,EAAGC,MAAM,IAAKpB,iBAAiB,CAACoB,MAAM;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACvGhC,OAAA,CAACF,uBAAuB;MAACM,SAAS,EAAEA,SAAU;MAAC6B,iBAAiB,EAAEvB;IAAmB;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eAC1F,CAAC;AAEX;AAAC1B,EAAA,CArDQH,0BAA0B;AAAA+B,EAAA,GAA1B/B,0BAA0B;AAuDnC,eAAeA,0BAA0B;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}