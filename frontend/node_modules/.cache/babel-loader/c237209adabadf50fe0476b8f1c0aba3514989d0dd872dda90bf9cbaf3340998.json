{"ast":null,"code":"var _jsxFileName = \"C:\\\\ProPython\\\\Stock2\\\\frontend\\\\src\\\\ComponentsChart\\\\GaugeChartOfOscillators.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport SolidGauge from 'highcharts/modules/solid-gauge';\nimport MACDTotalCalculation from \"../ComponentsCalculations/MACDTotalCalculation\";\nimport CCITotalCalculation from \"../ComponentsCalculations/CCITotalCalculation\";\nimport RSITotalCalculation from \"../ComponentsCalculations/RSITotalCalculation\";\nimport MomentumTotalCalculation from \"../ComponentsCalculations/MomentumTotalCalculation\";\nimport StochasticTotalCalculation from \"../ComponentsCalculations/StochasticTotalCalculation\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nSolidGauge(Highcharts);\nfunction GaugeChartOfOscillators({\n  stockCode\n}) {\n  _s();\n  const [MACDscore, setMACDscore] = useState(null);\n  const [CCIScore, setCCIScore] = useState(null);\n  const [RSIScore, setRSIScore] = useState(null);\n  const [MFIScore, setMFIScore] = useState(null);\n  const [MomentumScore, setMomentumScore] = useState(null);\n  const [StochasticScore, setStochasticScore] = useState(null);\n  const [averageScore, setAverageScore] = useState(null);\n  const weights = {\n    MACD: 3,\n    CCI: 2,\n    RSI: 2.5,\n    MFI: 2,\n    Momentum: 1.5,\n    Stochastic: 2\n  };\n  useEffect(() => {\n    if (MACDscore !== null && CCIScore !== null && RSIScore !== null && MomentumScore !== null && MFIScore !== null && StochasticScore !== null) {\n      const totalScore = MACDscore * weights.MACD + CCIScore * weights.CCI + RSIScore * weights.RSI + MFIScore * weights.MFI + MomentumScore * weights.Momentum + StochasticScore * weights.Stochastic;\n      console.log(\"TotalScore\", totalScore);\n      const totalWeight = weights.MACD + weights.CCI + weights.RSI + weights.MFI + weights.Momentum + weights.Stochastic;\n      console.log(\"TotalWeight\", totalWeight);\n      setAverageScore((totalScore / totalWeight).toFixed(2));\n      console.log(\"setAverageScore\", setAverageScore((totalScore / totalWeight).toFixed(2)));\n    }\n  }, [MACDscore, CCIScore, RSIScore, MFIScore, MomentumScore, StochasticScore]);\n  const chartOptions = {\n    chart: {\n      type: 'solidgauge'\n    },\n    title: null,\n    pane: {\n      center: ['50%', '85%'],\n      size: '140%',\n      startAngle: -90,\n      endAngle: 90,\n      background: {\n        backgroundColor: Highcharts.defaultOptions.legend.backgroundColor || '#EEE',\n        innerRadius: '60%',\n        outerRadius: '100%',\n        shape: 'arc'\n      }\n    },\n    tooltip: {\n      enabled: false\n    },\n    yAxis: {\n      min: 0,\n      max: 10,\n      stops: [[0.1, '#55BF3B'],\n      // green\n      [0.5, '#DDDF0D'],\n      // yellow\n      [0.9, '#DF5353'] // red\n      ],\n      lineWidth: 0,\n      tickWidth: 0,\n      minorTickInterval: null,\n      tickAmount: 2,\n      title: {\n        text: 'Average Score'\n      },\n      labels: {\n        y: 16\n      }\n    },\n    plotOptions: {\n      solidgauge: {\n        dataLabels: {\n          y: 5,\n          borderWidth: 0,\n          useHTML: true\n        }\n      }\n    },\n    series: [{\n      name: 'Average Score',\n      data: [parseFloat(averageScore) || 0],\n      // 평균 점수 반영\n      dataLabels: {\n        format: '<div style=\"text-align:center\"><span style=\"font-size:25px\">{y}</span><br/>' + '<span style=\"font-size:12px;opacity:0.4\">점수</span></div>'\n      },\n      tooltip: {\n        valueSuffix: ' 점수'\n      }\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(MACDTotalCalculation, {\n      stockCode: stockCode,\n      onResultUpdate: setMACDscore\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CCITotalCalculation, {\n      stockCode: stockCode,\n      onResultUpdate: setCCIScore\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(RSITotalCalculation, {\n      stockCode: stockCode,\n      onResultUpdate: setRSIScore\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MomentumTotalCalculation, {\n      stockCode: stockCode,\n      onResultUpdate: setMomentumScore\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(StochasticTotalCalculation, {\n      stockCode: stockCode,\n      onResultUpdate: setStochasticScore\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(HighchartsReact, {\n      highcharts: Highcharts,\n      options: chartOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 9\n  }, this);\n}\n_s(GaugeChartOfOscillators, \"YXLsJa/MvXICl36Jk9NN+W+WDcE=\");\n_c = GaugeChartOfOscillators;\nexport default GaugeChartOfOscillators;\nvar _c;\n$RefreshReg$(_c, \"GaugeChartOfOscillators\");","map":{"version":3,"names":["React","useState","useEffect","Highcharts","HighchartsReact","SolidGauge","MACDTotalCalculation","CCITotalCalculation","RSITotalCalculation","MomentumTotalCalculation","StochasticTotalCalculation","jsxDEV","_jsxDEV","GaugeChartOfOscillators","stockCode","_s","MACDscore","setMACDscore","CCIScore","setCCIScore","RSIScore","setRSIScore","MFIScore","setMFIScore","MomentumScore","setMomentumScore","StochasticScore","setStochasticScore","averageScore","setAverageScore","weights","MACD","CCI","RSI","MFI","Momentum","Stochastic","totalScore","console","log","totalWeight","toFixed","chartOptions","chart","type","title","pane","center","size","startAngle","endAngle","background","backgroundColor","defaultOptions","legend","innerRadius","outerRadius","shape","tooltip","enabled","yAxis","min","max","stops","lineWidth","tickWidth","minorTickInterval","tickAmount","text","labels","y","plotOptions","solidgauge","dataLabels","borderWidth","useHTML","series","name","data","parseFloat","format","valueSuffix","children","onResultUpdate","fileName","_jsxFileName","lineNumber","columnNumber","highcharts","options","_c","$RefreshReg$"],"sources":["C:/ProPython/Stock2/frontend/src/ComponentsChart/GaugeChartOfOscillators.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport SolidGauge from 'highcharts/modules/solid-gauge';\r\nimport MACDTotalCalculation from \"../ComponentsCalculations/MACDTotalCalculation\";\r\nimport CCITotalCalculation from \"../ComponentsCalculations/CCITotalCalculation\";\r\nimport RSITotalCalculation from \"../ComponentsCalculations/RSITotalCalculation\";\r\nimport MomentumTotalCalculation from \"../ComponentsCalculations/MomentumTotalCalculation\";\r\nimport StochasticTotalCalculation from \"../ComponentsCalculations/StochasticTotalCalculation\";\r\n\r\nSolidGauge(Highcharts);\r\n\r\nfunction GaugeChartOfOscillators ({ stockCode }) {\r\n    const [MACDscore, setMACDscore] = useState(null);\r\n    const [CCIScore, setCCIScore] = useState(null);\r\n    const [RSIScore, setRSIScore] = useState(null);\r\n    const [MFIScore, setMFIScore] = useState(null);\r\n    const [MomentumScore, setMomentumScore] = useState(null);\r\n    const [StochasticScore, setStochasticScore] = useState(null);\r\n    const [averageScore, setAverageScore] = useState(null);\r\n\r\n    const weights = {\r\n        MACD: 3,\r\n        CCI: 2,\r\n        RSI: 2.5,\r\n        MFI: 2,\r\n        Momentum: 1.5,\r\n        Stochastic: 2\r\n    };\r\n\r\n    useEffect(() => {\r\n        if(MACDscore !== null && CCIScore !== null && RSIScore !== null && MomentumScore !== null\r\n            && MFIScore !== null && StochasticScore !== null) {\r\n            const totalScore = (\r\n                (MACDscore * weights.MACD) +\r\n                (CCIScore * weights.CCI) +\r\n                (RSIScore * weights.RSI) +\r\n                (MFIScore * weights.MFI) +\r\n                (MomentumScore * weights.Momentum) +\r\n                (StochasticScore * weights.Stochastic)\r\n            );\r\n\r\n            console.log(\"TotalScore\", totalScore);\r\n\r\n            const totalWeight = (\r\n                weights.MACD +\r\n                weights.CCI +\r\n                weights.RSI +\r\n                weights.MFI +\r\n                weights.Momentum +\r\n                weights.Stochastic\r\n            );\r\n\r\n            console.log(\"TotalWeight\", totalWeight);\r\n\r\n            setAverageScore((totalScore / totalWeight).toFixed(2));\r\n\r\n            console.log(\"setAverageScore\",setAverageScore((totalScore / totalWeight).toFixed(2)))\r\n\r\n        }\r\n    }, [MACDscore, CCIScore, RSIScore, MFIScore, MomentumScore, StochasticScore]);\r\n\r\n    const chartOptions = {\r\n        chart: {\r\n            type: 'solidgauge'\r\n        },\r\n        title: null,\r\n        pane: {\r\n            center: ['50%', '85%'],\r\n            size: '140%',\r\n            startAngle: -90,\r\n            endAngle: 90,\r\n            background: {\r\n                backgroundColor: Highcharts.defaultOptions.legend.backgroundColor || '#EEE',\r\n                innerRadius: '60%',\r\n                outerRadius: '100%',\r\n                shape: 'arc'\r\n            }\r\n        },\r\n        tooltip: {\r\n            enabled: false\r\n        },\r\n        yAxis: {\r\n            min: 0,\r\n            max: 10,\r\n            stops: [\r\n                [0.1, '#55BF3B'], // green\r\n                [0.5, '#DDDF0D'], // yellow\r\n                [0.9, '#DF5353'] // red\r\n            ],\r\n            lineWidth: 0,\r\n            tickWidth: 0,\r\n            minorTickInterval: null,\r\n            tickAmount: 2,\r\n            title: {\r\n                text: 'Average Score'\r\n            },\r\n            labels: {\r\n                y: 16\r\n            }\r\n        },\r\n        plotOptions: {\r\n            solidgauge: {\r\n                dataLabels: {\r\n                    y: 5,\r\n                    borderWidth: 0,\r\n                    useHTML: true\r\n                }\r\n            }\r\n        },\r\n        series: [{\r\n            name: 'Average Score',\r\n            data: [parseFloat(averageScore) || 0],  // 평균 점수 반영\r\n            dataLabels: {\r\n                format: '<div style=\"text-align:center\"><span style=\"font-size:25px\">{y}</span><br/>' +\r\n                    '<span style=\"font-size:12px;opacity:0.4\">점수</span></div>'\r\n            },\r\n            tooltip: {\r\n                valueSuffix: ' 점수'\r\n            }\r\n        }]\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <MACDTotalCalculation stockCode={stockCode} onResultUpdate={setMACDscore} />\r\n            <CCITotalCalculation stockCode={stockCode} onResultUpdate={setCCIScore} />\r\n            <RSITotalCalculation stockCode={stockCode} onResultUpdate={setRSIScore} />\r\n            <MomentumTotalCalculation stockCode={stockCode} onResultUpdate={setMomentumScore} />\r\n            <StochasticTotalCalculation stockCode={stockCode} onResultUpdate={setStochasticScore} />\r\n\r\n            <HighchartsReact\r\n                highcharts={Highcharts}\r\n                options={chartOptions}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GaugeChartOfOscillators;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}