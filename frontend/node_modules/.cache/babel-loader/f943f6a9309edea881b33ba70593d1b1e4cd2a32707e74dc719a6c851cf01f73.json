{"ast":null,"code":"/**\n * Split an array into chunks of a specified size. This function\n * has the same behavior as [PHP's array_chunk](http://php.net/manual/en/function.array-chunk.php)\n * function, and thus will insert smaller-sized chunks at the end if\n * the input size is not divisible by the chunk size.\n *\n * `x` is expected to be an array, and `chunkSize` a number.\n * The `x` array can contain any kind of data.\n *\n * @param {Array} x a sample\n * @param {number} chunkSize size of each output array. must be a positive integer\n * @returns {Array<Array>} a chunked array\n * @throws {Error} if chunk size is less than 1 or not an integer\n * @example\n * chunk([1, 2, 3, 4, 5, 6], 2);\n * // => [[1, 2], [3, 4], [5, 6]]\n */\nfunction chunk(x, chunkSize) {\n  // a list of result chunks, as arrays in an array\n  const output = [];\n\n  // `chunkSize` must be zero or higher - otherwise the loop below,\n  // in which we call `start += chunkSize`, will loop infinitely.\n  // So, we'll detect and throw in that case to indicate\n  // invalid input.\n  if (chunkSize < 1) {\n    throw new Error(\"chunk size must be a positive number\");\n  }\n  if (Math.floor(chunkSize) !== chunkSize) {\n    throw new Error(\"chunk size must be an integer\");\n  }\n\n  // `start` is the index at which `.slice` will start selecting\n  // new array elements\n  for (let start = 0; start < x.length; start += chunkSize) {\n    // for each chunk, slice that part of the array and add it\n    // to the output. The `.slice` function does not change\n    // the original array.\n    output.push(x.slice(start, start + chunkSize));\n  }\n  return output;\n}\nexport default chunk;","map":{"version":3,"names":["chunk","x","chunkSize","output","Error","Math","floor","start","length","push","slice"],"sources":["C:/ProPython/Stock2/node_modules/simple-statistics/src/chunk.js"],"sourcesContent":["/**\n * Split an array into chunks of a specified size. This function\n * has the same behavior as [PHP's array_chunk](http://php.net/manual/en/function.array-chunk.php)\n * function, and thus will insert smaller-sized chunks at the end if\n * the input size is not divisible by the chunk size.\n *\n * `x` is expected to be an array, and `chunkSize` a number.\n * The `x` array can contain any kind of data.\n *\n * @param {Array} x a sample\n * @param {number} chunkSize size of each output array. must be a positive integer\n * @returns {Array<Array>} a chunked array\n * @throws {Error} if chunk size is less than 1 or not an integer\n * @example\n * chunk([1, 2, 3, 4, 5, 6], 2);\n * // => [[1, 2], [3, 4], [5, 6]]\n */\nfunction chunk(x, chunkSize) {\n    // a list of result chunks, as arrays in an array\n    const output = [];\n\n    // `chunkSize` must be zero or higher - otherwise the loop below,\n    // in which we call `start += chunkSize`, will loop infinitely.\n    // So, we'll detect and throw in that case to indicate\n    // invalid input.\n    if (chunkSize < 1) {\n        throw new Error(\"chunk size must be a positive number\");\n    }\n\n    if (Math.floor(chunkSize) !== chunkSize) {\n        throw new Error(\"chunk size must be an integer\");\n    }\n\n    // `start` is the index at which `.slice` will start selecting\n    // new array elements\n    for (let start = 0; start < x.length; start += chunkSize) {\n        // for each chunk, slice that part of the array and add it\n        // to the output. The `.slice` function does not change\n        // the original array.\n        output.push(x.slice(start, start + chunkSize));\n    }\n    return output;\n}\n\nexport default chunk;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,KAAKA,CAACC,CAAC,EAAEC,SAAS,EAAE;EACzB;EACA,MAAMC,MAAM,GAAG,EAAE;;EAEjB;EACA;EACA;EACA;EACA,IAAID,SAAS,GAAG,CAAC,EAAE;IACf,MAAM,IAAIE,KAAK,CAAC,sCAAsC,CAAC;EAC3D;EAEA,IAAIC,IAAI,CAACC,KAAK,CAACJ,SAAS,CAAC,KAAKA,SAAS,EAAE;IACrC,MAAM,IAAIE,KAAK,CAAC,+BAA+B,CAAC;EACpD;;EAEA;EACA;EACA,KAAK,IAAIG,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGN,CAAC,CAACO,MAAM,EAAED,KAAK,IAAIL,SAAS,EAAE;IACtD;IACA;IACA;IACAC,MAAM,CAACM,IAAI,CAACR,CAAC,CAACS,KAAK,CAACH,KAAK,EAAEA,KAAK,GAAGL,SAAS,CAAC,CAAC;EAClD;EACA,OAAOC,MAAM;AACjB;AAEA,eAAeH,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}