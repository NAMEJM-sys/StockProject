{"ast":null,"code":"import interquartileRange from \"./interquartile_range.js\";\nimport stddev from \"./sample_standard_deviation.js\";\nconst SQRT_2PI = Math.sqrt(2 * Math.PI);\n\n/**\n * [Well-known kernels](https://en.wikipedia.org/wiki/Kernel_(statistics)#Kernel_functions_in_common_use)\n * @private\n */\nconst kernels = {\n  /**\n   * The gaussian kernel.\n   * @private\n   */\n  gaussian: function (u) {\n    return Math.exp(-0.5 * u * u) / SQRT_2PI;\n  }\n};\n\n/**\n * Well known bandwidth selection methods\n * @private\n */\nconst bandwidthMethods = {\n  /**\n   * The [\"normal reference distribution\"\n   * rule-of-thumb](https://stat.ethz.ch/R-manual/R-devel/library/MASS/html/bandwidth.nrd.html),\n   * a commonly used version of [Silverman's\n   * rule-of-thumb](https://en.wikipedia.org/wiki/Kernel_density_estimation#A_rule-of-thumb_bandwidth_estimator).\n   * @private\n   */\n  nrd: function (x) {\n    let s = stddev(x);\n    const iqr = interquartileRange(x);\n    if (typeof iqr === \"number\") {\n      s = Math.min(s, iqr / 1.34);\n    }\n    return 1.06 * s * Math.pow(x.length, -0.2);\n  }\n};\n\n/**\n * [Kernel density estimation](https://en.wikipedia.org/wiki/Kernel_density_estimation)\n * is a useful tool for, among other things, estimating the shape of the\n * underlying probability distribution from a sample.\n *\n * @name kernelDensityEstimation\n * @param X sample values\n * @param kernel The kernel function to use. If a function is provided, it should return non-negative values and integrate to 1. Defaults to 'gaussian'.\n * @param bandwidthMethod The \"bandwidth selection\" method to use, or a fixed bandwidth value. Defaults to \"nrd\", the commonly-used [\"normal reference distribution\" rule-of-thumb](https://stat.ethz.ch/R-manual/R-devel/library/MASS/html/bandwidth.nrd.html).\n * @returns {Function} An estimated [probability density function](https://en.wikipedia.org/wiki/Probability_density_function) for the given sample. The returned function runs in `O(X.length)`.\n */\nfunction kernelDensityEstimation(X, kernel, bandwidthMethod) {\n  let kernelFn;\n  if (kernel === undefined) {\n    kernelFn = kernels.gaussian;\n  } else if (typeof kernel === \"string\") {\n    if (!kernels[kernel]) {\n      throw new Error('Unknown kernel \"' + kernel + '\"');\n    }\n    kernelFn = kernels[kernel];\n  } else {\n    kernelFn = kernel;\n  }\n  let bandwidth;\n  if (typeof bandwidthMethod === \"undefined\") {\n    bandwidth = bandwidthMethods.nrd(X);\n  } else if (typeof bandwidthMethod === \"string\") {\n    if (!bandwidthMethods[bandwidthMethod]) {\n      throw new Error('Unknown bandwidth method \"' + bandwidthMethod + '\"');\n    }\n    bandwidth = bandwidthMethods[bandwidthMethod](X);\n  } else {\n    bandwidth = bandwidthMethod;\n  }\n  return function (x) {\n    let i = 0;\n    let sum = 0;\n    for (i = 0; i < X.length; i++) {\n      sum += kernelFn((x - X[i]) / bandwidth);\n    }\n    return sum / bandwidth / X.length;\n  };\n}\nexport default kernelDensityEstimation;","map":{"version":3,"names":["interquartileRange","stddev","SQRT_2PI","Math","sqrt","PI","kernels","gaussian","u","exp","bandwidthMethods","nrd","x","s","iqr","min","pow","length","kernelDensityEstimation","X","kernel","bandwidthMethod","kernelFn","undefined","Error","bandwidth","i","sum"],"sources":["C:/ProPython/Stock2/node_modules/simple-statistics/src/kernel_density_estimation.js"],"sourcesContent":["import interquartileRange from \"./interquartile_range.js\";\nimport stddev from \"./sample_standard_deviation.js\";\n\nconst SQRT_2PI = Math.sqrt(2 * Math.PI);\n\n/**\n * [Well-known kernels](https://en.wikipedia.org/wiki/Kernel_(statistics)#Kernel_functions_in_common_use)\n * @private\n */\nconst kernels = {\n    /**\n     * The gaussian kernel.\n     * @private\n     */\n    gaussian: function (u) {\n        return Math.exp(-0.5 * u * u) / SQRT_2PI;\n    }\n};\n\n/**\n * Well known bandwidth selection methods\n * @private\n */\nconst bandwidthMethods = {\n    /**\n     * The [\"normal reference distribution\"\n     * rule-of-thumb](https://stat.ethz.ch/R-manual/R-devel/library/MASS/html/bandwidth.nrd.html),\n     * a commonly used version of [Silverman's\n     * rule-of-thumb](https://en.wikipedia.org/wiki/Kernel_density_estimation#A_rule-of-thumb_bandwidth_estimator).\n     * @private\n     */\n    nrd: function (x) {\n        let s = stddev(x);\n        const iqr = interquartileRange(x);\n        if (typeof iqr === \"number\") {\n            s = Math.min(s, iqr / 1.34);\n        }\n        return 1.06 * s * Math.pow(x.length, -0.2);\n    }\n};\n\n/**\n * [Kernel density estimation](https://en.wikipedia.org/wiki/Kernel_density_estimation)\n * is a useful tool for, among other things, estimating the shape of the\n * underlying probability distribution from a sample.\n *\n * @name kernelDensityEstimation\n * @param X sample values\n * @param kernel The kernel function to use. If a function is provided, it should return non-negative values and integrate to 1. Defaults to 'gaussian'.\n * @param bandwidthMethod The \"bandwidth selection\" method to use, or a fixed bandwidth value. Defaults to \"nrd\", the commonly-used [\"normal reference distribution\" rule-of-thumb](https://stat.ethz.ch/R-manual/R-devel/library/MASS/html/bandwidth.nrd.html).\n * @returns {Function} An estimated [probability density function](https://en.wikipedia.org/wiki/Probability_density_function) for the given sample. The returned function runs in `O(X.length)`.\n */\nfunction kernelDensityEstimation(X, kernel, bandwidthMethod) {\n    let kernelFn;\n    if (kernel === undefined) {\n        kernelFn = kernels.gaussian;\n    } else if (typeof kernel === \"string\") {\n        if (!kernels[kernel]) {\n            throw new Error('Unknown kernel \"' + kernel + '\"');\n        }\n        kernelFn = kernels[kernel];\n    } else {\n        kernelFn = kernel;\n    }\n\n    let bandwidth;\n    if (typeof bandwidthMethod === \"undefined\") {\n        bandwidth = bandwidthMethods.nrd(X);\n    } else if (typeof bandwidthMethod === \"string\") {\n        if (!bandwidthMethods[bandwidthMethod]) {\n            throw new Error(\n                'Unknown bandwidth method \"' + bandwidthMethod + '\"'\n            );\n        }\n        bandwidth = bandwidthMethods[bandwidthMethod](X);\n    } else {\n        bandwidth = bandwidthMethod;\n    }\n\n    return function (x) {\n        let i = 0;\n        let sum = 0;\n        for (i = 0; i < X.length; i++) {\n            sum += kernelFn((x - X[i]) / bandwidth);\n        }\n        return sum / bandwidth / X.length;\n    };\n}\n\nexport default kernelDensityEstimation;\n"],"mappings":"AAAA,OAAOA,kBAAkB,MAAM,0BAA0B;AACzD,OAAOC,MAAM,MAAM,gCAAgC;AAEnD,MAAMC,QAAQ,GAAGC,IAAI,CAACC,IAAI,CAAC,CAAC,GAAGD,IAAI,CAACE,EAAE,CAAC;;AAEvC;AACA;AACA;AACA;AACA,MAAMC,OAAO,GAAG;EACZ;AACJ;AACA;AACA;EACIC,QAAQ,EAAE,SAAAA,CAAUC,CAAC,EAAE;IACnB,OAAOL,IAAI,CAACM,GAAG,CAAC,CAAC,GAAG,GAAGD,CAAC,GAAGA,CAAC,CAAC,GAAGN,QAAQ;EAC5C;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA,MAAMQ,gBAAgB,GAAG;EACrB;AACJ;AACA;AACA;AACA;AACA;AACA;EACIC,GAAG,EAAE,SAAAA,CAAUC,CAAC,EAAE;IACd,IAAIC,CAAC,GAAGZ,MAAM,CAACW,CAAC,CAAC;IACjB,MAAME,GAAG,GAAGd,kBAAkB,CAACY,CAAC,CAAC;IACjC,IAAI,OAAOE,GAAG,KAAK,QAAQ,EAAE;MACzBD,CAAC,GAAGV,IAAI,CAACY,GAAG,CAACF,CAAC,EAAEC,GAAG,GAAG,IAAI,CAAC;IAC/B;IACA,OAAO,IAAI,GAAGD,CAAC,GAAGV,IAAI,CAACa,GAAG,CAACJ,CAAC,CAACK,MAAM,EAAE,CAAC,GAAG,CAAC;EAC9C;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,uBAAuBA,CAACC,CAAC,EAAEC,MAAM,EAAEC,eAAe,EAAE;EACzD,IAAIC,QAAQ;EACZ,IAAIF,MAAM,KAAKG,SAAS,EAAE;IACtBD,QAAQ,GAAGhB,OAAO,CAACC,QAAQ;EAC/B,CAAC,MAAM,IAAI,OAAOa,MAAM,KAAK,QAAQ,EAAE;IACnC,IAAI,CAACd,OAAO,CAACc,MAAM,CAAC,EAAE;MAClB,MAAM,IAAII,KAAK,CAAC,kBAAkB,GAAGJ,MAAM,GAAG,GAAG,CAAC;IACtD;IACAE,QAAQ,GAAGhB,OAAO,CAACc,MAAM,CAAC;EAC9B,CAAC,MAAM;IACHE,QAAQ,GAAGF,MAAM;EACrB;EAEA,IAAIK,SAAS;EACb,IAAI,OAAOJ,eAAe,KAAK,WAAW,EAAE;IACxCI,SAAS,GAAGf,gBAAgB,CAACC,GAAG,CAACQ,CAAC,CAAC;EACvC,CAAC,MAAM,IAAI,OAAOE,eAAe,KAAK,QAAQ,EAAE;IAC5C,IAAI,CAACX,gBAAgB,CAACW,eAAe,CAAC,EAAE;MACpC,MAAM,IAAIG,KAAK,CACX,4BAA4B,GAAGH,eAAe,GAAG,GACrD,CAAC;IACL;IACAI,SAAS,GAAGf,gBAAgB,CAACW,eAAe,CAAC,CAACF,CAAC,CAAC;EACpD,CAAC,MAAM;IACHM,SAAS,GAAGJ,eAAe;EAC/B;EAEA,OAAO,UAAUT,CAAC,EAAE;IAChB,IAAIc,CAAC,GAAG,CAAC;IACT,IAAIC,GAAG,GAAG,CAAC;IACX,KAAKD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,CAAC,CAACF,MAAM,EAAES,CAAC,EAAE,EAAE;MAC3BC,GAAG,IAAIL,QAAQ,CAAC,CAACV,CAAC,GAAGO,CAAC,CAACO,CAAC,CAAC,IAAID,SAAS,CAAC;IAC3C;IACA,OAAOE,GAAG,GAAGF,SAAS,GAAGN,CAAC,CAACF,MAAM;EACrC,CAAC;AACL;AAEA,eAAeC,uBAAuB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}