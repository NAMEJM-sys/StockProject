{"ast":null,"code":"var _jsxFileName = \"C:\\\\ProPython\\\\Stock2\\\\frontend\\\\src\\\\ComponentsCalculations\\\\ADXCalculations2.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport FetchADXData from '../ComponentsFetch/FetchStockOrignal/FetchADXData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ADXCalculations2({\n  stockCode,\n  onScoreCalculated\n}) {\n  _s();\n  const [adxData, setADXData] = useState([]);\n\n  // 지수 이동 평균(EMA) 계산 함수\n  const calculateEMA = (values, period) => {\n    const k = 2 / (period + 1);\n    let ema = [];\n    values.forEach((value, index) => {\n      if (index === 0) {\n        ema.push(value);\n      } else {\n        ema.push(value * k + ema[index - 1] * (1 - k));\n      }\n    });\n    return ema;\n  };\n  const calculateDICrossoverScore = (adxData, period = 14) => {\n    if (adxData.length < period + 1) {\n      return null;\n    }\n\n    // DI+와 DI-의 값 추출\n    const diPlusValues = adxData.map(data => data.DI14Plus);\n    const diMinusValues = adxData.map(data => data.DI14Minus);\n\n    // EMA 계산\n    const diPlusEMA = calculateEMA(diPlusValues, period);\n    const diMinusEMA = calculateEMA(diMinusValues, period);\n\n    // 최근 값과 이전 값 가져오기\n    const currentDiPlusEMA = diPlusEMA[diPlusEMA.length - 1];\n    const currentDiMinusEMA = diMinusEMA[diMinusEMA.length - 1];\n    const prevDiPlusEMA = diPlusEMA[diPlusEMA.length - 2];\n    const prevDiMinusEMA = diMinusEMA[diMinusEMA.length - 2];\n    let score = 5; // 기본 보통\n\n    if (prevDiPlusEMA <= prevDiMinusEMA && currentDiPlusEMA > currentDiMinusEMA) {\n      score = 3; // 매수\n    } else if (prevDiPlusEMA >= prevDiMinusEMA && currentDiPlusEMA < currentDiMinusEMA) {\n      score = 7; // 매도\n    }\n    return score;\n  };\n  useEffect(() => {\n    if (adxData.length > 0) {\n      const score = calculateDICrossoverScore(adxData);\n      if (score !== null && onScoreCalculated) {\n        onScoreCalculated(score);\n      }\n    }\n  }, [adxData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(FetchADXData, {\n      stockCode: stockCode,\n      onADXFetch: setADXData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n}\n_s(ADXCalculations2, \"r4FE7Ywn0QsXNQ9IphxNtY/DUFI=\");\n_c = ADXCalculations2;\nexport default ADXCalculations2;\nvar _c;\n$RefreshReg$(_c, \"ADXCalculations2\");","map":{"version":3,"names":["React","useState","useEffect","FetchADXData","jsxDEV","_jsxDEV","ADXCalculations2","stockCode","onScoreCalculated","_s","adxData","setADXData","calculateEMA","values","period","k","ema","forEach","value","index","push","calculateDICrossoverScore","length","diPlusValues","map","data","DI14Plus","diMinusValues","DI14Minus","diPlusEMA","diMinusEMA","currentDiPlusEMA","currentDiMinusEMA","prevDiPlusEMA","prevDiMinusEMA","score","children","onADXFetch","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/ProPython/Stock2/frontend/src/ComponentsCalculations/ADXCalculations2.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport FetchADXData from '../ComponentsFetch/FetchStockOrignal/FetchADXData';\r\n\r\nfunction ADXCalculations2({ stockCode, onScoreCalculated }) {\r\n    const [adxData, setADXData] = useState([]);\r\n\r\n    // 지수 이동 평균(EMA) 계산 함수\r\n    const calculateEMA = (values, period) => {\r\n        const k = 2 / (period + 1);\r\n        let ema = [];\r\n        values.forEach((value, index) => {\r\n            if (index === 0) {\r\n                ema.push(value);\r\n            } else {\r\n                ema.push(value * k + ema[index - 1] * (1 - k));\r\n            }\r\n        });\r\n        return ema;\r\n    };\r\n\r\n    const calculateDICrossoverScore = (adxData, period = 14) => {\r\n        if (adxData.length < period + 1) {\r\n            return null;\r\n        }\r\n\r\n        // DI+와 DI-의 값 추출\r\n        const diPlusValues = adxData.map(data => data.DI14Plus);\r\n        const diMinusValues = adxData.map(data => data.DI14Minus);\r\n\r\n        // EMA 계산\r\n        const diPlusEMA = calculateEMA(diPlusValues, period);\r\n        const diMinusEMA = calculateEMA(diMinusValues, period);\r\n\r\n        // 최근 값과 이전 값 가져오기\r\n        const currentDiPlusEMA = diPlusEMA[diPlusEMA.length - 1];\r\n        const currentDiMinusEMA = diMinusEMA[diMinusEMA.length - 1];\r\n        const prevDiPlusEMA = diPlusEMA[diPlusEMA.length - 2];\r\n        const prevDiMinusEMA = diMinusEMA[diMinusEMA.length - 2];\r\n\r\n        let score = 5; // 기본 보통\r\n\r\n        if (prevDiPlusEMA <= prevDiMinusEMA && currentDiPlusEMA > currentDiMinusEMA) {\r\n            score = 3; // 매수\r\n        } else if (prevDiPlusEMA >= prevDiMinusEMA && currentDiPlusEMA < currentDiMinusEMA) {\r\n            score = 7; // 매도\r\n        }\r\n\r\n        return score;\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (adxData.length > 0) {\r\n            const score = calculateDICrossoverScore(adxData);\r\n            if (score !== null && onScoreCalculated) {\r\n                onScoreCalculated(score);\r\n            }\r\n        }\r\n    }, [adxData]);\r\n\r\n    return (\r\n        <div>\r\n            <FetchADXData stockCode={stockCode} onADXFetch={setADXData} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ADXCalculations2;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}