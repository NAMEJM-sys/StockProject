{"ast":null,"code":"/**\n * Implementation of Combinations\n * Combinations are unique subsets of a collection - in this case, k x from a collection at a time.\n * https://en.wikipedia.org/wiki/Combination\n * @param {Array} x any type of data\n * @param {int} k the number of objects in each group (without replacement)\n * @returns {Array<Array>} array of permutations\n * @example\n * combinations([1, 2, 3], 2); // => [[1,2], [1,3], [2,3]]\n */\n\nfunction combinations(x, k) {\n  let i;\n  let subI;\n  const combinationList = [];\n  let subsetCombinations;\n  let next;\n  for (i = 0; i < x.length; i++) {\n    if (k === 1) {\n      combinationList.push([x[i]]);\n    } else {\n      subsetCombinations = combinations(x.slice(i + 1, x.length), k - 1);\n      for (subI = 0; subI < subsetCombinations.length; subI++) {\n        next = subsetCombinations[subI];\n        next.unshift(x[i]);\n        combinationList.push(next);\n      }\n    }\n  }\n  return combinationList;\n}\nexport default combinations;","map":{"version":3,"names":["combinations","x","k","i","subI","combinationList","subsetCombinations","next","length","push","slice","unshift"],"sources":["C:/ProPython/Stock2/node_modules/simple-statistics/src/combinations.js"],"sourcesContent":["/**\n * Implementation of Combinations\n * Combinations are unique subsets of a collection - in this case, k x from a collection at a time.\n * https://en.wikipedia.org/wiki/Combination\n * @param {Array} x any type of data\n * @param {int} k the number of objects in each group (without replacement)\n * @returns {Array<Array>} array of permutations\n * @example\n * combinations([1, 2, 3], 2); // => [[1,2], [1,3], [2,3]]\n */\n\nfunction combinations(x, k) {\n    let i;\n    let subI;\n    const combinationList = [];\n    let subsetCombinations;\n    let next;\n\n    for (i = 0; i < x.length; i++) {\n        if (k === 1) {\n            combinationList.push([x[i]]);\n        } else {\n            subsetCombinations = combinations(x.slice(i + 1, x.length), k - 1);\n            for (subI = 0; subI < subsetCombinations.length; subI++) {\n                next = subsetCombinations[subI];\n                next.unshift(x[i]);\n                combinationList.push(next);\n            }\n        }\n    }\n    return combinationList;\n}\n\nexport default combinations;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,YAAYA,CAACC,CAAC,EAAEC,CAAC,EAAE;EACxB,IAAIC,CAAC;EACL,IAAIC,IAAI;EACR,MAAMC,eAAe,GAAG,EAAE;EAC1B,IAAIC,kBAAkB;EACtB,IAAIC,IAAI;EAER,KAAKJ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,CAAC,CAACO,MAAM,EAAEL,CAAC,EAAE,EAAE;IAC3B,IAAID,CAAC,KAAK,CAAC,EAAE;MACTG,eAAe,CAACI,IAAI,CAAC,CAACR,CAAC,CAACE,CAAC,CAAC,CAAC,CAAC;IAChC,CAAC,MAAM;MACHG,kBAAkB,GAAGN,YAAY,CAACC,CAAC,CAACS,KAAK,CAACP,CAAC,GAAG,CAAC,EAAEF,CAAC,CAACO,MAAM,CAAC,EAAEN,CAAC,GAAG,CAAC,CAAC;MAClE,KAAKE,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAGE,kBAAkB,CAACE,MAAM,EAAEJ,IAAI,EAAE,EAAE;QACrDG,IAAI,GAAGD,kBAAkB,CAACF,IAAI,CAAC;QAC/BG,IAAI,CAACI,OAAO,CAACV,CAAC,CAACE,CAAC,CAAC,CAAC;QAClBE,eAAe,CAACI,IAAI,CAACF,IAAI,CAAC;MAC9B;IACJ;EACJ;EACA,OAAOF,eAAe;AAC1B;AAEA,eAAeL,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}