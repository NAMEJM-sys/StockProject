{"ast":null,"code":"var _jsxFileName = \"C:\\\\ProPython\\\\Stock2\\\\frontend\\\\src\\\\ComponentsAnalysis\\\\MACDAnalysis1.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport FetchMACDData from '../ComponentsFetch/FetchMACDData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MACDAnalysis1({\n  stockCode\n}) {\n  _s();\n  const [macdData, setMACDData] = useState([]);\n  const [analysisResult, setAnalysisResult] = useState('');\n  const analyzeMACDCrossovers = (macdData, period = 14) => {\n    if (macdData.length < period + 1) {\n      return '데이터가 충분하지 않습니다.';\n    }\n    const lastIndex = macdData.length - 1;\n    const currentMACD = macdData[lastIndex].MACD_Line;\n    const currentSignal = macdData[lastIndex].Signal_Line;\n    const prevMACD = macdData[lastIndex - 1].MACD_Line;\n    const prevSignal = macdData[lastIndex - 1].Signal_Line;\n    let result = `<strong>현재 MACD</strong><br/>`;\n    result += `ㆍMACD: ${currentMACD.toFixed(2)}<br/>`;\n    result += `ㆍSignal: ${currentSignal.toFixed(2)}<br/><br/>`;\n\n    // 1. MACD Line과 Signal Line의 크로스 분석\n    if (prevMACD < prevSignal && currentMACD > currentSignal) {\n      result += '강한 매수 신호: MACD Line이 Signal Line을 아래에서 위로 교차했습니다 (골든 크로스).<br/>';\n    } else if (prevMACD > prevSignal && currentMACD < currentSignal) {\n      result += '강한 매도 신호: MACD Line이 Signal Line을 위에서 아래로 교차했습니다 (데드 크로스).<br/>';\n    } else {\n      result += '현재 MACD와 Signal Line 사이에 특별한 교차 신호가 없습니다.<br/><br/>';\n    }\n\n    // 2. MACD와 Signal의 크로스 예상 시점 계산 (MACD와 Signal 변화량 기반)\n    const macdValues = [];\n    const signalValues = [];\n    const macdChanges = [];\n    const signalChanges = [];\n    for (let i = lastIndex - period; i <= lastIndex; i++) {\n      macdValues.push(macdData[i].MACD_Line);\n      signalValues.push(macdData[i].Signal_Line);\n      if (i > 0) {\n        macdChanges.push(macdData[i].MACD_Line - macdData[i - 1].MACD_Line);\n        signalChanges.push(macdData[i].Signal_Line - macdData[i - 1].Signal_Line);\n      }\n    }\n    const avgMACDChange = macdChanges.reduce((a, b) => a + b, 0) / macdChanges.length;\n    const avgSignalChange = signalChanges.reduce((a, b) => a + b, 0) / signalChanges.length;\n    const macdSignalDiff = currentMACD - currentSignal;\n    const combinedChange = avgMACDChange - avgSignalChange;\n    let daysToCrossover = null;\n    if (combinedChange !== 0) {\n      daysToCrossover = -macdSignalDiff / combinedChange;\n      if (daysToCrossover >= 0 && daysToCrossover <= 3) {\n        result += `현재 추세가 지속된다면 약 ${daysToCrossover.toFixed(1)}일 후에 MACD 크로스오버가 발생할 수 있습니다.<br/>`;\n      } else if (daysToCrossover > 5) {\n        result += `현재 추세가 지속된다면 약 ${daysToCrossover.toFixed(1)}일 후에 MACD 크로스오버가 발생할 것으로 예상됩니다.<br/>`;\n      } else {\n        result += '현재 추세로는 가까운 시일 내에 크로스오버가 발생할 것으로 예상되지 않습니다.<br/>';\n      }\n    } else {\n      result += 'MACD와 Signal Line의 변화율이 동일하여 크로스오버 시점을 예측할 수 없습니다.<br/>';\n    }\n    return result;\n  };\n  useEffect(() => {\n    if (macdData.length > 0) {\n      const result = analyzeMACDCrossovers(macdData);\n      setAnalysisResult(result);\n    }\n  }, [macdData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(FetchMACDData, {\n      stockCode: stockCode,\n      onMACDFetch: setMACDData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"MACD \\uD06C\\uB85C\\uC2A4\\uC624\\uBC84 \\uBC0F \\uC608\\uC0C1 \\uC2DC\\uC810 \\uBD84\\uC11D\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      dangerouslySetInnerHTML: {\n        __html: analysisResult\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n}\n_s(MACDAnalysis1, \"27DMovUClVI7Ji8nju6vqnSpMCo=\");\n_c = MACDAnalysis1;\nexport default MACDAnalysis1;\nvar _c;\n$RefreshReg$(_c, \"MACDAnalysis1\");","map":{"version":3,"names":["React","useState","useEffect","FetchMACDData","jsxDEV","_jsxDEV","MACDAnalysis1","stockCode","_s","macdData","setMACDData","analysisResult","setAnalysisResult","analyzeMACDCrossovers","period","length","lastIndex","currentMACD","MACD_Line","currentSignal","Signal_Line","prevMACD","prevSignal","result","toFixed","macdValues","signalValues","macdChanges","signalChanges","i","push","avgMACDChange","reduce","a","b","avgSignalChange","macdSignalDiff","combinedChange","daysToCrossover","children","onMACDFetch","fileName","_jsxFileName","lineNumber","columnNumber","dangerouslySetInnerHTML","__html","_c","$RefreshReg$"],"sources":["C:/ProPython/Stock2/frontend/src/ComponentsAnalysis/MACDAnalysis1.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport FetchMACDData from '../ComponentsFetch/FetchMACDData';\r\n\r\nfunction MACDAnalysis1({ stockCode }) {\r\n    const [macdData, setMACDData] = useState([]);\r\n    const [analysisResult, setAnalysisResult] = useState('');\r\n\r\n    const analyzeMACDCrossovers = (macdData, period = 14) => {\r\n        if (macdData.length < period + 1) {\r\n            return '데이터가 충분하지 않습니다.';\r\n        }\r\n\r\n        const lastIndex = macdData.length - 1;\r\n        const currentMACD = macdData[lastIndex].MACD_Line;\r\n        const currentSignal = macdData[lastIndex].Signal_Line;\r\n        const prevMACD = macdData[lastIndex - 1].MACD_Line;\r\n        const prevSignal = macdData[lastIndex - 1].Signal_Line;\r\n\r\n        let result = `<strong>현재 MACD</strong><br/>`;\r\n        result += `ㆍMACD: ${currentMACD.toFixed(2)}<br/>`;\r\n        result += `ㆍSignal: ${currentSignal.toFixed(2)}<br/><br/>`;\r\n\r\n        // 1. MACD Line과 Signal Line의 크로스 분석\r\n        if (prevMACD < prevSignal && currentMACD > currentSignal) {\r\n            result += '강한 매수 신호: MACD Line이 Signal Line을 아래에서 위로 교차했습니다 (골든 크로스).<br/>';\r\n        } else if (prevMACD > prevSignal && currentMACD < currentSignal) {\r\n            result += '강한 매도 신호: MACD Line이 Signal Line을 위에서 아래로 교차했습니다 (데드 크로스).<br/>';\r\n        } else {\r\n            result += '현재 MACD와 Signal Line 사이에 특별한 교차 신호가 없습니다.<br/><br/>';\r\n        }\r\n\r\n        // 2. MACD와 Signal의 크로스 예상 시점 계산 (MACD와 Signal 변화량 기반)\r\n        const macdValues = [];\r\n        const signalValues = [];\r\n        const macdChanges = [];\r\n        const signalChanges = [];\r\n\r\n        for (let i = lastIndex - period; i <= lastIndex; i++) {\r\n            macdValues.push(macdData[i].MACD_Line);\r\n            signalValues.push(macdData[i].Signal_Line);\r\n            if (i > 0) {\r\n                macdChanges.push(macdData[i].MACD_Line - macdData[i - 1].MACD_Line);\r\n                signalChanges.push(macdData[i].Signal_Line - macdData[i - 1].Signal_Line);\r\n            }\r\n        }\r\n\r\n        const avgMACDChange = macdChanges.reduce((a, b) => a + b, 0) / macdChanges.length;\r\n        const avgSignalChange = signalChanges.reduce((a, b) => a + b, 0) / signalChanges.length;\r\n        const macdSignalDiff = currentMACD - currentSignal;\r\n        const combinedChange = avgMACDChange - avgSignalChange;\r\n\r\n        let daysToCrossover = null;\r\n\r\n        if (combinedChange !== 0) {\r\n            daysToCrossover = -macdSignalDiff / combinedChange;\r\n            if (daysToCrossover >= 0 && daysToCrossover <= 3) {\r\n                result += `현재 추세가 지속된다면 약 ${daysToCrossover.toFixed(1)}일 후에 MACD 크로스오버가 발생할 수 있습니다.<br/>`;\r\n            } else if (daysToCrossover > 5) {\r\n                result += `현재 추세가 지속된다면 약 ${daysToCrossover.toFixed(1)}일 후에 MACD 크로스오버가 발생할 것으로 예상됩니다.<br/>`;\r\n            } else {\r\n                result += '현재 추세로는 가까운 시일 내에 크로스오버가 발생할 것으로 예상되지 않습니다.<br/>';\r\n            }\r\n        } else {\r\n            result += 'MACD와 Signal Line의 변화율이 동일하여 크로스오버 시점을 예측할 수 없습니다.<br/>';\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (macdData.length > 0) {\r\n            const result = analyzeMACDCrossovers(macdData);\r\n            setAnalysisResult(result);\r\n        }\r\n    }, [macdData]);\r\n\r\n    return (\r\n        <div>\r\n            <FetchMACDData stockCode={stockCode} onMACDFetch={setMACDData} />\r\n            <h4>MACD 크로스오버 및 예상 시점 분석</h4>\r\n            <p dangerouslySetInnerHTML={{ __html: analysisResult }}></p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MACDAnalysis1;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}