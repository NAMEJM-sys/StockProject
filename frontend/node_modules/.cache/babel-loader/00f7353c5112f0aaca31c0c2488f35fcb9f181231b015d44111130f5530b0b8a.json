{"ast":null,"code":"// Define series coefficients\nconst COEFFICIENTS = [0.99999999999999709182, 57.156235665862923517, -59.597960355475491248, 14.136097974741747174, -0.49191381609762019978, 0.33994649984811888699e-4, 0.46523628927048575665e-4, -0.98374475304879564677e-4, 0.15808870322491248884e-3, -0.21026444172410488319e-3, 0.2174396181152126432e-3, -0.16431810653676389022e-3, 0.84418223983852743293e-4, -0.2619083840158140867e-4, 0.36899182659531622704e-5];\nconst g = 607 / 128;\nconst LOGSQRT2PI = Math.log(Math.sqrt(2 * Math.PI));\n\n/**\n * Compute the logarithm of the [gamma function](https://en.wikipedia.org/wiki/Gamma_function) of a value using Lanczos' approximation.\n * This function takes as input any real-value n greater than 0.\n * This function is useful for values of n too large for the normal gamma function (n > 165).\n * The code is based on Lanczo's Gamma approximation, defined [here](http://my.fit.edu/~gabdo/gamma.txt).\n *\n * @param {number} n Any real number greater than zero.\n * @returns {number} The logarithm of gamma of the input value.\n *\n * @example\n * gammaln(500); // 2605.1158503617335\n * gammaln(2.4); // 0.21685932244884043\n */\nfunction gammaln(n) {\n  // Return infinity if value not in domain\n  if (n <= 0) {\n    return Number.POSITIVE_INFINITY;\n  }\n\n  // Decrement n, because approximation is defined for n - 1\n  n--;\n\n  // Create series approximation\n  let a = COEFFICIENTS[0];\n  for (let i = 1; i < 15; i++) {\n    a += COEFFICIENTS[i] / (n + i);\n  }\n  const tmp = g + 0.5 + n;\n\n  // Return natural logarithm of gamma(n)\n  return LOGSQRT2PI + Math.log(a) - tmp + (n + 0.5) * Math.log(tmp);\n}\nexport default gammaln;","map":{"version":3,"names":["COEFFICIENTS","g","LOGSQRT2PI","Math","log","sqrt","PI","gammaln","n","Number","POSITIVE_INFINITY","a","i","tmp"],"sources":["C:/ProPython/Stock2/node_modules/simple-statistics/src/gammaln.js"],"sourcesContent":["// Define series coefficients\nconst COEFFICIENTS = [\n    0.99999999999999709182, 57.156235665862923517, -59.597960355475491248,\n    14.136097974741747174, -0.49191381609762019978, 0.33994649984811888699e-4,\n    0.46523628927048575665e-4, -0.98374475304879564677e-4,\n    0.15808870322491248884e-3, -0.21026444172410488319e-3,\n    0.2174396181152126432e-3, -0.16431810653676389022e-3,\n    0.84418223983852743293e-4, -0.2619083840158140867e-4,\n    0.36899182659531622704e-5\n];\n\nconst g = 607 / 128;\nconst LOGSQRT2PI = Math.log(Math.sqrt(2 * Math.PI));\n\n/**\n * Compute the logarithm of the [gamma function](https://en.wikipedia.org/wiki/Gamma_function) of a value using Lanczos' approximation.\n * This function takes as input any real-value n greater than 0.\n * This function is useful for values of n too large for the normal gamma function (n > 165).\n * The code is based on Lanczo's Gamma approximation, defined [here](http://my.fit.edu/~gabdo/gamma.txt).\n *\n * @param {number} n Any real number greater than zero.\n * @returns {number} The logarithm of gamma of the input value.\n *\n * @example\n * gammaln(500); // 2605.1158503617335\n * gammaln(2.4); // 0.21685932244884043\n */\nfunction gammaln(n) {\n    // Return infinity if value not in domain\n    if (n <= 0) {\n        return Number.POSITIVE_INFINITY;\n    }\n\n    // Decrement n, because approximation is defined for n - 1\n    n--;\n\n    // Create series approximation\n    let a = COEFFICIENTS[0];\n\n    for (let i = 1; i < 15; i++) {\n        a += COEFFICIENTS[i] / (n + i);\n    }\n\n    const tmp = g + 0.5 + n;\n\n    // Return natural logarithm of gamma(n)\n    return LOGSQRT2PI + Math.log(a) - tmp + (n + 0.5) * Math.log(tmp);\n}\n\nexport default gammaln;\n"],"mappings":"AAAA;AACA,MAAMA,YAAY,GAAG,CACjB,sBAAsB,EAAE,qBAAqB,EAAE,CAAC,qBAAqB,EACrE,qBAAqB,EAAE,CAAC,sBAAsB,EAAE,yBAAyB,EACzE,yBAAyB,EAAE,CAAC,yBAAyB,EACrD,yBAAyB,EAAE,CAAC,yBAAyB,EACrD,wBAAwB,EAAE,CAAC,yBAAyB,EACpD,yBAAyB,EAAE,CAAC,wBAAwB,EACpD,yBAAyB,CAC5B;AAED,MAAMC,CAAC,GAAG,GAAG,GAAG,GAAG;AACnB,MAAMC,UAAU,GAAGC,IAAI,CAACC,GAAG,CAACD,IAAI,CAACE,IAAI,CAAC,CAAC,GAAGF,IAAI,CAACG,EAAE,CAAC,CAAC;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,OAAOA,CAACC,CAAC,EAAE;EAChB;EACA,IAAIA,CAAC,IAAI,CAAC,EAAE;IACR,OAAOC,MAAM,CAACC,iBAAiB;EACnC;;EAEA;EACAF,CAAC,EAAE;;EAEH;EACA,IAAIG,CAAC,GAAGX,YAAY,CAAC,CAAC,CAAC;EAEvB,KAAK,IAAIY,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;IACzBD,CAAC,IAAIX,YAAY,CAACY,CAAC,CAAC,IAAIJ,CAAC,GAAGI,CAAC,CAAC;EAClC;EAEA,MAAMC,GAAG,GAAGZ,CAAC,GAAG,GAAG,GAAGO,CAAC;;EAEvB;EACA,OAAON,UAAU,GAAGC,IAAI,CAACC,GAAG,CAACO,CAAC,CAAC,GAAGE,GAAG,GAAG,CAACL,CAAC,GAAG,GAAG,IAAIL,IAAI,CAACC,GAAG,CAACS,GAAG,CAAC;AACrE;AAEA,eAAeN,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}