{"ast":null,"code":"import epsilon from \"./epsilon.js\";\n\n/**\n * The [Binomial Distribution](http://en.wikipedia.org/wiki/Binomial_distribution) is the discrete probability\n * distribution of the number of successes in a sequence of n independent yes/no experiments, each of which yields\n * success with probability `probability`. Such a success/failure experiment is also called a Bernoulli experiment or\n * Bernoulli trial; when trials = 1, the Binomial Distribution is a Bernoulli Distribution.\n *\n * @param {number} trials number of trials to simulate\n * @param {number} probability\n * @returns {number[]} output\n */\nfunction binomialDistribution(trials, probability) /*: ?number[] */{\n  // Check that `p` is a valid probability (0 ≤ p ≤ 1),\n  // that `n` is an integer, strictly positive.\n  if (probability < 0 || probability > 1 || trials <= 0 || trials % 1 !== 0) {\n    return undefined;\n  }\n\n  // We initialize `x`, the random variable, and `accumulator`, an accumulator\n  // for the cumulative distribution function to 0. `distribution_functions`\n  // is the object we'll return with the `probability_of_x` and the\n  // `cumulativeProbability_of_x`, as well as the calculated mean &\n  // variance. We iterate until the `cumulativeProbability_of_x` is\n  // within `epsilon` of 1.0.\n  let x = 0;\n  let cumulativeProbability = 0;\n  const cells = [];\n  let binomialCoefficient = 1;\n\n  // This algorithm iterates through each potential outcome,\n  // until the `cumulativeProbability` is very close to 1, at\n  // which point we've defined the vast majority of outcomes\n  do {\n    // a [probability mass function](https://en.wikipedia.org/wiki/Probability_mass_function)\n    cells[x] = binomialCoefficient * Math.pow(probability, x) * Math.pow(1 - probability, trials - x);\n    cumulativeProbability += cells[x];\n    x++;\n    binomialCoefficient = binomialCoefficient * (trials - x + 1) / x;\n    // when the cumulativeProbability is nearly 1, we've calculated\n    // the useful range of this distribution\n  } while (cumulativeProbability < 1 - epsilon);\n  return cells;\n}\nexport default binomialDistribution;","map":{"version":3,"names":["epsilon","binomialDistribution","trials","probability","undefined","x","cumulativeProbability","cells","binomialCoefficient","Math","pow"],"sources":["C:/ProPython/Stock2/node_modules/simple-statistics/src/binomial_distribution.js"],"sourcesContent":["import epsilon from \"./epsilon.js\";\n\n/**\n * The [Binomial Distribution](http://en.wikipedia.org/wiki/Binomial_distribution) is the discrete probability\n * distribution of the number of successes in a sequence of n independent yes/no experiments, each of which yields\n * success with probability `probability`. Such a success/failure experiment is also called a Bernoulli experiment or\n * Bernoulli trial; when trials = 1, the Binomial Distribution is a Bernoulli Distribution.\n *\n * @param {number} trials number of trials to simulate\n * @param {number} probability\n * @returns {number[]} output\n */\nfunction binomialDistribution(trials, probability) /*: ?number[] */ {\n    // Check that `p` is a valid probability (0 ≤ p ≤ 1),\n    // that `n` is an integer, strictly positive.\n    if (probability < 0 || probability > 1 || trials <= 0 || trials % 1 !== 0) {\n        return undefined;\n    }\n\n    // We initialize `x`, the random variable, and `accumulator`, an accumulator\n    // for the cumulative distribution function to 0. `distribution_functions`\n    // is the object we'll return with the `probability_of_x` and the\n    // `cumulativeProbability_of_x`, as well as the calculated mean &\n    // variance. We iterate until the `cumulativeProbability_of_x` is\n    // within `epsilon` of 1.0.\n    let x = 0;\n    let cumulativeProbability = 0;\n    const cells = [];\n    let binomialCoefficient = 1;\n\n    // This algorithm iterates through each potential outcome,\n    // until the `cumulativeProbability` is very close to 1, at\n    // which point we've defined the vast majority of outcomes\n    do {\n        // a [probability mass function](https://en.wikipedia.org/wiki/Probability_mass_function)\n        cells[x] =\n            binomialCoefficient *\n            Math.pow(probability, x) *\n            Math.pow(1 - probability, trials - x);\n        cumulativeProbability += cells[x];\n        x++;\n        binomialCoefficient = (binomialCoefficient * (trials - x + 1)) / x;\n        // when the cumulativeProbability is nearly 1, we've calculated\n        // the useful range of this distribution\n    } while (cumulativeProbability < 1 - epsilon);\n\n    return cells;\n}\n\nexport default binomialDistribution;\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,cAAc;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,oBAAoBA,CAACC,MAAM,EAAEC,WAAW,EAAE,gBAAiB;EAChE;EACA;EACA,IAAIA,WAAW,GAAG,CAAC,IAAIA,WAAW,GAAG,CAAC,IAAID,MAAM,IAAI,CAAC,IAAIA,MAAM,GAAG,CAAC,KAAK,CAAC,EAAE;IACvE,OAAOE,SAAS;EACpB;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA,IAAIC,CAAC,GAAG,CAAC;EACT,IAAIC,qBAAqB,GAAG,CAAC;EAC7B,MAAMC,KAAK,GAAG,EAAE;EAChB,IAAIC,mBAAmB,GAAG,CAAC;;EAE3B;EACA;EACA;EACA,GAAG;IACC;IACAD,KAAK,CAACF,CAAC,CAAC,GACJG,mBAAmB,GACnBC,IAAI,CAACC,GAAG,CAACP,WAAW,EAAEE,CAAC,CAAC,GACxBI,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGP,WAAW,EAAED,MAAM,GAAGG,CAAC,CAAC;IACzCC,qBAAqB,IAAIC,KAAK,CAACF,CAAC,CAAC;IACjCA,CAAC,EAAE;IACHG,mBAAmB,GAAIA,mBAAmB,IAAIN,MAAM,GAAGG,CAAC,GAAG,CAAC,CAAC,GAAIA,CAAC;IAClE;IACA;EACJ,CAAC,QAAQC,qBAAqB,GAAG,CAAC,GAAGN,OAAO;EAE5C,OAAOO,KAAK;AAChB;AAEA,eAAeN,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}