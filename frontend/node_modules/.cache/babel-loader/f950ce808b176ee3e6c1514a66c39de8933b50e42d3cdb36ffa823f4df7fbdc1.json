{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nfunction FetchRealTimeDataForCloseChart({\n  stockCode,\n  onSDFCFetch\n}) {\n  _s();\n  const [stockData, setStockData] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(`http://127.0.0.1:8000/api/post_stock_real_data_for_code/${stockCode}/`);\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n        if (data && data.length > 0) {\n          const latestData = data[data.length - 1]; // 새로 가져온 데이터의 마지막 포인트\n          const lastStockData = stockData.length > 0 ? stockData[stockData.length - 1] : null;\n\n          // 마지막 데이터 포인트의 날짜가 다르면 새로운 데이터 포인트 추가\n          if (!lastStockData || new Date(latestData.date).getTime() !== new Date(lastStockData.date).getTime()) {\n            const updatedStockData = [...stockData, latestData];\n            setStockData(updatedStockData);\n            if (onSDFCFetch) {\n              onSDFCFetch(updatedStockData);\n            }\n            console.log('Data updated:', latestData);\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching chart data:', error);\n      }\n    };\n\n    // 최초 1회 데이터 호출\n    fetchData();\n\n    // 주기적으로 데이터 갱신 (10초마다)\n    const intervalId = setInterval(fetchData, 10000);\n\n    // 컴포넌트 언마운트 시 인터벌 클리어\n    return () => clearInterval(intervalId);\n  }, [stockCode, stockData, onSDFCFetch]);\n  return null;\n}\n_s(FetchRealTimeDataForCloseChart, \"UHMRx5rd6U+J7YyAJ82PYuAdhyc=\");\n_c = FetchRealTimeDataForCloseChart;\nexport default FetchRealTimeDataForCloseChart;\nvar _c;\n$RefreshReg$(_c, \"FetchRealTimeDataForCloseChart\");","map":{"version":3,"names":["useState","useEffect","FetchRealTimeDataForCloseChart","stockCode","onSDFCFetch","_s","stockData","setStockData","fetchData","response","fetch","ok","Error","data","json","length","latestData","lastStockData","Date","date","getTime","updatedStockData","console","log","error","intervalId","setInterval","clearInterval","_c","$RefreshReg$"],"sources":["C:/ProPython/Stock2/frontend/src/ComponentsFetch/FetchStockOrignal/FetchRealTimeDataForCloseChart.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nfunction FetchRealTimeDataForCloseChart({ stockCode, onSDFCFetch }) {\r\n    const [stockData, setStockData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const response = await fetch(`http://127.0.0.1:8000/api/post_stock_real_data_for_code/${stockCode}/`);\r\n                if (!response.ok) {\r\n                    throw new Error('Network response was not ok');\r\n                }\r\n                const data = await response.json();\r\n\r\n                if (data && data.length > 0) {\r\n                    const latestData = data[data.length - 1]; // 새로 가져온 데이터의 마지막 포인트\r\n                    const lastStockData = stockData.length > 0 ? stockData[stockData.length - 1] : null;\r\n\r\n                    // 마지막 데이터 포인트의 날짜가 다르면 새로운 데이터 포인트 추가\r\n                    if (!lastStockData || new Date(latestData.date).getTime() !== new Date(lastStockData.date).getTime()) {\r\n                        const updatedStockData = [...stockData, latestData];\r\n                        setStockData(updatedStockData);\r\n                        if (onSDFCFetch) {\r\n                            onSDFCFetch(updatedStockData);\r\n                        }\r\n                        console.log('Data updated:', latestData);\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching chart data:', error);\r\n            }\r\n        };\r\n\r\n        // 최초 1회 데이터 호출\r\n        fetchData();\r\n\r\n        // 주기적으로 데이터 갱신 (10초마다)\r\n        const intervalId = setInterval(fetchData, 10000);\r\n\r\n        // 컴포넌트 언마운트 시 인터벌 클리어\r\n        return () => clearInterval(intervalId);\r\n    }, [stockCode, stockData, onSDFCFetch]);\r\n\r\n    return null;\r\n}\r\n\r\nexport default FetchRealTimeDataForCloseChart;"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,SAASC,8BAA8BA,CAAC;EAAEC,SAAS;EAAEC;AAAY,CAAC,EAAE;EAAAC,EAAA;EAChE,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAE9CC,SAAS,CAAC,MAAM;IACZ,MAAMO,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,2DAA2DP,SAAS,GAAG,CAAC;QACrG,IAAI,CAACM,QAAQ,CAACE,EAAE,EAAE;UACd,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;QAClD;QACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QAElC,IAAID,IAAI,IAAIA,IAAI,CAACE,MAAM,GAAG,CAAC,EAAE;UACzB,MAAMC,UAAU,GAAGH,IAAI,CAACA,IAAI,CAACE,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;UAC1C,MAAME,aAAa,GAAGX,SAAS,CAACS,MAAM,GAAG,CAAC,GAAGT,SAAS,CAACA,SAAS,CAACS,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI;;UAEnF;UACA,IAAI,CAACE,aAAa,IAAI,IAAIC,IAAI,CAACF,UAAU,CAACG,IAAI,CAAC,CAACC,OAAO,CAAC,CAAC,KAAK,IAAIF,IAAI,CAACD,aAAa,CAACE,IAAI,CAAC,CAACC,OAAO,CAAC,CAAC,EAAE;YAClG,MAAMC,gBAAgB,GAAG,CAAC,GAAGf,SAAS,EAAEU,UAAU,CAAC;YACnDT,YAAY,CAACc,gBAAgB,CAAC;YAC9B,IAAIjB,WAAW,EAAE;cACbA,WAAW,CAACiB,gBAAgB,CAAC;YACjC;YACAC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEP,UAAU,CAAC;UAC5C;QACJ;MACJ,CAAC,CAAC,OAAOQ,KAAK,EAAE;QACZF,OAAO,CAACE,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACtD;IACJ,CAAC;;IAED;IACAhB,SAAS,CAAC,CAAC;;IAEX;IACA,MAAMiB,UAAU,GAAGC,WAAW,CAAClB,SAAS,EAAE,KAAK,CAAC;;IAEhD;IACA,OAAO,MAAMmB,aAAa,CAACF,UAAU,CAAC;EAC1C,CAAC,EAAE,CAACtB,SAAS,EAAEG,SAAS,EAAEF,WAAW,CAAC,CAAC;EAEvC,OAAO,IAAI;AACf;AAACC,EAAA,CA1CQH,8BAA8B;AAAA0B,EAAA,GAA9B1B,8BAA8B;AA4CvC,eAAeA,8BAA8B;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}