{"ast":null,"code":"var _jsxFileName = \"C:\\\\ProPython\\\\Stock2\\\\frontend\\\\src\\\\ComponentsAnalysis\\\\IchimokuAnalysis4.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport FetchIchimokuData from '../ComponentsFetch/FetchIchimokuData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction IchimokuAnalysis4({\n  stockCode\n}) {\n  _s();\n  const [ichimokuData, setIchimokuData] = useState([]);\n  const [analysisResult, setAnalysisResult] = useState('');\n  const analyzeCloudThicknessAndColor = data => {\n    if (data.length < 52) {\n      return '데이터가 충분하지 않습니다.';\n    }\n    const lastIndex = data.length - 26; // 구름대는 26일 앞에 표시됨\n    const currentData = data[lastIndex];\n    const senkouA = currentData.Senkou_Span_A;\n    const senkouB = currentData.Senkou_Span_B;\n    const cloudColor = currentData.Cloud_Colour;\n    let result = '<strong>구름대의 두께와 색상 분석</strong><br/><br/>';\n\n    // 구름대 두께 계산\n    const cloudThickness = Math.abs(senkouA - senkouB);\n    result += `현재 구름대의 두께는 <strong>${cloudThickness.toFixed(2)}</strong>입니다.<br/>`;\n    if (cloudThickness > currentData.close * 0.03) {\n      // 구름대 두께가 가격의 3% 이상인 경우\n      result += '→ 구름대가 두꺼워 강한 지지 또는 저항을 나타냅니다.<br/>';\n    } else {\n      result += '→ 구름대가 얇아 지지 또는 저항이 약할 수 있습니다.<br/>';\n    }\n\n    // 구름대 색상 분석\n    if (cloudColor === 'Bullish') {\n      result += '구름대가 <strong>상승 구름</strong>으로 향후 상승 추세를 예상할 수 있습니다.<br/>';\n    } else {\n      result += '구름대가 <strong>하락 구름</strong>으로 향후 하락 추세를 예상할 수 있습니다.<br/>';\n    }\n    return result;\n  };\n  useEffect(() => {\n    if (ichimokuData.length > 0) {\n      const result = analyzeCloudThicknessAndColor(ichimokuData);\n      setAnalysisResult(result);\n    }\n  }, [ichimokuData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(FetchIchimokuData, {\n      stockCode: stockCode,\n      onIchimokuFetch: setIchimokuData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Ichimoku Cloud \\uAD6C\\uB984\\uB300 \\uB450\\uAED8 \\uBC0F \\uC0C9\\uC0C1 \\uBD84\\uC11D\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      dangerouslySetInnerHTML: {\n        __html: analysisResult\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n}\n_s(IchimokuAnalysis4, \"cbvlJTPc1AjlqxLi3pd4z1dZId0=\");\n_c = IchimokuAnalysis4;\nexport default IchimokuAnalysis4;\nvar _c;\n$RefreshReg$(_c, \"IchimokuAnalysis4\");","map":{"version":3,"names":["React","useState","useEffect","FetchIchimokuData","jsxDEV","_jsxDEV","IchimokuAnalysis4","stockCode","_s","ichimokuData","setIchimokuData","analysisResult","setAnalysisResult","analyzeCloudThicknessAndColor","data","length","lastIndex","currentData","senkouA","Senkou_Span_A","senkouB","Senkou_Span_B","cloudColor","Cloud_Colour","result","cloudThickness","Math","abs","toFixed","close","children","onIchimokuFetch","fileName","_jsxFileName","lineNumber","columnNumber","dangerouslySetInnerHTML","__html","_c","$RefreshReg$"],"sources":["C:/ProPython/Stock2/frontend/src/ComponentsAnalysis/IchimokuAnalysis4.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport FetchIchimokuData from '../ComponentsFetch/FetchIchimokuData';\r\n\r\nfunction IchimokuAnalysis4({ stockCode }) {\r\n    const [ichimokuData, setIchimokuData] = useState([]);\r\n    const [analysisResult, setAnalysisResult] = useState('');\r\n\r\n    const analyzeCloudThicknessAndColor = (data) => {\r\n        if (data.length < 52) {\r\n            return '데이터가 충분하지 않습니다.';\r\n        }\r\n\r\n        const lastIndex = data.length - 26; // 구름대는 26일 앞에 표시됨\r\n        const currentData = data[lastIndex];\r\n\r\n        const senkouA = currentData.Senkou_Span_A;\r\n        const senkouB = currentData.Senkou_Span_B;\r\n        const cloudColor = currentData.Cloud_Colour;\r\n\r\n        let result = '<strong>구름대의 두께와 색상 분석</strong><br/><br/>';\r\n\r\n        // 구름대 두께 계산\r\n        const cloudThickness = Math.abs(senkouA - senkouB);\r\n\r\n        result += `현재 구름대의 두께는 <strong>${cloudThickness.toFixed(2)}</strong>입니다.<br/>`;\r\n\r\n        if (cloudThickness > (currentData.close * 0.03)) { // 구름대 두께가 가격의 3% 이상인 경우\r\n            result += '→ 구름대가 두꺼워 강한 지지 또는 저항을 나타냅니다.<br/>';\r\n        } else {\r\n            result += '→ 구름대가 얇아 지지 또는 저항이 약할 수 있습니다.<br/>';\r\n        }\r\n\r\n        // 구름대 색상 분석\r\n        if (cloudColor === 'Bullish') {\r\n            result += '구름대가 <strong>상승 구름</strong>으로 향후 상승 추세를 예상할 수 있습니다.<br/>';\r\n        } else {\r\n            result += '구름대가 <strong>하락 구름</strong>으로 향후 하락 추세를 예상할 수 있습니다.<br/>';\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (ichimokuData.length > 0) {\r\n            const result = analyzeCloudThicknessAndColor(ichimokuData);\r\n            setAnalysisResult(result);\r\n        }\r\n    }, [ichimokuData]);\r\n\r\n    return (\r\n        <div>\r\n            <FetchIchimokuData stockCode={stockCode} onIchimokuFetch={setIchimokuData} />\r\n            <h4>Ichimoku Cloud 구름대 두께 및 색상 분석</h4>\r\n            <p dangerouslySetInnerHTML={{ __html: analysisResult }}></p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default IchimokuAnalysis4;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,iBAAiB,MAAM,sCAAsC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErE,SAASC,iBAAiBA,CAAC;EAAEC;AAAU,CAAC,EAAE;EAAAC,EAAA;EACtC,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACU,cAAc,EAAEC,iBAAiB,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAExD,MAAMY,6BAA6B,GAAIC,IAAI,IAAK;IAC5C,IAAIA,IAAI,CAACC,MAAM,GAAG,EAAE,EAAE;MAClB,OAAO,iBAAiB;IAC5B;IAEA,MAAMC,SAAS,GAAGF,IAAI,CAACC,MAAM,GAAG,EAAE,CAAC,CAAC;IACpC,MAAME,WAAW,GAAGH,IAAI,CAACE,SAAS,CAAC;IAEnC,MAAME,OAAO,GAAGD,WAAW,CAACE,aAAa;IACzC,MAAMC,OAAO,GAAGH,WAAW,CAACI,aAAa;IACzC,MAAMC,UAAU,GAAGL,WAAW,CAACM,YAAY;IAE3C,IAAIC,MAAM,GAAG,2CAA2C;;IAExD;IACA,MAAMC,cAAc,GAAGC,IAAI,CAACC,GAAG,CAACT,OAAO,GAAGE,OAAO,CAAC;IAElDI,MAAM,IAAI,uBAAuBC,cAAc,CAACG,OAAO,CAAC,CAAC,CAAC,oBAAoB;IAE9E,IAAIH,cAAc,GAAIR,WAAW,CAACY,KAAK,GAAG,IAAK,EAAE;MAAE;MAC/CL,MAAM,IAAI,qCAAqC;IACnD,CAAC,MAAM;MACHA,MAAM,IAAI,qCAAqC;IACnD;;IAEA;IACA,IAAIF,UAAU,KAAK,SAAS,EAAE;MAC1BE,MAAM,IAAI,0DAA0D;IACxE,CAAC,MAAM;MACHA,MAAM,IAAI,0DAA0D;IACxE;IAEA,OAAOA,MAAM;EACjB,CAAC;EAEDtB,SAAS,CAAC,MAAM;IACZ,IAAIO,YAAY,CAACM,MAAM,GAAG,CAAC,EAAE;MACzB,MAAMS,MAAM,GAAGX,6BAA6B,CAACJ,YAAY,CAAC;MAC1DG,iBAAiB,CAACY,MAAM,CAAC;IAC7B;EACJ,CAAC,EAAE,CAACf,YAAY,CAAC,CAAC;EAElB,oBACIJ,OAAA;IAAAyB,QAAA,gBACIzB,OAAA,CAACF,iBAAiB;MAACI,SAAS,EAAEA,SAAU;MAACwB,eAAe,EAAErB;IAAgB;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC7E9B,OAAA;MAAAyB,QAAA,EAAI;IAA6B;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtC9B,OAAA;MAAG+B,uBAAuB,EAAE;QAAEC,MAAM,EAAE1B;MAAe;IAAE;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3D,CAAC;AAEd;AAAC3B,EAAA,CArDQF,iBAAiB;AAAAgC,EAAA,GAAjBhC,iBAAiB;AAuD1B,eAAeA,iBAAiB;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}