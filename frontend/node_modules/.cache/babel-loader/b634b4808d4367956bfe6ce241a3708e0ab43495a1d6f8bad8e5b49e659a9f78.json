{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nfunction FetchRealTimeDataForCloseChart({\n  stockCode,\n  onSDFCFetch\n}) {\n  _s();\n  const [stockData, setStockData] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(`http://127.0.0.1:8000/api/post_stock_real_data_for_code/${stockCode}/`);\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n\n        // 이전 데이터와 비교하여 다른 경우에만 업데이트\n        if (JSON.stringify(data) !== JSON.stringify(stockData)) {\n          setStockData(data);\n          if (onSDFCFetch) {\n            onSDFCFetch(data);\n          }\n          console.log(data);\n        }\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n\n    // 페이지 로드 시 데이터 최초 1회 호출\n    fetchData();\n\n    // 주기적으로 데이터를 갱신 (10초마다 호출)\n    const intervalId = setInterval(fetchData, 10000); // 주기 10초로 변경\n\n    // 컴포넌트 언마운트 시 인터벌 클리어\n    return () => clearInterval(intervalId);\n  }, [stockCode, stockData, onSDFCFetch]);\n  return null;\n}\n_s(FetchRealTimeDataForCloseChart, \"UHMRx5rd6U+J7YyAJ82PYuAdhyc=\");\n_c = FetchRealTimeDataForCloseChart;\nexport default FetchRealTimeDataForCloseChart;\nvar _c;\n$RefreshReg$(_c, \"FetchRealTimeDataForCloseChart\");","map":{"version":3,"names":["useEffect","useState","FetchRealTimeDataForCloseChart","stockCode","onSDFCFetch","_s","stockData","setStockData","fetchData","response","fetch","ok","Error","data","json","JSON","stringify","console","log","error","intervalId","setInterval","clearInterval","_c","$RefreshReg$"],"sources":["C:/ProPython/Stock2/frontend/src/ComponentsFetch/FetchStockOrignal/FetchRealTimeDataForCloseChart.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nfunction FetchRealTimeDataForCloseChart({ stockCode, onSDFCFetch }) {\r\n    const [stockData, setStockData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const response = await fetch(`http://127.0.0.1:8000/api/post_stock_real_data_for_code/${stockCode}/`);\r\n                if (!response.ok) {\r\n                    throw new Error('Network response was not ok');\r\n                }\r\n                const data = await response.json();\r\n\r\n                // 이전 데이터와 비교하여 다른 경우에만 업데이트\r\n                if (JSON.stringify(data) !== JSON.stringify(stockData)) {\r\n                    setStockData(data);\r\n                    if (onSDFCFetch) {\r\n                        onSDFCFetch(data);\r\n                    }\r\n                    console.log(data);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching data:', error);\r\n            }\r\n        };\r\n\r\n        // 페이지 로드 시 데이터 최초 1회 호출\r\n        fetchData();\r\n\r\n        // 주기적으로 데이터를 갱신 (10초마다 호출)\r\n        const intervalId = setInterval(fetchData, 10000);  // 주기 10초로 변경\r\n\r\n        // 컴포넌트 언마운트 시 인터벌 클리어\r\n        return () => clearInterval(intervalId);\r\n    }, [stockCode, stockData, onSDFCFetch]);\r\n\r\n    return null;\r\n}\r\n\r\nexport default FetchRealTimeDataForCloseChart;"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,SAASC,8BAA8BA,CAAC;EAAEC,SAAS;EAAEC;AAAY,CAAC,EAAE;EAAAC,EAAA;EAChE,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAE9CD,SAAS,CAAC,MAAM;IACZ,MAAMQ,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,2DAA2DP,SAAS,GAAG,CAAC;QACrG,IAAI,CAACM,QAAQ,CAACE,EAAE,EAAE;UACd,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;QAClD;QACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;;QAElC;QACA,IAAIC,IAAI,CAACC,SAAS,CAACH,IAAI,CAAC,KAAKE,IAAI,CAACC,SAAS,CAACV,SAAS,CAAC,EAAE;UACpDC,YAAY,CAACM,IAAI,CAAC;UAClB,IAAIT,WAAW,EAAE;YACbA,WAAW,CAACS,IAAI,CAAC;UACrB;UACAI,OAAO,CAACC,GAAG,CAACL,IAAI,CAAC;QACrB;MACJ,CAAC,CAAC,OAAOM,KAAK,EAAE;QACZF,OAAO,CAACE,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAChD;IACJ,CAAC;;IAED;IACAX,SAAS,CAAC,CAAC;;IAEX;IACA,MAAMY,UAAU,GAAGC,WAAW,CAACb,SAAS,EAAE,KAAK,CAAC,CAAC,CAAE;;IAEnD;IACA,OAAO,MAAMc,aAAa,CAACF,UAAU,CAAC;EAC1C,CAAC,EAAE,CAACjB,SAAS,EAAEG,SAAS,EAAEF,WAAW,CAAC,CAAC;EAEvC,OAAO,IAAI;AACf;AAACC,EAAA,CApCQH,8BAA8B;AAAAqB,EAAA,GAA9BrB,8BAA8B;AAsCvC,eAAeA,8BAA8B;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}