{"ast":null,"code":"/**\n * This is the internal implementation of quantiles: when you know\n * that the order is sorted, you don't need to re-sort it, and the computations\n * are faster.\n *\n * @param {Array<number>} x sample of one or more data points\n * @param {number} p desired quantile: a number between 0 to 1, inclusive\n * @returns {number} quantile value\n * @throws {Error} if p ix outside of the range from 0 to 1\n * @throws {Error} if x is empty\n * @example\n * quantileSorted([3, 6, 7, 8, 8, 9, 10, 13, 15, 16, 20], 0.5); // => 9\n */\nfunction quantileSorted(x, p) {\n  const idx = x.length * p;\n  if (x.length === 0) {\n    throw new Error(\"quantile requires at least one data point.\");\n  } else if (p < 0 || p > 1) {\n    throw new Error(\"quantiles must be between 0 and 1\");\n  } else if (p === 1) {\n    // If p is 1, directly return the last element\n    return x[x.length - 1];\n  } else if (p === 0) {\n    // If p is 0, directly return the first element\n    return x[0];\n  } else if (idx % 1 !== 0) {\n    // If p is not integer, return the next element in array\n    return x[Math.ceil(idx) - 1];\n  } else if (x.length % 2 === 0) {\n    // If the list has even-length, we'll take the average of this number\n    // and the next value, if there is one\n    return (x[idx - 1] + x[idx]) / 2;\n  } else {\n    // Finally, in the simple case of an integer value\n    // with an odd-length list, return the x value at the index.\n    return x[idx];\n  }\n}\nexport default quantileSorted;","map":{"version":3,"names":["quantileSorted","x","p","idx","length","Error","Math","ceil"],"sources":["C:/ProPython/Stock2/node_modules/simple-statistics/src/quantile_sorted.js"],"sourcesContent":["/**\n * This is the internal implementation of quantiles: when you know\n * that the order is sorted, you don't need to re-sort it, and the computations\n * are faster.\n *\n * @param {Array<number>} x sample of one or more data points\n * @param {number} p desired quantile: a number between 0 to 1, inclusive\n * @returns {number} quantile value\n * @throws {Error} if p ix outside of the range from 0 to 1\n * @throws {Error} if x is empty\n * @example\n * quantileSorted([3, 6, 7, 8, 8, 9, 10, 13, 15, 16, 20], 0.5); // => 9\n */\nfunction quantileSorted(x, p) {\n    const idx = x.length * p;\n    if (x.length === 0) {\n        throw new Error(\"quantile requires at least one data point.\");\n    } else if (p < 0 || p > 1) {\n        throw new Error(\"quantiles must be between 0 and 1\");\n    } else if (p === 1) {\n        // If p is 1, directly return the last element\n        return x[x.length - 1];\n    } else if (p === 0) {\n        // If p is 0, directly return the first element\n        return x[0];\n    } else if (idx % 1 !== 0) {\n        // If p is not integer, return the next element in array\n        return x[Math.ceil(idx) - 1];\n    } else if (x.length % 2 === 0) {\n        // If the list has even-length, we'll take the average of this number\n        // and the next value, if there is one\n        return (x[idx - 1] + x[idx]) / 2;\n    } else {\n        // Finally, in the simple case of an integer value\n        // with an odd-length list, return the x value at the index.\n        return x[idx];\n    }\n}\n\nexport default quantileSorted;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,cAAcA,CAACC,CAAC,EAAEC,CAAC,EAAE;EAC1B,MAAMC,GAAG,GAAGF,CAAC,CAACG,MAAM,GAAGF,CAAC;EACxB,IAAID,CAAC,CAACG,MAAM,KAAK,CAAC,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,4CAA4C,CAAC;EACjE,CAAC,MAAM,IAAIH,CAAC,GAAG,CAAC,IAAIA,CAAC,GAAG,CAAC,EAAE;IACvB,MAAM,IAAIG,KAAK,CAAC,mCAAmC,CAAC;EACxD,CAAC,MAAM,IAAIH,CAAC,KAAK,CAAC,EAAE;IAChB;IACA,OAAOD,CAAC,CAACA,CAAC,CAACG,MAAM,GAAG,CAAC,CAAC;EAC1B,CAAC,MAAM,IAAIF,CAAC,KAAK,CAAC,EAAE;IAChB;IACA,OAAOD,CAAC,CAAC,CAAC,CAAC;EACf,CAAC,MAAM,IAAIE,GAAG,GAAG,CAAC,KAAK,CAAC,EAAE;IACtB;IACA,OAAOF,CAAC,CAACK,IAAI,CAACC,IAAI,CAACJ,GAAG,CAAC,GAAG,CAAC,CAAC;EAChC,CAAC,MAAM,IAAIF,CAAC,CAACG,MAAM,GAAG,CAAC,KAAK,CAAC,EAAE;IAC3B;IACA;IACA,OAAO,CAACH,CAAC,CAACE,GAAG,GAAG,CAAC,CAAC,GAAGF,CAAC,CAACE,GAAG,CAAC,IAAI,CAAC;EACpC,CAAC,MAAM;IACH;IACA;IACA,OAAOF,CAAC,CAACE,GAAG,CAAC;EACjB;AACJ;AAEA,eAAeH,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}