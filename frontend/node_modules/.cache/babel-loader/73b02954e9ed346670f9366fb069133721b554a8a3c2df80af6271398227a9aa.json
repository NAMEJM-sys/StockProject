{"ast":null,"code":"var _jsxFileName = \"C:\\\\ProPython\\\\Stock2\\\\frontend\\\\src\\\\components\\\\ChartOfClose.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChartOfClose({\n  stockCode\n}) {\n  _s();\n  const [stockData, setStockData] = useState([]);\n  const [filteredData, setFilteredData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true); // 데이터 로딩 상태 관리\n  const [error, setError] = useState(null); // 에러 상태 관리\n\n  const fetchStockData = async () => {\n    try {\n      const response = await fetch('http://127.0.0.1:8000/api/stock_data/');\n      if (!response.ok) {\n        throw new Error('데이터를 가져오는 데 실패했습니다.');\n      }\n      const data = await response.json();\n      setStockData(data);\n      setIsLoading(false);\n    } catch (err) {\n      console.error('Error fetching stock data:', err);\n      setError(err.message);\n      setIsLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchStockData();\n  }, []);\n\n  // stockData 또는 stockCode 변경 시 데이터 필터링\n  useEffect(() => {\n    if (stockData.length > 0 && stockCode) {\n      const dataForChart = stockData.filter(item => item.stock_code === stockCode).map(item => {\n        const date = new Date(item.date);\n        const formattedDate = `${(date.getMonth() + 1).toString().padStart(2, '0')}.${date.getDate().toString().padStart(2, '0')}`;\n        return {\n          date: formattedDate,\n          close: item.close\n        };\n      }).sort((a, b) => new Date(a.date) - new Date(b.date)); // 날짜 순으로 정렬\n\n      console.log('Filtered Data for Chart:', dataForChart);\n      setFilteredData(dataForChart);\n    }\n  }, [stockData, stockCode]);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\uB370\\uC774\\uD130\\uB97C \\uBD88\\uB7EC\\uC624\\uB294 \\uC911...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 16\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"\\uC5D0\\uB7EC \\uBC1C\\uC0DD: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 16\n    }, this);\n  }\n  if (filteredData.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\uC120\\uD0DD\\uD55C \\uC885\\uBAA9\\uC758 \\uB370\\uC774\\uD130\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 16\n    }, this);\n  }\n  const options = {\n    title: {\n      text: 'Stock Close Price'\n    },\n    xAxis: {\n      categories: filteredData.map(item => item.date)\n    },\n    series: [{\n      name: 'Close Price',\n      data: filteredData.map(item => item.close)\n    }],\n    chart: {\n      type: 'line',\n      height: 300\n    },\n    legend: {\n      enabled: true\n    },\n    tooltip: {\n      shared: true,\n      crosshairs: true\n    },\n    plotOptions: {\n      line: {\n        marker: {\n          enabled: false // 모든 데이터 포인트의 마커를 비활성화\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(HighchartsReact, {\n      highcharts: Highcharts,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 9\n  }, this);\n}\n_s(ChartOfClose, \"GYbt5cy/iOoBoOueFtP9fIK14KY=\");\n_c = ChartOfClose;\nexport default ChartOfClose;\nvar _c;\n$RefreshReg$(_c, \"ChartOfClose\");","map":{"version":3,"names":["React","useState","useEffect","Highcharts","HighchartsReact","jsxDEV","_jsxDEV","ChartOfClose","stockCode","_s","stockData","setStockData","filteredData","setFilteredData","isLoading","setIsLoading","error","setError","fetchStockData","response","fetch","ok","Error","data","json","err","console","message","length","dataForChart","filter","item","stock_code","map","date","Date","formattedDate","getMonth","toString","padStart","getDate","close","sort","a","b","log","children","fileName","_jsxFileName","lineNumber","columnNumber","options","title","text","xAxis","categories","series","name","chart","type","height","legend","enabled","tooltip","shared","crosshairs","plotOptions","line","marker","highcharts","_c","$RefreshReg$"],"sources":["C:/ProPython/Stock2/frontend/src/components/ChartOfClose.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\n\r\nfunction ChartOfClose({ stockCode }) {\r\n    const [stockData, setStockData] = useState([]);\r\n    const [filteredData, setFilteredData] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(true); // 데이터 로딩 상태 관리\r\n    const [error, setError] = useState(null); // 에러 상태 관리\r\n\r\n    const fetchStockData = async () => {\r\n        try {\r\n            const response = await fetch('http://127.0.0.1:8000/api/stock_data/');\r\n            if (!response.ok) {\r\n                throw new Error('데이터를 가져오는 데 실패했습니다.');\r\n            }\r\n            const data = await response.json();\r\n            setStockData(data);\r\n            setIsLoading(false);\r\n        } catch (err) {\r\n            console.error('Error fetching stock data:', err);\r\n            setError(err.message);\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchStockData();\r\n    }, []);\r\n\r\n    // stockData 또는 stockCode 변경 시 데이터 필터링\r\n    useEffect(() => {\r\n        if (stockData.length > 0 && stockCode) {\r\n            const dataForChart = stockData\r\n                .filter(item => item.stock_code === stockCode)\r\n                .map(item => {\r\n                    const date = new Date(item.date);\r\n                    const formattedDate = `${(date.getMonth() + 1).toString().padStart(2, '0')}.${date.getDate().toString().padStart(2, '0')}`;\r\n                    return {\r\n                        date: formattedDate,\r\n                        close: item.close,\r\n                    };\r\n                })\r\n                .sort((a, b) => new Date(a.date) - new Date(b.date)); // 날짜 순으로 정렬\r\n\r\n            console.log('Filtered Data for Chart:', dataForChart);\r\n            setFilteredData(dataForChart);\r\n        }\r\n    }, [stockData, stockCode]);\r\n\r\n    if (isLoading) {\r\n        return <div>데이터를 불러오는 중...</div>;\r\n    }\r\n\r\n    if (error) {\r\n        return <div>에러 발생: {error}</div>;\r\n    }\r\n\r\n    if (filteredData.length === 0) {\r\n        return <div>선택한 종목의 데이터가 없습니다.</div>;\r\n    }\r\n\r\n    const options = {\r\n        title: {\r\n            text: 'Stock Close Price'\r\n        },\r\n        xAxis: {\r\n            categories: filteredData.map(item => item.date),\r\n        },\r\n        series: [\r\n            {\r\n                name: 'Close Price',\r\n                data: filteredData.map(item => item.close),\r\n            }\r\n        ],\r\n        chart: {\r\n            type: 'line',\r\n            height: 300,\r\n\r\n        },\r\n        legend: {\r\n            enabled: true,\r\n        },\r\n        tooltip: {\r\n            shared: true,\r\n            crosshairs: true\r\n        },\r\n        plotOptions: {\r\n        line: {\r\n            marker: {\r\n                enabled: false  // 모든 데이터 포인트의 마커를 비활성화\r\n            }\r\n        }\r\n    }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <HighchartsReact highcharts={Highcharts} options={options} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChartOfClose;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,UAAU,MAAM,YAAY;AACnC,OAAOC,eAAe,MAAM,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExD,SAASC,YAAYA,CAAC;EAAEC;AAAU,CAAC,EAAE;EAAAC,EAAA;EACjC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACW,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACa,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAClD,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE1C,MAAMiB,cAAc,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,uCAAuC,CAAC;MACrE,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC;MAC1C;MACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAClCb,YAAY,CAACY,IAAI,CAAC;MAClBR,YAAY,CAAC,KAAK,CAAC;IACvB,CAAC,CAAC,OAAOU,GAAG,EAAE;MACVC,OAAO,CAACV,KAAK,CAAC,4BAA4B,EAAES,GAAG,CAAC;MAChDR,QAAQ,CAACQ,GAAG,CAACE,OAAO,CAAC;MACrBZ,YAAY,CAAC,KAAK,CAAC;IACvB;EACJ,CAAC;EAEDb,SAAS,CAAC,MAAM;IACZgB,cAAc,CAAC,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAhB,SAAS,CAAC,MAAM;IACZ,IAAIQ,SAAS,CAACkB,MAAM,GAAG,CAAC,IAAIpB,SAAS,EAAE;MACnC,MAAMqB,YAAY,GAAGnB,SAAS,CACzBoB,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,UAAU,KAAKxB,SAAS,CAAC,CAC7CyB,GAAG,CAACF,IAAI,IAAI;QACT,MAAMG,IAAI,GAAG,IAAIC,IAAI,CAACJ,IAAI,CAACG,IAAI,CAAC;QAChC,MAAME,aAAa,GAAG,GAAG,CAACF,IAAI,CAACG,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAEC,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,IAAIL,IAAI,CAACM,OAAO,CAAC,CAAC,CAACF,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;QAC1H,OAAO;UACHL,IAAI,EAAEE,aAAa;UACnBK,KAAK,EAAEV,IAAI,CAACU;QAChB,CAAC;MACL,CAAC,CAAC,CACDC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIT,IAAI,CAACQ,CAAC,CAACT,IAAI,CAAC,GAAG,IAAIC,IAAI,CAACS,CAAC,CAACV,IAAI,CAAC,CAAC,CAAC,CAAC;;MAE1DR,OAAO,CAACmB,GAAG,CAAC,0BAA0B,EAAEhB,YAAY,CAAC;MACrDhB,eAAe,CAACgB,YAAY,CAAC;IACjC;EACJ,CAAC,EAAE,CAACnB,SAAS,EAAEF,SAAS,CAAC,CAAC;EAE1B,IAAIM,SAAS,EAAE;IACX,oBAAOR,OAAA;MAAAwC,QAAA,EAAK;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACpC;EAEA,IAAIlC,KAAK,EAAE;IACP,oBAAOV,OAAA;MAAAwC,QAAA,GAAK,6BAAO,EAAC9B,KAAK;IAAA;MAAA+B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EACpC;EAEA,IAAItC,YAAY,CAACgB,MAAM,KAAK,CAAC,EAAE;IAC3B,oBAAOtB,OAAA;MAAAwC,QAAA,EAAK;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACxC;EAEA,MAAMC,OAAO,GAAG;IACZC,KAAK,EAAE;MACHC,IAAI,EAAE;IACV,CAAC;IACDC,KAAK,EAAE;MACHC,UAAU,EAAE3C,YAAY,CAACqB,GAAG,CAACF,IAAI,IAAIA,IAAI,CAACG,IAAI;IAClD,CAAC;IACDsB,MAAM,EAAE,CACJ;MACIC,IAAI,EAAE,aAAa;MACnBlC,IAAI,EAAEX,YAAY,CAACqB,GAAG,CAACF,IAAI,IAAIA,IAAI,CAACU,KAAK;IAC7C,CAAC,CACJ;IACDiB,KAAK,EAAE;MACHC,IAAI,EAAE,MAAM;MACZC,MAAM,EAAE;IAEZ,CAAC;IACDC,MAAM,EAAE;MACJC,OAAO,EAAE;IACb,CAAC;IACDC,OAAO,EAAE;MACLC,MAAM,EAAE,IAAI;MACZC,UAAU,EAAE;IAChB,CAAC;IACDC,WAAW,EAAE;MACbC,IAAI,EAAE;QACFC,MAAM,EAAE;UACJN,OAAO,EAAE,KAAK,CAAE;QACpB;MACJ;IACJ;EACA,CAAC;EAED,oBACIxD,OAAA;IAAAwC,QAAA,eACIxC,OAAA,CAACF,eAAe;MAACiE,UAAU,EAAElE,UAAW;MAACgD,OAAO,EAAEA;IAAQ;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5D,CAAC;AAEd;AAACzC,EAAA,CAjGQF,YAAY;AAAA+D,EAAA,GAAZ/D,YAAY;AAmGrB,eAAeA,YAAY;AAAC,IAAA+D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}